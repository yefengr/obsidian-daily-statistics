"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const te=require("obsidian");class Nt{dataFile="";statisticsFolder="";dailyTargetWordCount=1e3}//! moment.js
//! version : 2.30.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var Ft;function l(){return Ft.apply(null,arguments)}function vs(e){Ft=e}function F(e){return e instanceof Array||Object.prototype.toString.call(e)==="[object Array]"}function ae(e){return e!=null&&Object.prototype.toString.call(e)==="[object Object]"}function w(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function rt(e){if(Object.getOwnPropertyNames)return Object.getOwnPropertyNames(e).length===0;var t;for(t in e)if(w(e,t))return!1;return!0}function T(e){return e===void 0}function $(e){return typeof e=="number"||Object.prototype.toString.call(e)==="[object Number]"}function pe(e){return e instanceof Date||Object.prototype.toString.call(e)==="[object Date]"}function Rt(e,t){var s=[],a,r=e.length;for(a=0;a<r;++a)s.push(t(e[a],a));return s}function Q(e,t){for(var s in t)w(t,s)&&(e[s]=t[s]);return w(t,"toString")&&(e.toString=t.toString),w(t,"valueOf")&&(e.valueOf=t.valueOf),e}function L(e,t,s,a){return as(e,t,s,a,!0).utc()}function Ys(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function c(e){return e._pf==null&&(e._pf=Ys()),e._pf}var Qe;Array.prototype.some?Qe=Array.prototype.some:Qe=function(e){var t=Object(this),s=t.length>>>0,a;for(a=0;a<s;a++)if(a in t&&e.call(this,t[a],a,t))return!0;return!1};function it(e){var t=null,s=!1,a=e._d&&!isNaN(e._d.getTime());if(a&&(t=c(e),s=Qe.call(t.parsedDateParts,function(r){return r!=null}),a=t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&s),e._strict&&(a=a&&t.charsLeftOver===0&&t.unusedTokens.length===0&&t.bigHour===void 0)),Object.isFrozen==null||!Object.isFrozen(e))e._isValid=a;else return a;return e._isValid}function Ce(e){var t=L(NaN);return e!=null?Q(c(t),e):c(t).userInvalidated=!0,t}var Ot=l.momentProperties=[],Ze=!1;function nt(e,t){var s,a,r,i=Ot.length;if(T(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),T(t._i)||(e._i=t._i),T(t._f)||(e._f=t._f),T(t._l)||(e._l=t._l),T(t._strict)||(e._strict=t._strict),T(t._tzm)||(e._tzm=t._tzm),T(t._isUTC)||(e._isUTC=t._isUTC),T(t._offset)||(e._offset=t._offset),T(t._pf)||(e._pf=c(t)),T(t._locale)||(e._locale=t._locale),i>0)for(s=0;s<i;s++)a=Ot[s],r=t[a],T(r)||(e[a]=r);return e}function De(e){nt(this,e),this._d=new Date(e._d!=null?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),Ze===!1&&(Ze=!0,l.updateOffset(this),Ze=!1)}function R(e){return e instanceof De||e!=null&&e._isAMomentObject!=null}function Ct(e){l.suppressDeprecationWarnings===!1&&typeof console<"u"&&console.warn&&console.warn("Deprecation warning: "+e)}function P(e,t){var s=!0;return Q(function(){if(l.deprecationHandler!=null&&l.deprecationHandler(null,e),s){var a=[],r,i,n,u=arguments.length;for(i=0;i<u;i++){if(r="",typeof arguments[i]=="object"){r+=`
[`+i+"] ";for(n in arguments[0])w(arguments[0],n)&&(r+=n+": "+arguments[0][n]+", ");r=r.slice(0,-2)}else r=arguments[i];a.push(r)}Ct(e+`
Arguments: `+Array.prototype.slice.call(a).join("")+`
`+new Error().stack),s=!1}return t.apply(this,arguments)},t)}var Tt={};function Ut(e,t){l.deprecationHandler!=null&&l.deprecationHandler(e,t),Tt[e]||(Ct(t),Tt[e]=!0)}l.suppressDeprecationWarnings=!1;l.deprecationHandler=null;function E(e){return typeof Function<"u"&&e instanceof Function||Object.prototype.toString.call(e)==="[object Function]"}function Os(e){var t,s;for(s in e)w(e,s)&&(t=e[s],E(t)?this[s]=t:this["_"+s]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function Xe(e,t){var s=Q({},e),a;for(a in t)w(t,a)&&(ae(e[a])&&ae(t[a])?(s[a]={},Q(s[a],e[a]),Q(s[a],t[a])):t[a]!=null?s[a]=t[a]:delete s[a]);for(a in e)w(e,a)&&!w(t,a)&&ae(e[a])&&(s[a]=Q({},s[a]));return s}function ot(e){e!=null&&this.set(e)}var Ke;Object.keys?Ke=Object.keys:Ke=function(e){var t,s=[];for(t in e)w(e,t)&&s.push(t);return s};var Ts={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"};function bs(e,t,s){var a=this._calendar[e]||this._calendar.sameElse;return E(a)?a.call(t,s):a}function I(e,t,s){var a=""+Math.abs(e),r=t-a.length,i=e>=0;return(i?s?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+a}var lt=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Ye=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,$e={},le={};function h(e,t,s,a){var r=a;typeof a=="string"&&(r=function(){return this[a]()}),e&&(le[e]=r),t&&(le[t[0]]=function(){return I(r.apply(this,arguments),t[1],t[2])}),s&&(le[s]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function xs(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function Ps(e){var t=e.match(lt),s,a;for(s=0,a=t.length;s<a;s++)le[t[s]]?t[s]=le[t[s]]:t[s]=xs(t[s]);return function(r){var i="",n;for(n=0;n<a;n++)i+=E(t[n])?t[n].call(r,e):t[n];return i}}function Te(e,t){return e.isValid()?(t=It(t,e.localeData()),$e[t]=$e[t]||Ps(t),$e[t](e)):e.localeData().invalidDate()}function It(e,t){var s=5;function a(r){return t.longDateFormat(r)||r}for(Ye.lastIndex=0;s>=0&&Ye.test(e);)e=e.replace(Ye,a),Ye.lastIndex=0,s-=1;return e}var Ws={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};function Ns(e){var t=this._longDateFormat[e],s=this._longDateFormat[e.toUpperCase()];return t||!s?t:(this._longDateFormat[e]=s.match(lt).map(function(a){return a==="MMMM"||a==="MM"||a==="DD"||a==="dddd"?a.slice(1):a}).join(""),this._longDateFormat[e])}var Fs="Invalid date";function Rs(){return this._invalidDate}var Cs="%d",Us=/\d{1,2}/;function Is(e){return this._ordinal.replace("%d",e)}var Ls={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function Es(e,t,s,a){var r=this._relativeTime[s];return E(r)?r(e,t,s,a):r.replace(/%d/i,e)}function Hs(e,t){var s=this._relativeTime[e>0?"future":"past"];return E(s)?s(t):s.replace(/%s/i,t)}var bt={D:"date",dates:"date",date:"date",d:"day",days:"day",day:"day",e:"weekday",weekdays:"weekday",weekday:"weekday",E:"isoWeekday",isoweekdays:"isoWeekday",isoweekday:"isoWeekday",DDD:"dayOfYear",dayofyears:"dayOfYear",dayofyear:"dayOfYear",h:"hour",hours:"hour",hour:"hour",ms:"millisecond",milliseconds:"millisecond",millisecond:"millisecond",m:"minute",minutes:"minute",minute:"minute",M:"month",months:"month",month:"month",Q:"quarter",quarters:"quarter",quarter:"quarter",s:"second",seconds:"second",second:"second",gg:"weekYear",weekyears:"weekYear",weekyear:"weekYear",GG:"isoWeekYear",isoweekyears:"isoWeekYear",isoweekyear:"isoWeekYear",w:"week",weeks:"week",week:"week",W:"isoWeek",isoweeks:"isoWeek",isoweek:"isoWeek",y:"year",years:"year",year:"year"};function W(e){return typeof e=="string"?bt[e]||bt[e.toLowerCase()]:void 0}function ut(e){var t={},s,a;for(a in e)w(e,a)&&(s=W(a),s&&(t[s]=e[a]));return t}var As={date:9,day:11,weekday:11,isoWeekday:11,dayOfYear:4,hour:13,millisecond:16,minute:14,month:8,quarter:7,second:15,weekYear:1,isoWeekYear:1,week:5,isoWeek:5,year:1};function Vs(e){var t=[],s;for(s in e)w(e,s)&&t.push({unit:s,priority:As[s]});return t.sort(function(a,r){return a.priority-r.priority}),t}var Lt=/\d/,b=/\d\d/,Et=/\d{3}/,dt=/\d{4}/,Ue=/[+-]?\d{6}/,p=/\d\d?/,Ht=/\d\d\d\d?/,At=/\d\d\d\d\d\d?/,Ie=/\d{1,3}/,ht=/\d{1,4}/,Le=/[+-]?\d{1,6}/,he=/\d+/,Ee=/[+-]?\d+/,Gs=/Z|[+-]\d\d:?\d\d/gi,He=/Z|[+-]\d\d(?::?\d\d)?/gi,js=/[+-]?\d+(\.\d{1,3})?/,Me=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,fe=/^[1-9]\d?/,ft=/^([1-9]\d|\d)/,Pe;Pe={};function d(e,t,s){Pe[e]=E(t)?t:function(a,r){return a&&s?s:t}}function zs(e,t){return w(Pe,e)?Pe[e](t._strict,t._locale):new RegExp(Zs(e))}function Zs(e){return z(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,s,a,r,i){return s||a||r||i}))}function z(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function x(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function m(e){var t=+e,s=0;return t!==0&&isFinite(t)&&(s=x(t)),s}var et={};function S(e,t){var s,a=t,r;for(typeof e=="string"&&(e=[e]),$(t)&&(a=function(i,n){n[t]=m(i)}),r=e.length,s=0;s<r;s++)et[e[s]]=a}function ve(e,t){S(e,function(s,a,r,i){r._w=r._w||{},t(s,r._w,r,i)})}function $s(e,t,s){t!=null&&w(et,e)&&et[e](t,s._a,s,e)}function Ae(e){return e%4===0&&e%100!==0||e%400===0}var Y=0,G=1,U=2,v=3,N=4,j=5,se=6,Bs=7,qs=8;h("Y",0,0,function(){var e=this.year();return e<=9999?I(e,4):"+"+e});h(0,["YY",2],0,function(){return this.year()%100});h(0,["YYYY",4],0,"year");h(0,["YYYYY",5],0,"year");h(0,["YYYYYY",6,!0],0,"year");d("Y",Ee);d("YY",p,b);d("YYYY",ht,dt);d("YYYYY",Le,Ue);d("YYYYYY",Le,Ue);S(["YYYYY","YYYYYY"],Y);S("YYYY",function(e,t){t[Y]=e.length===2?l.parseTwoDigitYear(e):m(e)});S("YY",function(e,t){t[Y]=l.parseTwoDigitYear(e)});S("Y",function(e,t){t[Y]=parseInt(e,10)});function ye(e){return Ae(e)?366:365}l.parseTwoDigitYear=function(e){return m(e)+(m(e)>68?1900:2e3)};var Vt=ce("FullYear",!0);function Js(){return Ae(this.year())}function ce(e,t){return function(s){return s!=null?(Gt(this,e,s),l.updateOffset(this,t),this):we(this,e)}}function we(e,t){if(!e.isValid())return NaN;var s=e._d,a=e._isUTC;switch(t){case"Milliseconds":return a?s.getUTCMilliseconds():s.getMilliseconds();case"Seconds":return a?s.getUTCSeconds():s.getSeconds();case"Minutes":return a?s.getUTCMinutes():s.getMinutes();case"Hours":return a?s.getUTCHours():s.getHours();case"Date":return a?s.getUTCDate():s.getDate();case"Day":return a?s.getUTCDay():s.getDay();case"Month":return a?s.getUTCMonth():s.getMonth();case"FullYear":return a?s.getUTCFullYear():s.getFullYear();default:return NaN}}function Gt(e,t,s){var a,r,i,n,u;if(!(!e.isValid()||isNaN(s))){switch(a=e._d,r=e._isUTC,t){case"Milliseconds":return void(r?a.setUTCMilliseconds(s):a.setMilliseconds(s));case"Seconds":return void(r?a.setUTCSeconds(s):a.setSeconds(s));case"Minutes":return void(r?a.setUTCMinutes(s):a.setMinutes(s));case"Hours":return void(r?a.setUTCHours(s):a.setHours(s));case"Date":return void(r?a.setUTCDate(s):a.setDate(s));case"FullYear":break;default:return}i=s,n=e.month(),u=e.date(),u=u===29&&n===1&&!Ae(i)?28:u,r?a.setUTCFullYear(i,n,u):a.setFullYear(i,n,u)}}function Qs(e){return e=W(e),E(this[e])?this[e]():this}function Xs(e,t){if(typeof e=="object"){e=ut(e);var s=Vs(e),a,r=s.length;for(a=0;a<r;a++)this[s[a].unit](e[s[a].unit])}else if(e=W(e),E(this[e]))return this[e](t);return this}function Ks(e,t){return(e%t+t)%t}var M;Array.prototype.indexOf?M=Array.prototype.indexOf:M=function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};function ct(e,t){if(isNaN(e)||isNaN(t))return NaN;var s=Ks(t,12);return e+=(t-s)/12,s===1?Ae(e)?29:28:31-s%7%2}h("M",["MM",2],"Mo",function(){return this.month()+1});h("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)});h("MMMM",0,0,function(e){return this.localeData().months(this,e)});d("M",p,fe);d("MM",p,b);d("MMM",function(e,t){return t.monthsShortRegex(e)});d("MMMM",function(e,t){return t.monthsRegex(e)});S(["M","MM"],function(e,t){t[G]=m(e)-1});S(["MMM","MMMM"],function(e,t,s,a){var r=s._locale.monthsParse(e,a,s._strict);r!=null?t[G]=r:c(s).invalidMonth=e});var ea="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),jt="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),zt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,ta=Me,sa=Me;function aa(e,t){return e?F(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||zt).test(t)?"format":"standalone"][e.month()]:F(this._months)?this._months:this._months.standalone}function ra(e,t){return e?F(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[zt.test(t)?"format":"standalone"][e.month()]:F(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function ia(e,t,s){var a,r,i,n=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)i=L([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(i,"").toLocaleLowerCase();return s?t==="MMM"?(r=M.call(this._shortMonthsParse,n),r!==-1?r:null):(r=M.call(this._longMonthsParse,n),r!==-1?r:null):t==="MMM"?(r=M.call(this._shortMonthsParse,n),r!==-1?r:(r=M.call(this._longMonthsParse,n),r!==-1?r:null)):(r=M.call(this._longMonthsParse,n),r!==-1?r:(r=M.call(this._shortMonthsParse,n),r!==-1?r:null))}function na(e,t,s){var a,r,i;if(this._monthsParseExact)return ia.call(this,e,t,s);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(r=L([2e3,a]),s&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),!s&&!this._monthsParse[a]&&(i="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[a]=new RegExp(i.replace(".",""),"i")),s&&t==="MMMM"&&this._longMonthsParse[a].test(e))return a;if(s&&t==="MMM"&&this._shortMonthsParse[a].test(e))return a;if(!s&&this._monthsParse[a].test(e))return a}}function Zt(e,t){if(!e.isValid())return e;if(typeof t=="string"){if(/^\d+$/.test(t))t=m(t);else if(t=e.localeData().monthsParse(t),!$(t))return e}var s=t,a=e.date();return a=a<29?a:Math.min(a,ct(e.year(),s)),e._isUTC?e._d.setUTCMonth(s,a):e._d.setMonth(s,a),e}function $t(e){return e!=null?(Zt(this,e),l.updateOffset(this,!0),this):we(this,"Month")}function oa(){return ct(this.year(),this.month())}function la(e){return this._monthsParseExact?(w(this,"_monthsRegex")||Bt.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(w(this,"_monthsShortRegex")||(this._monthsShortRegex=ta),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function ua(e){return this._monthsParseExact?(w(this,"_monthsRegex")||Bt.call(this),e?this._monthsStrictRegex:this._monthsRegex):(w(this,"_monthsRegex")||(this._monthsRegex=sa),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function Bt(){function e(f,_){return _.length-f.length}var t=[],s=[],a=[],r,i,n,u;for(r=0;r<12;r++)i=L([2e3,r]),n=z(this.monthsShort(i,"")),u=z(this.months(i,"")),t.push(n),s.push(u),a.push(u),a.push(n);t.sort(e),s.sort(e),a.sort(e),this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+t.join("|")+")","i")}function da(e,t,s,a,r,i,n){var u;return e<100&&e>=0?(u=new Date(e+400,t,s,a,r,i,n),isFinite(u.getFullYear())&&u.setFullYear(e)):u=new Date(e,t,s,a,r,i,n),u}function ge(e){var t,s;return e<100&&e>=0?(s=Array.prototype.slice.call(arguments),s[0]=e+400,t=new Date(Date.UTC.apply(null,s)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function We(e,t,s){var a=7+t-s,r=(7+ge(e,0,a).getUTCDay()-t)%7;return-r+a-1}function qt(e,t,s,a,r){var i=(7+s-a)%7,n=We(e,a,r),u=1+7*(t-1)+i+n,f,_;return u<=0?(f=e-1,_=ye(f)+u):u>ye(e)?(f=e+1,_=u-ye(e)):(f=e,_=u),{year:f,dayOfYear:_}}function Se(e,t,s){var a=We(e.year(),t,s),r=Math.floor((e.dayOfYear()-a-1)/7)+1,i,n;return r<1?(n=e.year()-1,i=r+Z(n,t,s)):r>Z(e.year(),t,s)?(i=r-Z(e.year(),t,s),n=e.year()+1):(n=e.year(),i=r),{week:i,year:n}}function Z(e,t,s){var a=We(e,t,s),r=We(e+1,t,s);return(ye(e)-a+r)/7}h("w",["ww",2],"wo","week");h("W",["WW",2],"Wo","isoWeek");d("w",p,fe);d("ww",p,b);d("W",p,fe);d("WW",p,b);ve(["w","ww","W","WW"],function(e,t,s,a){t[a.substr(0,1)]=m(e)});function ha(e){return Se(e,this._week.dow,this._week.doy).week}var fa={dow:0,doy:6};function ca(){return this._week.dow}function ma(){return this._week.doy}function _a(e){var t=this.localeData().week(this);return e==null?t:this.add((e-t)*7,"d")}function ya(e){var t=Se(this,1,4).week;return e==null?t:this.add((e-t)*7,"d")}h("d",0,"do","day");h("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)});h("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)});h("dddd",0,0,function(e){return this.localeData().weekdays(this,e)});h("e",0,0,"weekday");h("E",0,0,"isoWeekday");d("d",p);d("e",p);d("E",p);d("dd",function(e,t){return t.weekdaysMinRegex(e)});d("ddd",function(e,t){return t.weekdaysShortRegex(e)});d("dddd",function(e,t){return t.weekdaysRegex(e)});ve(["dd","ddd","dddd"],function(e,t,s,a){var r=s._locale.weekdaysParse(e,a,s._strict);r!=null?t.d=r:c(s).invalidWeekday=e});ve(["d","e","E"],function(e,t,s,a){t[a]=m(e)});function wa(e,t){return typeof e!="string"?e:isNaN(e)?(e=t.weekdaysParse(e),typeof e=="number"?e:null):parseInt(e,10)}function ga(e,t){return typeof e=="string"?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function mt(e,t){return e.slice(t,7).concat(e.slice(0,t))}var Sa="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Jt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ka="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),pa=Me,Da=Me,Ma=Me;function va(e,t){var s=F(this._weekdays)?this._weekdays:this._weekdays[e&&e!==!0&&this._weekdays.isFormat.test(t)?"format":"standalone"];return e===!0?mt(s,this._week.dow):e?s[e.day()]:s}function Ya(e){return e===!0?mt(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Oa(e){return e===!0?mt(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Ta(e,t,s){var a,r,i,n=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)i=L([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(i,"").toLocaleLowerCase();return s?t==="dddd"?(r=M.call(this._weekdaysParse,n),r!==-1?r:null):t==="ddd"?(r=M.call(this._shortWeekdaysParse,n),r!==-1?r:null):(r=M.call(this._minWeekdaysParse,n),r!==-1?r:null):t==="dddd"?(r=M.call(this._weekdaysParse,n),r!==-1||(r=M.call(this._shortWeekdaysParse,n),r!==-1)?r:(r=M.call(this._minWeekdaysParse,n),r!==-1?r:null)):t==="ddd"?(r=M.call(this._shortWeekdaysParse,n),r!==-1||(r=M.call(this._weekdaysParse,n),r!==-1)?r:(r=M.call(this._minWeekdaysParse,n),r!==-1?r:null)):(r=M.call(this._minWeekdaysParse,n),r!==-1||(r=M.call(this._weekdaysParse,n),r!==-1)?r:(r=M.call(this._shortWeekdaysParse,n),r!==-1?r:null))}function ba(e,t,s){var a,r,i;if(this._weekdaysParseExact)return Ta.call(this,e,t,s);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(r=L([2e3,1]).day(a),s&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[a]||(i="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[a]=new RegExp(i.replace(".",""),"i")),s&&t==="dddd"&&this._fullWeekdaysParse[a].test(e))return a;if(s&&t==="ddd"&&this._shortWeekdaysParse[a].test(e))return a;if(s&&t==="dd"&&this._minWeekdaysParse[a].test(e))return a;if(!s&&this._weekdaysParse[a].test(e))return a}}function xa(e){if(!this.isValid())return e!=null?this:NaN;var t=we(this,"Day");return e!=null?(e=wa(e,this.localeData()),this.add(e-t,"d")):t}function Pa(e){if(!this.isValid())return e!=null?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return e==null?t:this.add(e-t,"d")}function Wa(e){if(!this.isValid())return e!=null?this:NaN;if(e!=null){var t=ga(e,this.localeData());return this.day(this.day()%7?t:t-7)}else return this.day()||7}function Na(e){return this._weekdaysParseExact?(w(this,"_weekdaysRegex")||_t.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(w(this,"_weekdaysRegex")||(this._weekdaysRegex=pa),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function Fa(e){return this._weekdaysParseExact?(w(this,"_weekdaysRegex")||_t.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(w(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Da),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Ra(e){return this._weekdaysParseExact?(w(this,"_weekdaysRegex")||_t.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(w(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ma),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function _t(){function e(O,H){return H.length-O.length}var t=[],s=[],a=[],r=[],i,n,u,f,_;for(i=0;i<7;i++)n=L([2e3,1]).day(i),u=z(this.weekdaysMin(n,"")),f=z(this.weekdaysShort(n,"")),_=z(this.weekdays(n,"")),t.push(u),s.push(f),a.push(_),r.push(u),r.push(f),r.push(_);t.sort(e),s.sort(e),a.sort(e),r.sort(e),this._weekdaysRegex=new RegExp("^("+r.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+t.join("|")+")","i")}function yt(){return this.hours()%12||12}function Ca(){return this.hours()||24}h("H",["HH",2],0,"hour");h("h",["hh",2],0,yt);h("k",["kk",2],0,Ca);h("hmm",0,0,function(){return""+yt.apply(this)+I(this.minutes(),2)});h("hmmss",0,0,function(){return""+yt.apply(this)+I(this.minutes(),2)+I(this.seconds(),2)});h("Hmm",0,0,function(){return""+this.hours()+I(this.minutes(),2)});h("Hmmss",0,0,function(){return""+this.hours()+I(this.minutes(),2)+I(this.seconds(),2)});function Qt(e,t){h(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}Qt("a",!0);Qt("A",!1);function Xt(e,t){return t._meridiemParse}d("a",Xt);d("A",Xt);d("H",p,ft);d("h",p,fe);d("k",p,fe);d("HH",p,b);d("hh",p,b);d("kk",p,b);d("hmm",Ht);d("hmmss",At);d("Hmm",Ht);d("Hmmss",At);S(["H","HH"],v);S(["k","kk"],function(e,t,s){var a=m(e);t[v]=a===24?0:a});S(["a","A"],function(e,t,s){s._isPm=s._locale.isPM(e),s._meridiem=e});S(["h","hh"],function(e,t,s){t[v]=m(e),c(s).bigHour=!0});S("hmm",function(e,t,s){var a=e.length-2;t[v]=m(e.substr(0,a)),t[N]=m(e.substr(a)),c(s).bigHour=!0});S("hmmss",function(e,t,s){var a=e.length-4,r=e.length-2;t[v]=m(e.substr(0,a)),t[N]=m(e.substr(a,2)),t[j]=m(e.substr(r)),c(s).bigHour=!0});S("Hmm",function(e,t,s){var a=e.length-2;t[v]=m(e.substr(0,a)),t[N]=m(e.substr(a))});S("Hmmss",function(e,t,s){var a=e.length-4,r=e.length-2;t[v]=m(e.substr(0,a)),t[N]=m(e.substr(a,2)),t[j]=m(e.substr(r))});function Ua(e){return(e+"").toLowerCase().charAt(0)==="p"}var Ia=/[ap]\.?m?\.?/i,La=ce("Hours",!0);function Ea(e,t,s){return e>11?s?"pm":"PM":s?"am":"AM"}var Kt={calendar:Ts,longDateFormat:Ws,invalidDate:Fs,ordinal:Cs,dayOfMonthOrdinalParse:Us,relativeTime:Ls,months:ea,monthsShort:jt,week:fa,weekdays:Sa,weekdaysMin:ka,weekdaysShort:Jt,meridiemParse:Ia},D={},me={},ke;function Ha(e,t){var s,a=Math.min(e.length,t.length);for(s=0;s<a;s+=1)if(e[s]!==t[s])return s;return a}function xt(e){return e&&e.toLowerCase().replace("_","-")}function Aa(e){for(var t=0,s,a,r,i;t<e.length;){for(i=xt(e[t]).split("-"),s=i.length,a=xt(e[t+1]),a=a?a.split("-"):null;s>0;){if(r=Ve(i.slice(0,s).join("-")),r)return r;if(a&&a.length>=s&&Ha(i,a)>=s-1)break;s--}t++}return ke}function Va(e){return!!(e&&e.match("^[^/\\\\]*$"))}function Ve(e){var t=null,s;if(D[e]===void 0&&typeof module<"u"&&module&&module.exports&&Va(e))try{t=ke._abbr,s=require,s("./locale/"+e),K(t)}catch{D[e]=null}return D[e]}function K(e,t){var s;return e&&(T(t)?s=B(e):s=wt(e,t),s?ke=s:typeof console<"u"&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),ke._abbr}function wt(e,t){if(t!==null){var s,a=Kt;if(t.abbr=e,D[e]!=null)Ut("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),a=D[e]._config;else if(t.parentLocale!=null)if(D[t.parentLocale]!=null)a=D[t.parentLocale]._config;else if(s=Ve(t.parentLocale),s!=null)a=s._config;else return me[t.parentLocale]||(me[t.parentLocale]=[]),me[t.parentLocale].push({name:e,config:t}),null;return D[e]=new ot(Xe(a,t)),me[e]&&me[e].forEach(function(r){wt(r.name,r.config)}),K(e),D[e]}else return delete D[e],null}function Ga(e,t){if(t!=null){var s,a,r=Kt;D[e]!=null&&D[e].parentLocale!=null?D[e].set(Xe(D[e]._config,t)):(a=Ve(e),a!=null&&(r=a._config),t=Xe(r,t),a==null&&(t.abbr=e),s=new ot(t),s.parentLocale=D[e],D[e]=s),K(e)}else D[e]!=null&&(D[e].parentLocale!=null?(D[e]=D[e].parentLocale,e===K()&&K(e)):D[e]!=null&&delete D[e]);return D[e]}function B(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return ke;if(!F(e)){if(t=Ve(e),t)return t;e=[e]}return Aa(e)}function ja(){return Ke(D)}function gt(e){var t,s=e._a;return s&&c(e).overflow===-2&&(t=s[G]<0||s[G]>11?G:s[U]<1||s[U]>ct(s[Y],s[G])?U:s[v]<0||s[v]>24||s[v]===24&&(s[N]!==0||s[j]!==0||s[se]!==0)?v:s[N]<0||s[N]>59?N:s[j]<0||s[j]>59?j:s[se]<0||s[se]>999?se:-1,c(e)._overflowDayOfYear&&(t<Y||t>U)&&(t=U),c(e)._overflowWeeks&&t===-1&&(t=Bs),c(e)._overflowWeekday&&t===-1&&(t=qs),c(e).overflow=t),e}var za=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Za=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,$a=/Z|[+-]\d\d(?::?\d\d)?/,Oe=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],Be=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Ba=/^\/?Date\((-?\d+)/i,qa=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,Ja={UT:0,GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function es(e){var t,s,a=e._i,r=za.exec(a)||Za.exec(a),i,n,u,f,_=Oe.length,O=Be.length;if(r){for(c(e).iso=!0,t=0,s=_;t<s;t++)if(Oe[t][1].exec(r[1])){n=Oe[t][0],i=Oe[t][2]!==!1;break}if(n==null){e._isValid=!1;return}if(r[3]){for(t=0,s=O;t<s;t++)if(Be[t][1].exec(r[3])){u=(r[2]||" ")+Be[t][0];break}if(u==null){e._isValid=!1;return}}if(!i&&u!=null){e._isValid=!1;return}if(r[4])if($a.exec(r[4]))f="Z";else{e._isValid=!1;return}e._f=n+(u||"")+(f||""),kt(e)}else e._isValid=!1}function Qa(e,t,s,a,r,i){var n=[Xa(e),jt.indexOf(t),parseInt(s,10),parseInt(a,10),parseInt(r,10)];return i&&n.push(parseInt(i,10)),n}function Xa(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function Ka(e){return e.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,"")}function er(e,t,s){if(e){var a=Jt.indexOf(e),r=new Date(t[0],t[1],t[2]).getDay();if(a!==r)return c(s).weekdayMismatch=!0,s._isValid=!1,!1}return!0}function tr(e,t,s){if(e)return Ja[e];if(t)return 0;var a=parseInt(s,10),r=a%100,i=(a-r)/100;return i*60+r}function ts(e){var t=qa.exec(Ka(e._i)),s;if(t){if(s=Qa(t[4],t[3],t[2],t[5],t[6],t[7]),!er(t[1],s,e))return;e._a=s,e._tzm=tr(t[8],t[9],t[10]),e._d=ge.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),c(e).rfc2822=!0}else e._isValid=!1}function sr(e){var t=Ba.exec(e._i);if(t!==null){e._d=new Date(+t[1]);return}if(es(e),e._isValid===!1)delete e._isValid;else return;if(ts(e),e._isValid===!1)delete e._isValid;else return;e._strict?e._isValid=!1:l.createFromInputFallback(e)}l.createFromInputFallback=P("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))});function ne(e,t,s){return e??t??s}function ar(e){var t=new Date(l.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}function St(e){var t,s,a=[],r,i,n;if(!e._d){for(r=ar(e),e._w&&e._a[U]==null&&e._a[G]==null&&rr(e),e._dayOfYear!=null&&(n=ne(e._a[Y],r[Y]),(e._dayOfYear>ye(n)||e._dayOfYear===0)&&(c(e)._overflowDayOfYear=!0),s=ge(n,0,e._dayOfYear),e._a[G]=s.getUTCMonth(),e._a[U]=s.getUTCDate()),t=0;t<3&&e._a[t]==null;++t)e._a[t]=a[t]=r[t];for(;t<7;t++)e._a[t]=a[t]=e._a[t]==null?t===2?1:0:e._a[t];e._a[v]===24&&e._a[N]===0&&e._a[j]===0&&e._a[se]===0&&(e._nextDay=!0,e._a[v]=0),e._d=(e._useUTC?ge:da).apply(null,a),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),e._tzm!=null&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[v]=24),e._w&&typeof e._w.d<"u"&&e._w.d!==i&&(c(e).weekdayMismatch=!0)}}function rr(e){var t,s,a,r,i,n,u,f,_;t=e._w,t.GG!=null||t.W!=null||t.E!=null?(i=1,n=4,s=ne(t.GG,e._a[Y],Se(k(),1,4).year),a=ne(t.W,1),r=ne(t.E,1),(r<1||r>7)&&(f=!0)):(i=e._locale._week.dow,n=e._locale._week.doy,_=Se(k(),i,n),s=ne(t.gg,e._a[Y],_.year),a=ne(t.w,_.week),t.d!=null?(r=t.d,(r<0||r>6)&&(f=!0)):t.e!=null?(r=t.e+i,(t.e<0||t.e>6)&&(f=!0)):r=i),a<1||a>Z(s,i,n)?c(e)._overflowWeeks=!0:f!=null?c(e)._overflowWeekday=!0:(u=qt(s,a,r,i,n),e._a[Y]=u.year,e._dayOfYear=u.dayOfYear)}l.ISO_8601=function(){};l.RFC_2822=function(){};function kt(e){if(e._f===l.ISO_8601){es(e);return}if(e._f===l.RFC_2822){ts(e);return}e._a=[],c(e).empty=!0;var t=""+e._i,s,a,r,i,n,u=t.length,f=0,_,O;for(r=It(e._f,e._locale).match(lt)||[],O=r.length,s=0;s<O;s++)i=r[s],a=(t.match(zs(i,e))||[])[0],a&&(n=t.substr(0,t.indexOf(a)),n.length>0&&c(e).unusedInput.push(n),t=t.slice(t.indexOf(a)+a.length),f+=a.length),le[i]?(a?c(e).empty=!1:c(e).unusedTokens.push(i),$s(i,a,e)):e._strict&&!a&&c(e).unusedTokens.push(i);c(e).charsLeftOver=u-f,t.length>0&&c(e).unusedInput.push(t),e._a[v]<=12&&c(e).bigHour===!0&&e._a[v]>0&&(c(e).bigHour=void 0),c(e).parsedDateParts=e._a.slice(0),c(e).meridiem=e._meridiem,e._a[v]=ir(e._locale,e._a[v],e._meridiem),_=c(e).era,_!==null&&(e._a[Y]=e._locale.erasConvertYear(_,e._a[Y])),St(e),gt(e)}function ir(e,t,s){var a;return s==null?t:e.meridiemHour!=null?e.meridiemHour(t,s):(e.isPM!=null&&(a=e.isPM(s),a&&t<12&&(t+=12),!a&&t===12&&(t=0)),t)}function nr(e){var t,s,a,r,i,n,u=!1,f=e._f.length;if(f===0){c(e).invalidFormat=!0,e._d=new Date(NaN);return}for(r=0;r<f;r++)i=0,n=!1,t=nt({},e),e._useUTC!=null&&(t._useUTC=e._useUTC),t._f=e._f[r],kt(t),it(t)&&(n=!0),i+=c(t).charsLeftOver,i+=c(t).unusedTokens.length*10,c(t).score=i,u?i<a&&(a=i,s=t):(a==null||i<a||n)&&(a=i,s=t,n&&(u=!0));Q(e,s||t)}function or(e){if(!e._d){var t=ut(e._i),s=t.day===void 0?t.date:t.day;e._a=Rt([t.year,t.month,s,t.hour,t.minute,t.second,t.millisecond],function(a){return a&&parseInt(a,10)}),St(e)}}function lr(e){var t=new De(gt(ss(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function ss(e){var t=e._i,s=e._f;return e._locale=e._locale||B(e._l),t===null||s===void 0&&t===""?Ce({nullInput:!0}):(typeof t=="string"&&(e._i=t=e._locale.preparse(t)),R(t)?new De(gt(t)):(pe(t)?e._d=t:F(s)?nr(e):s?kt(e):ur(e),it(e)||(e._d=null),e))}function ur(e){var t=e._i;T(t)?e._d=new Date(l.now()):pe(t)?e._d=new Date(t.valueOf()):typeof t=="string"?sr(e):F(t)?(e._a=Rt(t.slice(0),function(s){return parseInt(s,10)}),St(e)):ae(t)?or(e):$(t)?e._d=new Date(t):l.createFromInputFallback(e)}function as(e,t,s,a,r){var i={};return(t===!0||t===!1)&&(a=t,t=void 0),(s===!0||s===!1)&&(a=s,s=void 0),(ae(e)&&rt(e)||F(e)&&e.length===0)&&(e=void 0),i._isAMomentObject=!0,i._useUTC=i._isUTC=r,i._l=s,i._i=e,i._f=t,i._strict=a,lr(i)}function k(e,t,s,a){return as(e,t,s,a,!1)}var dr=P("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=k.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:Ce()}),hr=P("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=k.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:Ce()});function rs(e,t){var s,a;if(t.length===1&&F(t[0])&&(t=t[0]),!t.length)return k();for(s=t[0],a=1;a<t.length;++a)(!t[a].isValid()||t[a][e](s))&&(s=t[a]);return s}function fr(){var e=[].slice.call(arguments,0);return rs("isBefore",e)}function cr(){var e=[].slice.call(arguments,0);return rs("isAfter",e)}var mr=function(){return Date.now?Date.now():+new Date},_e=["year","quarter","month","week","day","hour","minute","second","millisecond"];function _r(e){var t,s=!1,a,r=_e.length;for(t in e)if(w(e,t)&&!(M.call(_e,t)!==-1&&(e[t]==null||!isNaN(e[t]))))return!1;for(a=0;a<r;++a)if(e[_e[a]]){if(s)return!1;parseFloat(e[_e[a]])!==m(e[_e[a]])&&(s=!0)}return!0}function yr(){return this._isValid}function wr(){return C(NaN)}function Ge(e){var t=ut(e),s=t.year||0,a=t.quarter||0,r=t.month||0,i=t.week||t.isoWeek||0,n=t.day||0,u=t.hour||0,f=t.minute||0,_=t.second||0,O=t.millisecond||0;this._isValid=_r(t),this._milliseconds=+O+_*1e3+f*6e4+u*1e3*60*60,this._days=+n+i*7,this._months=+r+a*3+s*12,this._data={},this._locale=B(),this._bubble()}function be(e){return e instanceof Ge}function tt(e){return e<0?Math.round(-1*e)*-1:Math.round(e)}function gr(e,t,s){var a=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),i=0,n;for(n=0;n<a;n++)(s&&e[n]!==t[n]||!s&&m(e[n])!==m(t[n]))&&i++;return i+r}function is(e,t){h(e,0,0,function(){var s=this.utcOffset(),a="+";return s<0&&(s=-s,a="-"),a+I(~~(s/60),2)+t+I(~~s%60,2)})}is("Z",":");is("ZZ","");d("Z",He);d("ZZ",He);S(["Z","ZZ"],function(e,t,s){s._useUTC=!0,s._tzm=pt(He,e)});var Sr=/([\+\-]|\d\d)/gi;function pt(e,t){var s=(t||"").match(e),a,r,i;return s===null?null:(a=s[s.length-1]||[],r=(a+"").match(Sr)||["-",0,0],i=+(r[1]*60)+m(r[2]),i===0?0:r[0]==="+"?i:-i)}function Dt(e,t){var s,a;return t._isUTC?(s=t.clone(),a=(R(e)||pe(e)?e.valueOf():k(e).valueOf())-s.valueOf(),s._d.setTime(s._d.valueOf()+a),l.updateOffset(s,!1),s):k(e).local()}function st(e){return-Math.round(e._d.getTimezoneOffset())}l.updateOffset=function(){};function kr(e,t,s){var a=this._offset||0,r;if(!this.isValid())return e!=null?this:NaN;if(e!=null){if(typeof e=="string"){if(e=pt(He,e),e===null)return this}else Math.abs(e)<16&&!s&&(e=e*60);return!this._isUTC&&t&&(r=st(this)),this._offset=e,this._isUTC=!0,r!=null&&this.add(r,"m"),a!==e&&(!t||this._changeInProgress?ls(this,C(e-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,l.updateOffset(this,!0),this._changeInProgress=null)),this}else return this._isUTC?a:st(this)}function pr(e,t){return e!=null?(typeof e!="string"&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Dr(e){return this.utcOffset(0,e)}function Mr(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(st(this),"m")),this}function vr(){if(this._tzm!=null)this.utcOffset(this._tzm,!1,!0);else if(typeof this._i=="string"){var e=pt(Gs,this._i);e!=null?this.utcOffset(e):this.utcOffset(0,!0)}return this}function Yr(e){return this.isValid()?(e=e?k(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function Or(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Tr(){if(!T(this._isDSTShifted))return this._isDSTShifted;var e={},t;return nt(e,this),e=ss(e),e._a?(t=e._isUTC?L(e._a):k(e._a),this._isDSTShifted=this.isValid()&&gr(e._a,t.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}function br(){return this.isValid()?!this._isUTC:!1}function xr(){return this.isValid()?this._isUTC:!1}function ns(){return this.isValid()?this._isUTC&&this._offset===0:!1}var Pr=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Wr=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function C(e,t){var s=e,a=null,r,i,n;return be(e)?s={ms:e._milliseconds,d:e._days,M:e._months}:$(e)||!isNaN(+e)?(s={},t?s[t]=+e:s.milliseconds=+e):(a=Pr.exec(e))?(r=a[1]==="-"?-1:1,s={y:0,d:m(a[U])*r,h:m(a[v])*r,m:m(a[N])*r,s:m(a[j])*r,ms:m(tt(a[se]*1e3))*r}):(a=Wr.exec(e))?(r=a[1]==="-"?-1:1,s={y:ee(a[2],r),M:ee(a[3],r),w:ee(a[4],r),d:ee(a[5],r),h:ee(a[6],r),m:ee(a[7],r),s:ee(a[8],r)}):s==null?s={}:typeof s=="object"&&("from"in s||"to"in s)&&(n=Nr(k(s.from),k(s.to)),s={},s.ms=n.milliseconds,s.M=n.months),i=new Ge(s),be(e)&&w(e,"_locale")&&(i._locale=e._locale),be(e)&&w(e,"_isValid")&&(i._isValid=e._isValid),i}C.fn=Ge.prototype;C.invalid=wr;function ee(e,t){var s=e&&parseFloat(e.replace(",","."));return(isNaN(s)?0:s)*t}function Pt(e,t){var s={};return s.months=t.month()-e.month()+(t.year()-e.year())*12,e.clone().add(s.months,"M").isAfter(t)&&--s.months,s.milliseconds=+t-+e.clone().add(s.months,"M"),s}function Nr(e,t){var s;return e.isValid()&&t.isValid()?(t=Dt(t,e),e.isBefore(t)?s=Pt(e,t):(s=Pt(t,e),s.milliseconds=-s.milliseconds,s.months=-s.months),s):{milliseconds:0,months:0}}function os(e,t){return function(s,a){var r,i;return a!==null&&!isNaN(+a)&&(Ut(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=s,s=a,a=i),r=C(s,a),ls(this,r,e),this}}function ls(e,t,s,a){var r=t._milliseconds,i=tt(t._days),n=tt(t._months);e.isValid()&&(a=a??!0,n&&Zt(e,we(e,"Month")+n*s),i&&Gt(e,"Date",we(e,"Date")+i*s),r&&e._d.setTime(e._d.valueOf()+r*s),a&&l.updateOffset(e,i||n))}var Fr=os(1,"add"),Rr=os(-1,"subtract");function us(e){return typeof e=="string"||e instanceof String}function Cr(e){return R(e)||pe(e)||us(e)||$(e)||Ir(e)||Ur(e)||e===null||e===void 0}function Ur(e){var t=ae(e)&&!rt(e),s=!1,a=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],r,i,n=a.length;for(r=0;r<n;r+=1)i=a[r],s=s||w(e,i);return t&&s}function Ir(e){var t=F(e),s=!1;return t&&(s=e.filter(function(a){return!$(a)&&us(e)}).length===0),t&&s}function Lr(e){var t=ae(e)&&!rt(e),s=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"],r,i;for(r=0;r<a.length;r+=1)i=a[r],s=s||w(e,i);return t&&s}function Er(e,t){var s=e.diff(t,"days",!0);return s<-6?"sameElse":s<-1?"lastWeek":s<0?"lastDay":s<1?"sameDay":s<2?"nextDay":s<7?"nextWeek":"sameElse"}function Hr(e,t){arguments.length===1&&(arguments[0]?Cr(arguments[0])?(e=arguments[0],t=void 0):Lr(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var s=e||k(),a=Dt(s,this).startOf("day"),r=l.calendarFormat(this,a)||"sameElse",i=t&&(E(t[r])?t[r].call(this,s):t[r]);return this.format(i||this.localeData().calendar(r,this,k(s)))}function Ar(){return new De(this)}function Vr(e,t){var s=R(e)?e:k(e);return this.isValid()&&s.isValid()?(t=W(t)||"millisecond",t==="millisecond"?this.valueOf()>s.valueOf():s.valueOf()<this.clone().startOf(t).valueOf()):!1}function Gr(e,t){var s=R(e)?e:k(e);return this.isValid()&&s.isValid()?(t=W(t)||"millisecond",t==="millisecond"?this.valueOf()<s.valueOf():this.clone().endOf(t).valueOf()<s.valueOf()):!1}function jr(e,t,s,a){var r=R(e)?e:k(e),i=R(t)?t:k(t);return this.isValid()&&r.isValid()&&i.isValid()?(a=a||"()",(a[0]==="("?this.isAfter(r,s):!this.isBefore(r,s))&&(a[1]===")"?this.isBefore(i,s):!this.isAfter(i,s))):!1}function zr(e,t){var s=R(e)?e:k(e),a;return this.isValid()&&s.isValid()?(t=W(t)||"millisecond",t==="millisecond"?this.valueOf()===s.valueOf():(a=s.valueOf(),this.clone().startOf(t).valueOf()<=a&&a<=this.clone().endOf(t).valueOf())):!1}function Zr(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function $r(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function Br(e,t,s){var a,r,i;if(!this.isValid())return NaN;if(a=Dt(e,this),!a.isValid())return NaN;switch(r=(a.utcOffset()-this.utcOffset())*6e4,t=W(t),t){case"year":i=xe(this,a)/12;break;case"month":i=xe(this,a);break;case"quarter":i=xe(this,a)/3;break;case"second":i=(this-a)/1e3;break;case"minute":i=(this-a)/6e4;break;case"hour":i=(this-a)/36e5;break;case"day":i=(this-a-r)/864e5;break;case"week":i=(this-a-r)/6048e5;break;default:i=this-a}return s?i:x(i)}function xe(e,t){if(e.date()<t.date())return-xe(t,e);var s=(t.year()-e.year())*12+(t.month()-e.month()),a=e.clone().add(s,"months"),r,i;return t-a<0?(r=e.clone().add(s-1,"months"),i=(t-a)/(a-r)):(r=e.clone().add(s+1,"months"),i=(t-a)/(r-a)),-(s+i)||0}l.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";l.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";function qr(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function Jr(e){if(!this.isValid())return null;var t=e!==!0,s=t?this.clone().utc():this;return s.year()<0||s.year()>9999?Te(s,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):E(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+this.utcOffset()*60*1e3).toISOString().replace("Z",Te(s,"Z")):Te(s,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")}function Qr(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="",s,a,r,i;return this.isLocal()||(e=this.utcOffset()===0?"moment.utc":"moment.parseZone",t="Z"),s="["+e+'("]',a=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",r="-MM-DD[T]HH:mm:ss.SSS",i=t+'[")]',this.format(s+a+r+i)}function Xr(e){e||(e=this.isUtc()?l.defaultFormatUtc:l.defaultFormat);var t=Te(this,e);return this.localeData().postformat(t)}function Kr(e,t){return this.isValid()&&(R(e)&&e.isValid()||k(e).isValid())?C({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function ei(e){return this.from(k(),e)}function ti(e,t){return this.isValid()&&(R(e)&&e.isValid()||k(e).isValid())?C({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function si(e){return this.to(k(),e)}function ds(e){var t;return e===void 0?this._locale._abbr:(t=B(e),t!=null&&(this._locale=t),this)}var hs=P("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return e===void 0?this.localeData():this.locale(e)});function fs(){return this._locale}var Ne=1e3,ue=60*Ne,Fe=60*ue,cs=(365*400+97)*24*Fe;function de(e,t){return(e%t+t)%t}function ms(e,t,s){return e<100&&e>=0?new Date(e+400,t,s)-cs:new Date(e,t,s).valueOf()}function _s(e,t,s){return e<100&&e>=0?Date.UTC(e+400,t,s)-cs:Date.UTC(e,t,s)}function ai(e){var t,s;if(e=W(e),e===void 0||e==="millisecond"||!this.isValid())return this;switch(s=this._isUTC?_s:ms,e){case"year":t=s(this.year(),0,1);break;case"quarter":t=s(this.year(),this.month()-this.month()%3,1);break;case"month":t=s(this.year(),this.month(),1);break;case"week":t=s(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=s(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=s(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=de(t+(this._isUTC?0:this.utcOffset()*ue),Fe);break;case"minute":t=this._d.valueOf(),t-=de(t,ue);break;case"second":t=this._d.valueOf(),t-=de(t,Ne);break}return this._d.setTime(t),l.updateOffset(this,!0),this}function ri(e){var t,s;if(e=W(e),e===void 0||e==="millisecond"||!this.isValid())return this;switch(s=this._isUTC?_s:ms,e){case"year":t=s(this.year()+1,0,1)-1;break;case"quarter":t=s(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=s(this.year(),this.month()+1,1)-1;break;case"week":t=s(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=s(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=s(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=Fe-de(t+(this._isUTC?0:this.utcOffset()*ue),Fe)-1;break;case"minute":t=this._d.valueOf(),t+=ue-de(t,ue)-1;break;case"second":t=this._d.valueOf(),t+=Ne-de(t,Ne)-1;break}return this._d.setTime(t),l.updateOffset(this,!0),this}function ii(){return this._d.valueOf()-(this._offset||0)*6e4}function ni(){return Math.floor(this.valueOf()/1e3)}function oi(){return new Date(this.valueOf())}function li(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function ui(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function di(){return this.isValid()?this.toISOString():null}function hi(){return it(this)}function fi(){return Q({},c(this))}function ci(){return c(this).overflow}function mi(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}h("N",0,0,"eraAbbr");h("NN",0,0,"eraAbbr");h("NNN",0,0,"eraAbbr");h("NNNN",0,0,"eraName");h("NNNNN",0,0,"eraNarrow");h("y",["y",1],"yo","eraYear");h("y",["yy",2],0,"eraYear");h("y",["yyy",3],0,"eraYear");h("y",["yyyy",4],0,"eraYear");d("N",Mt);d("NN",Mt);d("NNN",Mt);d("NNNN",Yi);d("NNNNN",Oi);S(["N","NN","NNN","NNNN","NNNNN"],function(e,t,s,a){var r=s._locale.erasParse(e,a,s._strict);r?c(s).era=r:c(s).invalidEra=e});d("y",he);d("yy",he);d("yyy",he);d("yyyy",he);d("yo",Ti);S(["y","yy","yyy","yyyy"],Y);S(["yo"],function(e,t,s,a){var r;s._locale._eraYearOrdinalRegex&&(r=e.match(s._locale._eraYearOrdinalRegex)),s._locale.eraYearOrdinalParse?t[Y]=s._locale.eraYearOrdinalParse(e,r):t[Y]=parseInt(e,10)});function _i(e,t){var s,a,r,i=this._eras||B("en")._eras;for(s=0,a=i.length;s<a;++s){switch(typeof i[s].since){case"string":r=l(i[s].since).startOf("day"),i[s].since=r.valueOf();break}switch(typeof i[s].until){case"undefined":i[s].until=1/0;break;case"string":r=l(i[s].until).startOf("day").valueOf(),i[s].until=r.valueOf();break}}return i}function yi(e,t,s){var a,r,i=this.eras(),n,u,f;for(e=e.toUpperCase(),a=0,r=i.length;a<r;++a)if(n=i[a].name.toUpperCase(),u=i[a].abbr.toUpperCase(),f=i[a].narrow.toUpperCase(),s)switch(t){case"N":case"NN":case"NNN":if(u===e)return i[a];break;case"NNNN":if(n===e)return i[a];break;case"NNNNN":if(f===e)return i[a];break}else if([n,u,f].indexOf(e)>=0)return i[a]}function wi(e,t){var s=e.since<=e.until?1:-1;return t===void 0?l(e.since).year():l(e.since).year()+(t-e.offset)*s}function gi(){var e,t,s,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),a[e].since<=s&&s<=a[e].until||a[e].until<=s&&s<=a[e].since)return a[e].name;return""}function Si(){var e,t,s,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),a[e].since<=s&&s<=a[e].until||a[e].until<=s&&s<=a[e].since)return a[e].narrow;return""}function ki(){var e,t,s,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),a[e].since<=s&&s<=a[e].until||a[e].until<=s&&s<=a[e].since)return a[e].abbr;return""}function pi(){var e,t,s,a,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e)if(s=r[e].since<=r[e].until?1:-1,a=this.clone().startOf("day").valueOf(),r[e].since<=a&&a<=r[e].until||r[e].until<=a&&a<=r[e].since)return(this.year()-l(r[e].since).year())*s+r[e].offset;return this.year()}function Di(e){return w(this,"_erasNameRegex")||vt.call(this),e?this._erasNameRegex:this._erasRegex}function Mi(e){return w(this,"_erasAbbrRegex")||vt.call(this),e?this._erasAbbrRegex:this._erasRegex}function vi(e){return w(this,"_erasNarrowRegex")||vt.call(this),e?this._erasNarrowRegex:this._erasRegex}function Mt(e,t){return t.erasAbbrRegex(e)}function Yi(e,t){return t.erasNameRegex(e)}function Oi(e,t){return t.erasNarrowRegex(e)}function Ti(e,t){return t._eraYearOrdinalRegex||he}function vt(){var e=[],t=[],s=[],a=[],r,i,n,u,f,_=this.eras();for(r=0,i=_.length;r<i;++r)n=z(_[r].name),u=z(_[r].abbr),f=z(_[r].narrow),t.push(n),e.push(u),s.push(f),a.push(n),a.push(u),a.push(f);this._erasRegex=new RegExp("^("+a.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+t.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+e.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+s.join("|")+")","i")}h(0,["gg",2],0,function(){return this.weekYear()%100});h(0,["GG",2],0,function(){return this.isoWeekYear()%100});function je(e,t){h(0,[e,e.length],0,t)}je("gggg","weekYear");je("ggggg","weekYear");je("GGGG","isoWeekYear");je("GGGGG","isoWeekYear");d("G",Ee);d("g",Ee);d("GG",p,b);d("gg",p,b);d("GGGG",ht,dt);d("gggg",ht,dt);d("GGGGG",Le,Ue);d("ggggg",Le,Ue);ve(["gggg","ggggg","GGGG","GGGGG"],function(e,t,s,a){t[a.substr(0,2)]=m(e)});ve(["gg","GG"],function(e,t,s,a){t[a]=l.parseTwoDigitYear(e)});function bi(e){return ys.call(this,e,this.week(),this.weekday()+this.localeData()._week.dow,this.localeData()._week.dow,this.localeData()._week.doy)}function xi(e){return ys.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Pi(){return Z(this.year(),1,4)}function Wi(){return Z(this.isoWeekYear(),1,4)}function Ni(){var e=this.localeData()._week;return Z(this.year(),e.dow,e.doy)}function Fi(){var e=this.localeData()._week;return Z(this.weekYear(),e.dow,e.doy)}function ys(e,t,s,a,r){var i;return e==null?Se(this,a,r).year:(i=Z(e,a,r),t>i&&(t=i),Ri.call(this,e,t,s,a,r))}function Ri(e,t,s,a,r){var i=qt(e,t,s,a,r),n=ge(i.year,0,i.dayOfYear);return this.year(n.getUTCFullYear()),this.month(n.getUTCMonth()),this.date(n.getUTCDate()),this}h("Q",0,"Qo","quarter");d("Q",Lt);S("Q",function(e,t){t[G]=(m(e)-1)*3});function Ci(e){return e==null?Math.ceil((this.month()+1)/3):this.month((e-1)*3+this.month()%3)}h("D",["DD",2],"Do","date");d("D",p,fe);d("DD",p,b);d("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient});S(["D","DD"],U);S("Do",function(e,t){t[U]=m(e.match(p)[0])});var ws=ce("Date",!0);h("DDD",["DDDD",3],"DDDo","dayOfYear");d("DDD",Ie);d("DDDD",Et);S(["DDD","DDDD"],function(e,t,s){s._dayOfYear=m(e)});function Ui(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return e==null?t:this.add(e-t,"d")}h("m",["mm",2],0,"minute");d("m",p,ft);d("mm",p,b);S(["m","mm"],N);var Ii=ce("Minutes",!1);h("s",["ss",2],0,"second");d("s",p,ft);d("ss",p,b);S(["s","ss"],j);var Li=ce("Seconds",!1);h("S",0,0,function(){return~~(this.millisecond()/100)});h(0,["SS",2],0,function(){return~~(this.millisecond()/10)});h(0,["SSS",3],0,"millisecond");h(0,["SSSS",4],0,function(){return this.millisecond()*10});h(0,["SSSSS",5],0,function(){return this.millisecond()*100});h(0,["SSSSSS",6],0,function(){return this.millisecond()*1e3});h(0,["SSSSSSS",7],0,function(){return this.millisecond()*1e4});h(0,["SSSSSSSS",8],0,function(){return this.millisecond()*1e5});h(0,["SSSSSSSSS",9],0,function(){return this.millisecond()*1e6});d("S",Ie,Lt);d("SS",Ie,b);d("SSS",Ie,Et);var X,gs;for(X="SSSS";X.length<=9;X+="S")d(X,he);function Ei(e,t){t[se]=m(("0."+e)*1e3)}for(X="S";X.length<=9;X+="S")S(X,Ei);gs=ce("Milliseconds",!1);h("z",0,0,"zoneAbbr");h("zz",0,0,"zoneName");function Hi(){return this._isUTC?"UTC":""}function Ai(){return this._isUTC?"Coordinated Universal Time":""}var o=De.prototype;o.add=Fr;o.calendar=Hr;o.clone=Ar;o.diff=Br;o.endOf=ri;o.format=Xr;o.from=Kr;o.fromNow=ei;o.to=ti;o.toNow=si;o.get=Qs;o.invalidAt=ci;o.isAfter=Vr;o.isBefore=Gr;o.isBetween=jr;o.isSame=zr;o.isSameOrAfter=Zr;o.isSameOrBefore=$r;o.isValid=hi;o.lang=hs;o.locale=ds;o.localeData=fs;o.max=hr;o.min=dr;o.parsingFlags=fi;o.set=Xs;o.startOf=ai;o.subtract=Rr;o.toArray=li;o.toObject=ui;o.toDate=oi;o.toISOString=Jr;o.inspect=Qr;typeof Symbol<"u"&&Symbol.for!=null&&(o[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"});o.toJSON=di;o.toString=qr;o.unix=ni;o.valueOf=ii;o.creationData=mi;o.eraName=gi;o.eraNarrow=Si;o.eraAbbr=ki;o.eraYear=pi;o.year=Vt;o.isLeapYear=Js;o.weekYear=bi;o.isoWeekYear=xi;o.quarter=o.quarters=Ci;o.month=$t;o.daysInMonth=oa;o.week=o.weeks=_a;o.isoWeek=o.isoWeeks=ya;o.weeksInYear=Ni;o.weeksInWeekYear=Fi;o.isoWeeksInYear=Pi;o.isoWeeksInISOWeekYear=Wi;o.date=ws;o.day=o.days=xa;o.weekday=Pa;o.isoWeekday=Wa;o.dayOfYear=Ui;o.hour=o.hours=La;o.minute=o.minutes=Ii;o.second=o.seconds=Li;o.millisecond=o.milliseconds=gs;o.utcOffset=kr;o.utc=Dr;o.local=Mr;o.parseZone=vr;o.hasAlignedHourOffset=Yr;o.isDST=Or;o.isLocal=br;o.isUtcOffset=xr;o.isUtc=ns;o.isUTC=ns;o.zoneAbbr=Hi;o.zoneName=Ai;o.dates=P("dates accessor is deprecated. Use date instead.",ws);o.months=P("months accessor is deprecated. Use month instead",$t);o.years=P("years accessor is deprecated. Use year instead",Vt);o.zone=P("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",pr);o.isDSTShifted=P("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Tr);function Vi(e){return k(e*1e3)}function Gi(){return k.apply(null,arguments).parseZone()}function Ss(e){return e}var g=ot.prototype;g.calendar=bs;g.longDateFormat=Ns;g.invalidDate=Rs;g.ordinal=Is;g.preparse=Ss;g.postformat=Ss;g.relativeTime=Es;g.pastFuture=Hs;g.set=Os;g.eras=_i;g.erasParse=yi;g.erasConvertYear=wi;g.erasAbbrRegex=Mi;g.erasNameRegex=Di;g.erasNarrowRegex=vi;g.months=aa;g.monthsShort=ra;g.monthsParse=na;g.monthsRegex=ua;g.monthsShortRegex=la;g.week=ha;g.firstDayOfYear=ma;g.firstDayOfWeek=ca;g.weekdays=va;g.weekdaysMin=Oa;g.weekdaysShort=Ya;g.weekdaysParse=ba;g.weekdaysRegex=Na;g.weekdaysShortRegex=Fa;g.weekdaysMinRegex=Ra;g.isPM=Ua;g.meridiem=Ea;function Re(e,t,s,a){var r=B(),i=L().set(a,t);return r[s](i,e)}function ks(e,t,s){if($(e)&&(t=e,e=void 0),e=e||"",t!=null)return Re(e,t,s,"month");var a,r=[];for(a=0;a<12;a++)r[a]=Re(e,a,s,"month");return r}function Yt(e,t,s,a){typeof e=="boolean"?($(t)&&(s=t,t=void 0),t=t||""):(t=e,s=t,e=!1,$(t)&&(s=t,t=void 0),t=t||"");var r=B(),i=e?r._week.dow:0,n,u=[];if(s!=null)return Re(t,(s+i)%7,a,"day");for(n=0;n<7;n++)u[n]=Re(t,(n+i)%7,a,"day");return u}function ji(e,t){return ks(e,t,"months")}function zi(e,t){return ks(e,t,"monthsShort")}function Zi(e,t,s){return Yt(e,t,s,"weekdays")}function $i(e,t,s){return Yt(e,t,s,"weekdaysShort")}function Bi(e,t,s){return Yt(e,t,s,"weekdaysMin")}K("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,s=m(e%100/10)===1?"th":t===1?"st":t===2?"nd":t===3?"rd":"th";return e+s}});l.lang=P("moment.lang is deprecated. Use moment.locale instead.",K);l.langData=P("moment.langData is deprecated. Use moment.localeData instead.",B);var A=Math.abs;function qi(){var e=this._data;return this._milliseconds=A(this._milliseconds),this._days=A(this._days),this._months=A(this._months),e.milliseconds=A(e.milliseconds),e.seconds=A(e.seconds),e.minutes=A(e.minutes),e.hours=A(e.hours),e.months=A(e.months),e.years=A(e.years),this}function ps(e,t,s,a){var r=C(t,s);return e._milliseconds+=a*r._milliseconds,e._days+=a*r._days,e._months+=a*r._months,e._bubble()}function Ji(e,t){return ps(this,e,t,1)}function Qi(e,t){return ps(this,e,t,-1)}function Wt(e){return e<0?Math.floor(e):Math.ceil(e)}function Xi(){var e=this._milliseconds,t=this._days,s=this._months,a=this._data,r,i,n,u,f;return e>=0&&t>=0&&s>=0||e<=0&&t<=0&&s<=0||(e+=Wt(at(s)+t)*864e5,t=0,s=0),a.milliseconds=e%1e3,r=x(e/1e3),a.seconds=r%60,i=x(r/60),a.minutes=i%60,n=x(i/60),a.hours=n%24,t+=x(n/24),f=x(Ds(t)),s+=f,t-=Wt(at(f)),u=x(s/12),s%=12,a.days=t,a.months=s,a.years=u,this}function Ds(e){return e*4800/146097}function at(e){return e*146097/4800}function Ki(e){if(!this.isValid())return NaN;var t,s,a=this._milliseconds;if(e=W(e),e==="month"||e==="quarter"||e==="year")switch(t=this._days+a/864e5,s=this._months+Ds(t),e){case"month":return s;case"quarter":return s/3;case"year":return s/12}else switch(t=this._days+Math.round(at(this._months)),e){case"week":return t/7+a/6048e5;case"day":return t+a/864e5;case"hour":return t*24+a/36e5;case"minute":return t*1440+a/6e4;case"second":return t*86400+a/1e3;case"millisecond":return Math.floor(t*864e5)+a;default:throw new Error("Unknown unit "+e)}}function q(e){return function(){return this.as(e)}}var Ms=q("ms"),en=q("s"),tn=q("m"),sn=q("h"),an=q("d"),rn=q("w"),nn=q("M"),on=q("Q"),ln=q("y"),un=Ms;function dn(){return C(this)}function hn(e){return e=W(e),this.isValid()?this[e+"s"]():NaN}function re(e){return function(){return this.isValid()?this._data[e]:NaN}}var fn=re("milliseconds"),cn=re("seconds"),mn=re("minutes"),_n=re("hours"),yn=re("days"),wn=re("months"),gn=re("years");function Sn(){return x(this.days()/7)}var V=Math.round,oe={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function kn(e,t,s,a,r){return r.relativeTime(t||1,!!s,e,a)}function pn(e,t,s,a){var r=C(e).abs(),i=V(r.as("s")),n=V(r.as("m")),u=V(r.as("h")),f=V(r.as("d")),_=V(r.as("M")),O=V(r.as("w")),H=V(r.as("y")),J=i<=s.ss&&["s",i]||i<s.s&&["ss",i]||n<=1&&["m"]||n<s.m&&["mm",n]||u<=1&&["h"]||u<s.h&&["hh",u]||f<=1&&["d"]||f<s.d&&["dd",f];return s.w!=null&&(J=J||O<=1&&["w"]||O<s.w&&["ww",O]),J=J||_<=1&&["M"]||_<s.M&&["MM",_]||H<=1&&["y"]||["yy",H],J[2]=t,J[3]=+e>0,J[4]=a,kn.apply(null,J)}function Dn(e){return e===void 0?V:typeof e=="function"?(V=e,!0):!1}function Mn(e,t){return oe[e]===void 0?!1:t===void 0?oe[e]:(oe[e]=t,e==="s"&&(oe.ss=t-1),!0)}function vn(e,t){if(!this.isValid())return this.localeData().invalidDate();var s=!1,a=oe,r,i;return typeof e=="object"&&(t=e,e=!1),typeof e=="boolean"&&(s=e),typeof t=="object"&&(a=Object.assign({},oe,t),t.s!=null&&t.ss==null&&(a.ss=t.s-1)),r=this.localeData(),i=pn(this,!s,a,r),s&&(i=r.pastFuture(+this,i)),r.postformat(i)}var qe=Math.abs;function ie(e){return(e>0)-(e<0)||+e}function ze(){if(!this.isValid())return this.localeData().invalidDate();var e=qe(this._milliseconds)/1e3,t=qe(this._days),s=qe(this._months),a,r,i,n,u=this.asSeconds(),f,_,O,H;return u?(a=x(e/60),r=x(a/60),e%=60,a%=60,i=x(s/12),s%=12,n=e?e.toFixed(3).replace(/\.?0+$/,""):"",f=u<0?"-":"",_=ie(this._months)!==ie(u)?"-":"",O=ie(this._days)!==ie(u)?"-":"",H=ie(this._milliseconds)!==ie(u)?"-":"",f+"P"+(i?_+i+"Y":"")+(s?_+s+"M":"")+(t?O+t+"D":"")+(r||a||e?"T":"")+(r?H+r+"H":"")+(a?H+a+"M":"")+(e?H+n+"S":"")):"P0D"}var y=Ge.prototype;y.isValid=yr;y.abs=qi;y.add=Ji;y.subtract=Qi;y.as=Ki;y.asMilliseconds=Ms;y.asSeconds=en;y.asMinutes=tn;y.asHours=sn;y.asDays=an;y.asWeeks=rn;y.asMonths=nn;y.asQuarters=on;y.asYears=ln;y.valueOf=un;y._bubble=Xi;y.clone=dn;y.get=hn;y.milliseconds=fn;y.seconds=cn;y.minutes=mn;y.hours=_n;y.days=yn;y.weeks=Sn;y.months=wn;y.years=gn;y.humanize=vn;y.toISOString=ze;y.toString=ze;y.toJSON=ze;y.locale=ds;y.localeData=fs;y.toIsoString=P("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ze);y.lang=hs;h("X",0,0,"unix");h("x",0,0,"valueOf");d("x",Ee);d("X",js);S("X",function(e,t,s){s._d=new Date(parseFloat(e)*1e3)});S("x",function(e,t,s){s._d=new Date(m(e))});//! moment.js
l.version="2.30.1";vs(k);l.fn=o;l.min=fr;l.max=cr;l.now=mr;l.utc=L;l.unix=Vi;l.months=ji;l.isDate=pe;l.locale=K;l.invalid=Ce;l.duration=C;l.isMoment=R;l.weekdays=Zi;l.parseZone=Gi;l.localeData=B;l.isDuration=be;l.monthsShort=zi;l.weekdaysMin=Bi;l.defineLocale=wt;l.updateLocale=Ga;l.locales=ja;l.weekdaysShort=$i;l.normalizeUnits=W;l.relativeTimeRounding=Dn;l.relativeTimeThreshold=Mn;l.calendarFormat=Er;l.prototype=o;l.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"};class Je{dayCounts={};todayWordCount={}}class Yn{filePath="";file;today;currentWordCount;app;data;plugin;constructor(t,s,a){this.filePath=t,this.app=s,this.plugin=a,this.data=new Je}async loadStatisticsData(){if(console.info("loadStatisticsData, dataFile is "+this.filePath),this.filePath==null||this.filePath=="")this.data=Object.assign(new Je,await this.plugin.loadData()),this.removeProperties(this.data,new Nt);else{for(let t=0;t<3;t++){if(this.file=this.app.vault.getFileByPath(this.filePath),this.file!=null){console.info("dataFile ready");break}console.info("waiting for dataFile…… "),await new Promise(s=>setTimeout(s,3e3))}this.file=this.app.vault.getFileByPath(this.filePath),this.file==null&&(console.info("create dataFile "+this.filePath),this.file=await this.app.vault.create(this.filePath,JSON.stringify(new Je))),this.data=JSON.parse(await this.app.vault.read(this.file))}this.updateDate(),Object.prototype.hasOwnProperty.call(this.data.dayCounts,this.today)?this.updateCounts():this.currentWordCount=0}removeProperties(t,s){Object.keys(s).forEach(r=>{Object.prototype.hasOwnProperty.call(t,r)&&delete t[r]})}async saveStatisticsData(){try{if(this.updateDate(),this.filePath!=null&&this.filePath!="")this.file==null&&(this.file=await this.app.vault.create(this.filePath,JSON.stringify(this.data))),await this.app.vault.modify(this.file,JSON.stringify(this.data));else{let t=await this.plugin.loadData();t==null&&(t={}),Object.assign(t,this.data),await this.plugin.saveData(t)}}catch(t){console.error("保存统计数据出错：",t)}}getWordCount(t){return t.length}updateWordCount(t,s){const a=this.getWordCount(t);Object.prototype.hasOwnProperty.call(this.data.dayCounts,this.today)?Object.prototype.hasOwnProperty.call(this.data.todayWordCount,s)?this.data.todayWordCount[s].current=a:this.data.todayWordCount[s]={initial:a,current:a}:(this.data.todayWordCount={},this.data.todayWordCount[s]={initial:a,current:a}),this.updateCounts(),this.saveStatisticsData().then(r=>{console.info("saveStatisticsData, save data")})}updateDate(){this.today=l().format("YYYY-MM-DD")}updateCounts(){this.currentWordCount=Object.values(this.data.todayWordCount).map(t=>Math.max(0,t.current-t.initial)).reduce((t,s)=>t+s,0),this.data.dayCounts[this.today]=this.currentWordCount}}class On extends te.PluginSettingTab{plugin;constructor(t,s){super(t,s),this.plugin=s}display(){const{containerEl:t}=this;t.empty(),new te.Setting(t).setName("设置统计数据保存地址").setDesc(`设置每日统计数据保存地址，如果为空，则保存在默认的插件目录下。建议使用 .json 的数据格式。
修改该配置后，需要重新加载插件。`).addText(s=>s.setValue(this.plugin.settings.dataFile).onChange(async a=>{this.plugin.settings.dataFile=a,await this.plugin.saveSettings()})),new te.Setting(t).setName("统计目录").setDesc("设置需要统计数据的目录，如果为空，则统计全库的数据。").addText(s=>s.setPlaceholder("全部").setValue(this.plugin.settings.statisticsFolder).onChange(async a=>{this.plugin.settings.statisticsFolder=a,await this.plugin.saveSettings()})),new te.Setting(t).setName("每日目标").setDesc(`设置每日目标。
修改该配置后，需要重新加载插件。`).addText(s=>s.setPlaceholder("1000").setValue(this.plugin.settings.dailyTargetWordCount.toString()).onChange(async a=>{try{this.plugin.settings.dailyTargetWordCount=parseInt(a)}catch(r){console.error("设置每日目标，数据不为数字",r)}await this.plugin.saveSettings()}))}}class Tn extends te.Plugin{settings;statisticsDataManager;debouncedUpdate;statusBarItemEl;async onload(){await this.loadSettings(),new Promise(t=>setTimeout(t,6*1e3)),this.statisticsDataManager=new Yn(this.settings.dataFile,this.app,this),this.statisticsDataManager.loadStatisticsData().then(t=>{console.info("loadStatisticsData success. ")}),this.debouncedUpdate=te.debounce((t,s)=>{this.settings.statisticsFolder!=null&&this.settings.statisticsFolder!=""&&this.settings.statisticsFolder!="/"&&!s.match(this.settings.statisticsFolder)||this.statisticsDataManager.updateWordCount(t,s)},400,!1),this.statusBarItemEl=this.addStatusBarItem(),this.registerInterval(window.setInterval(()=>{this.statusBarItemEl.setText(this.statisticsDataManager.currentWordCount+" words today ")},1e3)),this.registerEvent(this.app.workspace.on("quick-preview",this.onQuickPreview.bind(this))),this.addSettingTab(new On(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},new Nt,await this.loadData())}async saveSettings(){const t=await this.loadData();Object.assign(t,this.settings),await this.saveData(t)}onQuickPreview(t,s){this.app.workspace.getActiveViewOfType(te.MarkdownView)&&this.debouncedUpdate(s,t.path)}}exports.default=Tn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
