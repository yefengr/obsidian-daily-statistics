"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const yt=require("obsidian");/**
* @vue/shared v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function $e(e,t){const n=new Set(e.split(","));return t?o=>n.has(o.toLowerCase()):o=>n.has(o)}const U=process.env.NODE_ENV!=="production"?Object.freeze({}):{},Nt=process.env.NODE_ENV!=="production"?Object.freeze([]):[],Y=()=>{},qi=()=>!1,Jt=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),vn=e=>e.startsWith("onUpdate:"),G=Object.assign,_o=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},Ji=Object.prototype.hasOwnProperty,A=(e,t)=>Ji.call(e,t),V=Array.isArray,it=e=>Yt(e)==="[object Map]",Vt=e=>Yt(e)==="[object Set]",Jo=e=>Yt(e)==="[object Date]",T=e=>typeof e=="function",q=e=>typeof e=="string",qe=e=>typeof e=="symbol",k=e=>e!==null&&typeof e=="object",vo=e=>(k(e)||T(e))&&T(e.then)&&T(e.catch),Fs=Object.prototype.toString,Yt=e=>Fs.call(e),Eo=e=>Yt(e).slice(8,-1),js=e=>Yt(e)==="[object Object]",bo=e=>q(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Ft=$e(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),Yi=$e("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),Dn=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},zi=/-(\w)/g,wt=Dn(e=>e.replace(zi,(t,n)=>n?n.toUpperCase():"")),Xi=/\B([A-Z])/g,Je=Dn(e=>e.replace(Xi,"-$1").toLowerCase()),Vn=Dn(e=>e.charAt(0).toUpperCase()+e.slice(1)),ot=Dn(e=>e?`on${Vn(e)}`:""),Ye=(e,t)=>!Object.is(e,t),vt=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},En=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},Ut=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let Yo;const yo=()=>Yo||(Yo=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function No(e){if(V(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],s=q(o)?tr(o):No(o);if(s)for(const i in s)t[i]=s[i]}return t}else if(q(e)||k(e))return e}const Qi=/;(?![^(]*\))/g,Zi=/:([^]+)/,er=/\/\*[^]*?\*\//g;function tr(e){const t={};return e.replace(er,"").split(Qi).forEach(n=>{if(n){const o=n.split(Zi);o.length>1&&(t[o[0].trim()]=o[1].trim())}}),t}function xt(e){let t="";if(q(e))t=e;else if(V(e))for(let n=0;n<e.length;n++){const o=xt(e[n]);o&&(t+=o+" ")}else if(k(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}const nr="html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot",or="svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view",sr="annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics",ir=$e(nr),rr=$e(or),lr=$e(sr),cr="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",ur=$e(cr);function Ls(e){return!!e||e===""}function ar(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=zt(e[o],t[o]);return n}function zt(e,t){if(e===t)return!0;let n=Jo(e),o=Jo(t);if(n||o)return n&&o?e.getTime()===t.getTime():!1;if(n=qe(e),o=qe(t),n||o)return e===t;if(n=V(e),o=V(t),n||o)return n&&o?ar(e,t):!1;if(n=k(e),o=k(t),n||o){if(!n||!o)return!1;const s=Object.keys(e).length,i=Object.keys(t).length;if(s!==i)return!1;for(const r in e){const c=e.hasOwnProperty(r),a=t.hasOwnProperty(r);if(c&&!a||!c&&a||!zt(e[r],t[r]))return!1}}return String(e)===String(t)}function Oo(e,t){return e.findIndex(n=>zt(n,t))}const fr=e=>q(e)?e:e==null?"":V(e)||k(e)&&(e.toString===Fs||!T(e.toString))?JSON.stringify(e,ks,2):String(e),ks=(e,t)=>t&&t.__v_isRef?ks(e,t.value):it(t)?{[`Map(${t.size})`]:[...t.entries()].reduce((n,[o,s],i)=>(n[Kn(o,i)+" =>"]=s,n),{})}:Vt(t)?{[`Set(${t.size})`]:[...t.values()].map(n=>Kn(n))}:qe(t)?Kn(t):k(t)&&!V(t)&&!js(t)?String(t):t,Kn=(e,t="")=>{var n;return qe(e)?`Symbol(${(n=e.description)!=null?n:t})`:e};/**
* @vue/reactivity v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function ze(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let ge;class dr{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=ge,!t&&ge&&(this.index=(ge.scopes||(ge.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const n=ge;try{return ge=this,t()}finally{ge=n}}else process.env.NODE_ENV!=="production"&&ze("cannot run an inactive effect scope.")}on(){ge=this}off(){ge=this.parent}stop(t){if(this._active){let n,o;for(n=0,o=this.effects.length;n<o;n++)this.effects[n].stop();for(n=0,o=this.cleanups.length;n<o;n++)this.cleanups[n]();if(this.scopes)for(n=0,o=this.scopes.length;n<o;n++)this.scopes[n].stop(!0);if(!this.detached&&this.parent&&!t){const s=this.parent.scopes.pop();s&&s!==this&&(this.parent.scopes[this.index]=s,s.index=this.index)}this.parent=void 0,this._active=!1}}}function pr(e,t=ge){t&&t.active&&t.effects.push(e)}function hr(){return ge}let rt;class wo{constructor(t,n,o,s){this.fn=t,this.trigger=n,this.scheduler=o,this.active=!0,this.deps=[],this._dirtyLevel=4,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,pr(this,s)}get dirty(){if(this._dirtyLevel===2||this._dirtyLevel===3){this._dirtyLevel=1,Ze();for(let t=0;t<this._depsLength;t++){const n=this.deps[t];if(n.computed&&(gr(n.computed),this._dirtyLevel>=4))break}this._dirtyLevel===1&&(this._dirtyLevel=0),et()}return this._dirtyLevel>=4}set dirty(t){this._dirtyLevel=t?4:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let t=Ke,n=rt;try{return Ke=!0,rt=this,this._runnings++,zo(this),this.fn()}finally{Xo(this),this._runnings--,rt=n,Ke=t}}stop(){var t;this.active&&(zo(this),Xo(this),(t=this.onStop)==null||t.call(this),this.active=!1)}}function gr(e){return e.value}function zo(e){e._trackId++,e._depsLength=0}function Xo(e){if(e.deps.length>e._depsLength){for(let t=e._depsLength;t<e.deps.length;t++)Hs(e.deps[t],e);e.deps.length=e._depsLength}}function Hs(e,t){const n=e.get(t);n!==void 0&&t._trackId!==n&&(e.delete(t),e.size===0&&e.cleanup())}let Ke=!0,Qn=0;const Us=[];function Ze(){Us.push(Ke),Ke=!1}function et(){const e=Us.pop();Ke=e===void 0?!0:e}function xo(){Qn++}function Do(){for(Qn--;!Qn&&Zn.length;)Zn.shift()()}function Bs(e,t,n){var o;if(t.get(e)!==e._trackId){t.set(e,e._trackId);const s=e.deps[e._depsLength];s!==t?(s&&Hs(s,e),e.deps[e._depsLength++]=t):e._depsLength++,process.env.NODE_ENV!=="production"&&((o=e.onTrack)==null||o.call(e,G({effect:e},n)))}}const Zn=[];function Ks(e,t,n){var o;xo();for(const s of e.keys()){let i;s._dirtyLevel<t&&(i??(i=e.get(s)===s._trackId))&&(s._shouldSchedule||(s._shouldSchedule=s._dirtyLevel===0),s._dirtyLevel=t),s._shouldSchedule&&(i??(i=e.get(s)===s._trackId))&&(process.env.NODE_ENV!=="production"&&((o=s.onTrigger)==null||o.call(s,G({effect:s},n))),s.trigger(),(!s._runnings||s.allowRecurse)&&s._dirtyLevel!==2&&(s._shouldSchedule=!1,s.scheduler&&Zn.push(s.scheduler)))}Do()}const Ws=(e,t)=>{const n=new Map;return n.cleanup=e,n.computed=t,n},eo=new WeakMap,lt=Symbol(process.env.NODE_ENV!=="production"?"iterate":""),to=Symbol(process.env.NODE_ENV!=="production"?"Map key iterate":"");function ee(e,t,n){if(Ke&&rt){let o=eo.get(e);o||eo.set(e,o=new Map);let s=o.get(n);s||o.set(n,s=Ws(()=>o.delete(n))),Bs(rt,s,process.env.NODE_ENV!=="production"?{target:e,type:t,key:n}:void 0)}}function xe(e,t,n,o,s,i){const r=eo.get(e);if(!r)return;let c=[];if(t==="clear")c=[...r.values()];else if(n==="length"&&V(e)){const a=Number(o);r.forEach((f,h)=>{(h==="length"||!qe(h)&&h>=a)&&c.push(f)})}else switch(n!==void 0&&c.push(r.get(n)),t){case"add":V(e)?bo(n)&&c.push(r.get("length")):(c.push(r.get(lt)),it(e)&&c.push(r.get(to)));break;case"delete":V(e)||(c.push(r.get(lt)),it(e)&&c.push(r.get(to)));break;case"set":it(e)&&c.push(r.get(lt));break}xo();for(const a of c)a&&Ks(a,4,process.env.NODE_ENV!=="production"?{target:e,type:t,key:n,newValue:o,oldValue:s,oldTarget:i}:void 0);Do()}const mr=$e("__proto__,__v_isRef,__isVue"),Gs=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(qe)),Qo=_r();function _r(){const e={};return["includes","indexOf","lastIndexOf"].forEach(t=>{e[t]=function(...n){const o=I(this);for(let i=0,r=this.length;i<r;i++)ee(o,"get",i+"");const s=o[t](...n);return s===-1||s===!1?o[t](...n.map(I)):s}}),["push","pop","shift","unshift","splice"].forEach(t=>{e[t]=function(...n){Ze(),xo();const o=I(this)[t].apply(this,n);return Do(),et(),o}}),e}function vr(e){const t=I(this);return ee(t,"has",e),t.hasOwnProperty(e)}class qs{constructor(t=!1,n=!1){this._isReadonly=t,this._isShallow=n}get(t,n,o){const s=this._isReadonly,i=this._isShallow;if(n==="__v_isReactive")return!s;if(n==="__v_isReadonly")return s;if(n==="__v_isShallow")return i;if(n==="__v_raw")return o===(s?i?ei:Zs:i?Qs:Xs).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(o)?t:void 0;const r=V(t);if(!s){if(r&&A(Qo,n))return Reflect.get(Qo,n,o);if(n==="hasOwnProperty")return vr}const c=Reflect.get(t,n,o);return(qe(n)?Gs.has(n):mr(n))||(s||ee(t,"get",n),i)?c:te(c)?r&&bo(n)?c:c.value:k(c)?s?ti(c):Co(c):c}}class Js extends qs{constructor(t=!1){super(!1,t)}set(t,n,o,s){let i=t[n];if(!this._isShallow){const a=Xe(i);if(!ut(o)&&!Xe(o)&&(i=I(i),o=I(o)),!V(t)&&te(i)&&!te(o))return a?!1:(i.value=o,!0)}const r=V(t)&&bo(n)?Number(n)<t.length:A(t,n),c=Reflect.set(t,n,o,s);return t===I(s)&&(r?Ye(o,i)&&xe(t,"set",n,o,i):xe(t,"add",n,o)),c}deleteProperty(t,n){const o=A(t,n),s=t[n],i=Reflect.deleteProperty(t,n);return i&&o&&xe(t,"delete",n,void 0,s),i}has(t,n){const o=Reflect.has(t,n);return(!qe(n)||!Gs.has(n))&&ee(t,"has",n),o}ownKeys(t){return ee(t,"iterate",V(t)?"length":lt),Reflect.ownKeys(t)}}class Ys extends qs{constructor(t=!1){super(!0,t)}set(t,n){return process.env.NODE_ENV!=="production"&&ze(`Set operation on key "${String(n)}" failed: target is readonly.`,t),!0}deleteProperty(t,n){return process.env.NODE_ENV!=="production"&&ze(`Delete operation on key "${String(n)}" failed: target is readonly.`,t),!0}}const Er=new Js,br=new Ys,yr=new Js(!0),Nr=new Ys(!0),Vo=e=>e,Cn=e=>Reflect.getPrototypeOf(e);function on(e,t,n=!1,o=!1){e=e.__v_raw;const s=I(e),i=I(t);n||(Ye(t,i)&&ee(s,"get",t),ee(s,"get",i));const{has:r}=Cn(s),c=o?Vo:n?So:Bt;if(r.call(s,t))return c(e.get(t));if(r.call(s,i))return c(e.get(i));e!==s&&e.get(t)}function sn(e,t=!1){const n=this.__v_raw,o=I(n),s=I(e);return t||(Ye(e,s)&&ee(o,"has",e),ee(o,"has",s)),e===s?n.has(e):n.has(e)||n.has(s)}function rn(e,t=!1){return e=e.__v_raw,!t&&ee(I(e),"iterate",lt),Reflect.get(e,"size",e)}function Zo(e){e=I(e);const t=I(this);return Cn(t).has.call(t,e)||(t.add(e),xe(t,"add",e,e)),this}function es(e,t){t=I(t);const n=I(this),{has:o,get:s}=Cn(n);let i=o.call(n,e);i?process.env.NODE_ENV!=="production"&&zs(n,o,e):(e=I(e),i=o.call(n,e));const r=s.call(n,e);return n.set(e,t),i?Ye(t,r)&&xe(n,"set",e,t,r):xe(n,"add",e,t),this}function ts(e){const t=I(this),{has:n,get:o}=Cn(t);let s=n.call(t,e);s?process.env.NODE_ENV!=="production"&&zs(t,n,e):(e=I(e),s=n.call(t,e));const i=o?o.call(t,e):void 0,r=t.delete(e);return s&&xe(t,"delete",e,void 0,i),r}function ns(){const e=I(this),t=e.size!==0,n=process.env.NODE_ENV!=="production"?it(e)?new Map(e):new Set(e):void 0,o=e.clear();return t&&xe(e,"clear",void 0,void 0,n),o}function ln(e,t){return function(o,s){const i=this,r=i.__v_raw,c=I(r),a=t?Vo:e?So:Bt;return!e&&ee(c,"iterate",lt),r.forEach((f,h)=>o.call(s,a(f),a(h),i))}}function cn(e,t,n){return function(...o){const s=this.__v_raw,i=I(s),r=it(i),c=e==="entries"||e===Symbol.iterator&&r,a=e==="keys"&&r,f=s[e](...o),h=n?Vo:t?So:Bt;return!t&&ee(i,"iterate",a?to:lt),{next(){const{value:d,done:E}=f.next();return E?{value:d,done:E}:{value:c?[h(d[0]),h(d[1])]:h(d),done:E}},[Symbol.iterator](){return this}}}}function je(e){return function(...t){if(process.env.NODE_ENV!=="production"){const n=t[0]?`on key "${t[0]}" `:"";ze(`${Vn(e)} operation ${n}failed: target is readonly.`,I(this))}return e==="delete"?!1:e==="clear"?void 0:this}}function Or(){const e={get(i){return on(this,i)},get size(){return rn(this)},has:sn,add:Zo,set:es,delete:ts,clear:ns,forEach:ln(!1,!1)},t={get(i){return on(this,i,!1,!0)},get size(){return rn(this)},has:sn,add:Zo,set:es,delete:ts,clear:ns,forEach:ln(!1,!0)},n={get(i){return on(this,i,!0)},get size(){return rn(this,!0)},has(i){return sn.call(this,i,!0)},add:je("add"),set:je("set"),delete:je("delete"),clear:je("clear"),forEach:ln(!0,!1)},o={get(i){return on(this,i,!0,!0)},get size(){return rn(this,!0)},has(i){return sn.call(this,i,!0)},add:je("add"),set:je("set"),delete:je("delete"),clear:je("clear"),forEach:ln(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(i=>{e[i]=cn(i,!1,!1),n[i]=cn(i,!0,!1),t[i]=cn(i,!1,!0),o[i]=cn(i,!0,!0)}),[e,n,t,o]}const[wr,xr,Dr,Vr]=Or();function Sn(e,t){const n=t?e?Vr:Dr:e?xr:wr;return(o,s,i)=>s==="__v_isReactive"?!e:s==="__v_isReadonly"?e:s==="__v_raw"?o:Reflect.get(A(n,s)&&s in o?n:o,s,i)}const Cr={get:Sn(!1,!1)},Sr={get:Sn(!1,!0)},Tr={get:Sn(!0,!1)},Pr={get:Sn(!0,!0)};function zs(e,t,n){const o=I(n);if(o!==n&&t.call(e,o)){const s=Eo(e);ze(`Reactive ${s} contains both the raw and reactive versions of the same object${s==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const Xs=new WeakMap,Qs=new WeakMap,Zs=new WeakMap,ei=new WeakMap;function Ir(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function $r(e){return e.__v_skip||!Object.isExtensible(e)?0:Ir(Eo(e))}function Co(e){return Xe(e)?e:Tn(e,!1,Er,Cr,Xs)}function Mr(e){return Tn(e,!1,yr,Sr,Qs)}function ti(e){return Tn(e,!0,br,Tr,Zs)}function bt(e){return Tn(e,!0,Nr,Pr,ei)}function Tn(e,t,n,o,s){if(!k(e))return process.env.NODE_ENV!=="production"&&ze(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&!(t&&e.__v_isReactive))return e;const i=s.get(e);if(i)return i;const r=$r(e);if(r===0)return e;const c=new Proxy(e,r===2?o:n);return s.set(e,c),c}function ct(e){return Xe(e)?ct(e.__v_raw):!!(e&&e.__v_isReactive)}function Xe(e){return!!(e&&e.__v_isReadonly)}function ut(e){return!!(e&&e.__v_isShallow)}function no(e){return ct(e)||Xe(e)}function I(e){const t=e&&e.__v_raw;return t?I(t):e}function ni(e){return Object.isExtensible(e)&&En(e,"__v_skip",!0),e}const Bt=e=>k(e)?Co(e):e,So=e=>k(e)?ti(e):e,Ar="Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free";class oi{constructor(t,n,o,s){this.getter=t,this._setter=n,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new wo(()=>t(this._value),()=>an(this,this.effect._dirtyLevel===2?2:3)),this.effect.computed=this,this.effect.active=this._cacheable=!s,this.__v_isReadonly=o}get value(){const t=I(this);return(!t._cacheable||t.effect.dirty)&&Ye(t._value,t._value=t.effect.run())&&an(t,4),si(t),t.effect._dirtyLevel>=2&&(process.env.NODE_ENV!=="production"&&this._warnRecursive&&ze(Ar,`

getter: `,this.getter),an(t,2)),t._value}set value(t){this._setter(t)}get _dirty(){return this.effect.dirty}set _dirty(t){this.effect.dirty=t}}function Rr(e,t,n=!1){let o,s;const i=T(e);i?(o=e,s=process.env.NODE_ENV!=="production"?()=>{ze("Write operation failed: computed value is readonly")}:Y):(o=e.get,s=e.set);const r=new oi(o,s,i||!s,n);return process.env.NODE_ENV!=="production"&&t&&!n&&(r.effect.onTrack=t.onTrack,r.effect.onTrigger=t.onTrigger),r}function si(e){var t;Ke&&rt&&(e=I(e),Bs(rt,(t=e.dep)!=null?t:e.dep=Ws(()=>e.dep=void 0,e instanceof oi?e:void 0),process.env.NODE_ENV!=="production"?{target:e,type:"get",key:"value"}:void 0))}function an(e,t=4,n){e=I(e);const o=e.dep;o&&Ks(o,t,process.env.NODE_ENV!=="production"?{target:e,type:"set",key:"value",newValue:n}:void 0)}function te(e){return!!(e&&e.__v_isRef===!0)}function oo(e){return Fr(e,!1)}function Fr(e,t){return te(e)?e:new jr(e,t)}class jr{constructor(t,n){this.__v_isShallow=n,this.dep=void 0,this.__v_isRef=!0,this._rawValue=n?t:I(t),this._value=n?t:Bt(t)}get value(){return si(this),this._value}set value(t){const n=this.__v_isShallow||ut(t)||Xe(t);t=n?t:I(t),Ye(t,this._rawValue)&&(this._rawValue=t,this._value=n?t:Bt(t),an(this,4,t))}}function Lr(e){return te(e)?e.value:e}const kr={get:(e,t,n)=>Lr(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const s=e[t];return te(s)&&!te(n)?(s.value=n,!0):Reflect.set(e,t,n,o)}};function ii(e){return ct(e)?e:new Proxy(e,kr)}/**
* @vue/runtime-core v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const at=[];function fn(e){at.push(e)}function dn(){at.pop()}function N(e,...t){Ze();const n=at.length?at[at.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=Hr();if(o)Pe(o,n,11,[e+t.map(i=>{var r,c;return(c=(r=i.toString)==null?void 0:r.call(i))!=null?c:JSON.stringify(i)}).join(""),n&&n.proxy,s.map(({vnode:i})=>`at <${jn(n,i.type)}>`).join(`
`),s]);else{const i=[`[Vue warn]: ${e}`,...t];s.length&&i.push(`
`,...Ur(s)),console.warn(...i)}et()}function Hr(){let e=at[at.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}function Ur(e){const t=[];return e.forEach((n,o)=>{t.push(...o===0?[]:[`
`],...Br(n))}),t}function Br({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=e.component?e.component.parent==null:!1,s=` at <${jn(e.component,e.type,o)}`,i=">"+n;return e.props?[s,...Kr(e.props),i]:[s+i]}function Kr(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(o=>{t.push(...ri(o,e[o]))}),n.length>3&&t.push(" ..."),t}function ri(e,t,n){return q(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:te(t)?(t=ri(e,I(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):T(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=I(t),n?t:[`${e}=`,t])}const To={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://github.com/vuejs/core ."};function Pe(e,t,n,o){try{return o?e(...o):e()}catch(s){Xt(s,t,n)}}function Ee(e,t,n,o){if(T(e)){const i=Pe(e,t,n,o);return i&&vo(i)&&i.catch(r=>{Xt(r,t,n)}),i}const s=[];for(let i=0;i<e.length;i++)s.push(Ee(e[i],t,n,o));return s}function Xt(e,t,n,o=!0){const s=t?t.vnode:null;if(t){let i=t.parent;const r=t.proxy,c=process.env.NODE_ENV!=="production"?To[n]:`https://vuejs.org/error-reference/#runtime-${n}`;for(;i;){const f=i.ec;if(f){for(let h=0;h<f.length;h++)if(f[h](e,r,c)===!1)return}i=i.parent}const a=t.appContext.config.errorHandler;if(a){Pe(a,null,10,[e,r,c]);return}}Wr(e,n,s,o)}function Wr(e,t,n,o=!0){if(process.env.NODE_ENV!=="production"){const s=To[t];if(n&&fn(n),N(`Unhandled error${s?` during execution of ${s}`:""}`),n&&dn(),o)throw e;console.error(e)}else console.error(e)}let Kt=!1,so=!1;const ne=[];let we=0;const Ot=[];let Te=null,Le=0;const li=Promise.resolve();let Po=null;const Gr=100;function ci(e){const t=Po||li;return e?t.then(this?e.bind(this):e):t}function qr(e){let t=we+1,n=ne.length;for(;t<n;){const o=t+n>>>1,s=ne[o],i=Wt(s);i<e||i===e&&s.pre?t=o+1:n=o}return t}function Pn(e){(!ne.length||!ne.includes(e,Kt&&e.allowRecurse?we+1:we))&&(e.id==null?ne.push(e):ne.splice(qr(e.id),0,e),ui())}function ui(){!Kt&&!so&&(so=!0,Po=li.then(di))}function Jr(e){const t=ne.indexOf(e);t>we&&ne.splice(t,1)}function ai(e){V(e)?Ot.push(...e):(!Te||!Te.includes(e,e.allowRecurse?Le+1:Le))&&Ot.push(e),ui()}function os(e,t,n=Kt?we+1:0){for(process.env.NODE_ENV!=="production"&&(t=t||new Map);n<ne.length;n++){const o=ne[n];if(o&&o.pre){if(e&&o.id!==e.uid||process.env.NODE_ENV!=="production"&&Io(t,o))continue;ne.splice(n,1),n--,o()}}}function fi(e){if(Ot.length){const t=[...new Set(Ot)].sort((n,o)=>Wt(n)-Wt(o));if(Ot.length=0,Te){Te.push(...t);return}for(Te=t,process.env.NODE_ENV!=="production"&&(e=e||new Map),Le=0;Le<Te.length;Le++)process.env.NODE_ENV!=="production"&&Io(e,Te[Le])||Te[Le]();Te=null,Le=0}}const Wt=e=>e.id==null?1/0:e.id,Yr=(e,t)=>{const n=Wt(e)-Wt(t);if(n===0){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function di(e){so=!1,Kt=!0,process.env.NODE_ENV!=="production"&&(e=e||new Map),ne.sort(Yr);const t=process.env.NODE_ENV!=="production"?n=>Io(e,n):Y;try{for(we=0;we<ne.length;we++){const n=ne[we];if(n&&n.active!==!1){if(process.env.NODE_ENV!=="production"&&t(n))continue;Pe(n,null,14)}}}finally{we=0,ne.length=0,fi(e),Kt=!1,Po=null,(ne.length||Ot.length)&&di(e)}}function Io(e,t){if(!e.has(t))e.set(t,1);else{const n=e.get(t);if(n>Gr){const o=t.ownerInstance,s=o&&ki(o.type);return Xt(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}else e.set(t,n+1)}}let ft=!1;const Et=new Set;process.env.NODE_ENV!=="production"&&(yo().__VUE_HMR_RUNTIME__={createRecord:Wn(pi),rerender:Wn(Qr),reload:Wn(Zr)});const pt=new Map;function zr(e){const t=e.type.__hmrId;let n=pt.get(t);n||(pi(t,e.type),n=pt.get(t)),n.instances.add(e)}function Xr(e){pt.get(e.type.__hmrId).instances.delete(e)}function pi(e,t){return pt.has(e)?!1:(pt.set(e,{initialDef:jt(t),instances:new Set}),!0)}function jt(e){return Hi(e)?e.__vccOpts:e}function Qr(e,t){const n=pt.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(o=>{t&&(o.render=t,jt(o.type).render=t),o.renderCache=[],ft=!0,o.effect.dirty=!0,o.update(),ft=!1}))}function Zr(e,t){const n=pt.get(e);if(!n)return;t=jt(t),ss(n.initialDef,t);const o=[...n.instances];for(const s of o){const i=jt(s.type);Et.has(i)||(i!==n.initialDef&&ss(i,t),Et.add(i)),s.appContext.propsCache.delete(s.type),s.appContext.emitsCache.delete(s.type),s.appContext.optionsCache.delete(s.type),s.ceReload?(Et.add(i),s.ceReload(t.styles),Et.delete(i)):s.parent?(s.parent.effect.dirty=!0,Pn(s.parent.update)):s.appContext.reload?s.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required.")}ai(()=>{for(const s of o)Et.delete(jt(s.type))})}function ss(e,t){G(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function Wn(e){return(t,n)=>{try{return e(t,n)}catch(o){console.error(o),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}let _e,$t=[],io=!1;function Qt(e,...t){_e?_e.emit(e,...t):io||$t.push({event:e,args:t})}function $o(e,t){var n,o;_e=e,_e?(_e.enabled=!0,$t.forEach(({event:s,args:i})=>_e.emit(s,...i)),$t=[]):typeof window<"u"&&window.HTMLElement&&!((o=(n=window.navigator)==null?void 0:n.userAgent)!=null&&o.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push(i=>{$o(i,t)}),setTimeout(()=>{_e||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,io=!0,$t=[])},3e3)):(io=!0,$t=[])}function el(e,t){Qt("app:init",e,t,{Fragment:fe,Text:Zt,Comment:be,Static:kt})}function tl(e){Qt("app:unmount",e)}const nl=Mo("component:added"),hi=Mo("component:updated"),ol=Mo("component:removed"),sl=e=>{_e&&typeof _e.cleanupBuffer=="function"&&!_e.cleanupBuffer(e)&&ol(e)};function Mo(e){return t=>{Qt(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const il=gi("perf:start"),rl=gi("perf:end");function gi(e){return(t,n,o)=>{Qt(e,t.appContext.app,t.uid,t,n,o)}}function ll(e,t,n){Qt("component:emit",e.appContext.app,e,t,n)}function cl(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||U;if(process.env.NODE_ENV!=="production"){const{emitsOptions:h,propsOptions:[d]}=e;if(h)if(!(t in h))(!d||!(ot(t)in d))&&N(`Component emitted event "${t}" but it is neither declared in the emits option nor as an "${ot(t)}" prop.`);else{const E=h[t];T(E)&&(E(...n)||N(`Invalid event arguments: event validation failed for event "${t}".`))}}let s=n;const i=t.startsWith("update:"),r=i&&t.slice(7);if(r&&r in o){const h=`${r==="modelValue"?"model":r}Modifiers`,{number:d,trim:E}=o[h]||U;E&&(s=n.map(x=>q(x)?x.trim():x)),d&&(s=n.map(Ut))}if(process.env.NODE_ENV!=="production"&&ll(e,t,s),process.env.NODE_ENV!=="production"){const h=t.toLowerCase();h!==t&&o[ot(h)]&&N(`Event "${h}" is emitted in component ${jn(e,e.type)} but the handler is registered for "${t}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${Je(t)}" instead of "${t}".`)}let c,a=o[c=ot(t)]||o[c=ot(wt(t))];!a&&i&&(a=o[c=ot(Je(t))]),a&&Ee(a,e,6,s);const f=o[c+"Once"];if(f){if(!e.emitted)e.emitted={};else if(e.emitted[c])return;e.emitted[c]=!0,Ee(f,e,6,s)}}function mi(e,t,n=!1){const o=t.emitsCache,s=o.get(e);if(s!==void 0)return s;const i=e.emits;let r={},c=!1;if(!T(e)){const a=f=>{const h=mi(f,t,!0);h&&(c=!0,G(r,h))};!n&&t.mixins.length&&t.mixins.forEach(a),e.extends&&a(e.extends),e.mixins&&e.mixins.forEach(a)}return!i&&!c?(k(e)&&o.set(e,null),null):(V(i)?i.forEach(a=>r[a]=null):G(r,i),k(e)&&o.set(e,r),r)}function In(e,t){return!e||!Jt(t)?!1:(t=t.slice(2).replace(/Once$/,""),A(e,t[0].toLowerCase()+t.slice(1))||A(e,Je(t))||A(e,t))}let oe=null,$n=null;function bn(e){const t=oe;return oe=e,$n=e&&e.type.__scopeId||null,t}function ul(e){$n=e}function al(){$n=null}function fl(e,t=oe,n){if(!t||e._n)return e;const o=(...s)=>{o._d&&ms(-1);const i=bn(t);let r;try{r=e(...s)}finally{bn(i),o._d&&ms(1)}return process.env.NODE_ENV!=="production"&&hi(t),r};return o._n=!0,o._c=!0,o._d=!0,o}let ro=!1;function yn(){ro=!0}function Gn(e){const{type:t,vnode:n,proxy:o,withProxy:s,props:i,propsOptions:[r],slots:c,attrs:a,emit:f,render:h,renderCache:d,data:E,setupState:x,ctx:M,inheritAttrs:R}=e;let Z,z;const ae=bn(e);process.env.NODE_ENV!=="production"&&(ro=!1);try{if(n.shapeFlag&4){const J=s||o,de=process.env.NODE_ENV!=="production"&&x.__isScriptSetup?new Proxy(J,{get($,se,ie){return N(`Property '${String(se)}' was accessed via 'this'. Avoid using 'this' in templates.`),Reflect.get($,se,ie)}}):J;Z=me(h.call(de,J,d,i,x,E,M)),z=a}else{const J=t;process.env.NODE_ENV!=="production"&&a===i&&yn(),Z=me(J.length>1?J(i,process.env.NODE_ENV!=="production"?{get attrs(){return yn(),a},slots:c,emit:f}:{attrs:a,slots:c,emit:f}):J(i,null)),z=t.props?a:dl(a)}}catch(J){Ht.length=0,Xt(J,e,1),Z=We(be)}let K=Z,W;if(process.env.NODE_ENV!=="production"&&Z.patchFlag>0&&Z.patchFlag&2048&&([K,W]=_i(Z)),z&&R!==!1){const J=Object.keys(z),{shapeFlag:de}=K;if(J.length){if(de&7)r&&J.some(vn)&&(z=pl(z,r)),K=Qe(K,z);else if(process.env.NODE_ENV!=="production"&&!ro&&K.type!==be){const $=Object.keys(a),se=[],ie=[];for(let De=0,Ae=$.length;De<Ae;De++){const pe=$[De];Jt(pe)?vn(pe)||se.push(pe[2].toLowerCase()+pe.slice(3)):ie.push(pe)}ie.length&&N(`Extraneous non-props attributes (${ie.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`),se.length&&N(`Extraneous non-emits event listeners (${se.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`)}}}return n.dirs&&(process.env.NODE_ENV!=="production"&&!is(K)&&N("Runtime directive used on component with non-element root node. The directives will not function as intended."),K=Qe(K),K.dirs=K.dirs?K.dirs.concat(n.dirs):n.dirs),n.transition&&(process.env.NODE_ENV!=="production"&&!is(K)&&N("Component inside <Transition> renders non-element root node that cannot be animated."),K.transition=n.transition),process.env.NODE_ENV!=="production"&&W?W(K):Z=K,bn(ae),Z}const _i=e=>{const t=e.children,n=e.dynamicChildren,o=Ao(t,!1);if(o){if(process.env.NODE_ENV!=="production"&&o.patchFlag>0&&o.patchFlag&2048)return _i(o)}else return[e,void 0];const s=t.indexOf(o),i=n?n.indexOf(o):-1,r=c=>{t[s]=c,n&&(i>-1?n[i]=c:c.patchFlag>0&&(e.dynamicChildren=[...n,c]))};return[me(o),r]};function Ao(e,t=!0){let n;for(let o=0;o<e.length;o++){const s=e[o];if(Ho(s)){if(s.type!==be||s.children==="v-if"){if(n)return;if(n=s,process.env.NODE_ENV!=="production"&&t&&n.patchFlag>0&&n.patchFlag&2048)return Ao(n.children)}}else return}return n}const dl=e=>{let t;for(const n in e)(n==="class"||n==="style"||Jt(n))&&((t||(t={}))[n]=e[n]);return t},pl=(e,t)=>{const n={};for(const o in e)(!vn(o)||!(o.slice(9)in t))&&(n[o]=e[o]);return n},is=e=>e.shapeFlag&7||e.type===be;function hl(e,t,n){const{props:o,children:s,component:i}=e,{props:r,children:c,patchFlag:a}=t,f=i.emitsOptions;if(process.env.NODE_ENV!=="production"&&(s||c)&&ft||t.dirs||t.transition)return!0;if(n&&a>=0){if(a&1024)return!0;if(a&16)return o?rs(o,r,f):!!r;if(a&8){const h=t.dynamicProps;for(let d=0;d<h.length;d++){const E=h[d];if(r[E]!==o[E]&&!In(f,E))return!0}}}else return(s||c)&&(!c||!c.$stable)?!0:o===r?!1:o?r?rs(o,r,f):!0:!!r;return!1}function rs(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let s=0;s<o.length;s++){const i=o[s];if(t[i]!==e[i]&&!In(n,i))return!0}return!1}function gl({vnode:e,parent:t},n){for(;t;){const o=t.subTree;if(o.suspense&&o.suspense.activeBranch===e&&(o.el=e.el),o===e)(e=t.vnode).el=n,t=t.parent;else break}}const ml=Symbol.for("v-ndc"),_l=e=>e.__isSuspense;function vl(e,t){t&&t.pendingBranch?V(e)?t.effects.push(...e):t.effects.push(e):ai(e)}const El=Symbol.for("v-scx"),bl=()=>{{const e=hn(El);return e||process.env.NODE_ENV!=="production"&&N("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}},un={};function qn(e,t,n){return process.env.NODE_ENV!=="production"&&!T(t)&&N("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),vi(e,t,n)}function vi(e,t,{immediate:n,deep:o,flush:s,once:i,onTrack:r,onTrigger:c}=U){if(t&&i){const $=t;t=(...se)=>{$(...se),de()}}process.env.NODE_ENV!=="production"&&o!==void 0&&typeof o=="number"&&N('watch() "deep" option with number value will be used as watch depth in future versions. Please use a boolean instead to avoid potential breakage.'),process.env.NODE_ENV!=="production"&&!t&&(n!==void 0&&N('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'),o!==void 0&&N('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'),i!==void 0&&N('watch() "once" option is only respected when using the watch(source, callback, options?) signature.'));const a=$=>{N("Invalid watch source: ",$,"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.")},f=Q,h=$=>o===!0?$:st($,o===!1?1:void 0);let d,E=!1,x=!1;if(te(e)?(d=()=>e.value,E=ut(e)):ct(e)?(d=()=>h(e),E=!0):V(e)?(x=!0,E=e.some($=>ct($)||ut($)),d=()=>e.map($=>{if(te($))return $.value;if(ct($))return h($);if(T($))return Pe($,f,2);process.env.NODE_ENV!=="production"&&a($)})):T(e)?t?d=()=>Pe(e,f,2):d=()=>(M&&M(),Ee(e,f,3,[R])):(d=Y,process.env.NODE_ENV!=="production"&&a(e)),t&&o){const $=d;d=()=>st($())}let M,R=$=>{M=W.onStop=()=>{Pe($,f,4),M=W.onStop=void 0}},Z;if(Rn)if(R=Y,t?n&&Ee(t,f,3,[d(),x?[]:void 0,R]):d(),s==="sync"){const $=bl();Z=$.__watcherHandles||($.__watcherHandles=[])}else return Y;let z=x?new Array(e.length).fill(un):un;const ae=()=>{if(!(!W.active||!W.dirty))if(t){const $=W.run();(o||E||(x?$.some((se,ie)=>Ye(se,z[ie])):Ye($,z)))&&(M&&M(),Ee(t,f,3,[$,z===un?void 0:x&&z[0]===un?[]:z,R]),z=$)}else W.run()};ae.allowRecurse=!!t;let K;s==="sync"?K=ae:s==="post"?K=()=>ue(ae,f&&f.suspense):(ae.pre=!0,f&&(ae.id=f.uid),K=()=>Pn(ae));const W=new wo(d,Y,K),J=hr(),de=()=>{W.stop(),J&&_o(J.effects,W)};return process.env.NODE_ENV!=="production"&&(W.onTrack=r,W.onTrigger=c),t?n?ae():z=W.run():s==="post"?ue(W.run.bind(W),f&&f.suspense):W.run(),Z&&Z.push(de),de}function yl(e,t,n){const o=this.proxy,s=q(e)?e.includes(".")?Ei(o,e):()=>o[e]:e.bind(o,o);let i;T(t)?i=t:(i=t.handler,n=t);const r=en(this),c=vi(s,i.bind(o),n);return r(),c}function Ei(e,t){const n=t.split(".");return()=>{let o=e;for(let s=0;s<n.length&&o;s++)o=o[n[s]];return o}}function st(e,t,n=0,o){if(!k(e)||e.__v_skip)return e;if(t&&t>0){if(n>=t)return e;n++}if(o=o||new Set,o.has(e))return e;if(o.add(e),te(e))st(e.value,t,n,o);else if(V(e))for(let s=0;s<e.length;s++)st(e[s],t,n,o);else if(Vt(e)||it(e))e.forEach(s=>{st(s,t,n,o)});else if(js(e))for(const s in e)st(e[s],t,n,o);return e}function bi(e){Yi(e)&&N("Do not use built-in directive ids as custom directive id: "+e)}function Tt(e,t){if(oe===null)return process.env.NODE_ENV!=="production"&&N("withDirectives can only be used inside render functions."),e;const n=Fn(oe)||oe.proxy,o=e.dirs||(e.dirs=[]);for(let s=0;s<t.length;s++){let[i,r,c,a=U]=t[s];i&&(T(i)&&(i={mounted:i,updated:i}),i.deep&&st(r),o.push({dir:i,instance:n,value:r,oldValue:void 0,arg:c,modifiers:a}))}return e}function tt(e,t,n,o){const s=e.dirs,i=t&&t.dirs;for(let r=0;r<s.length;r++){const c=s[r];i&&(c.oldValue=i[r].value);let a=c.dir[o];a&&(Ze(),Ee(a,n,8,[e.el,c,e,t]),et())}}/*! #__NO_SIDE_EFFECTS__ */function yi(e,t){return T(e)?G({name:e.name},t,{setup:e}):e}const pn=e=>!!e.type.__asyncLoader,Ro=e=>e.type.__isKeepAlive;function Nl(e,t){Ni(e,"a",t)}function Ol(e,t){Ni(e,"da",t)}function Ni(e,t,n=Q){const o=e.__wdc||(e.__wdc=()=>{let s=n;for(;s;){if(s.isDeactivated)return;s=s.parent}return e()});if(Mn(t,o,n),n){let s=n.parent;for(;s&&s.parent;)Ro(s.parent.vnode)&&wl(o,t,n,s),s=s.parent}}function wl(e,t,n,o){const s=Mn(t,e,o,!0);Oi(()=>{_o(o[t],s)},n)}function Mn(e,t,n=Q,o=!1){if(n){const s=n[e]||(n[e]=[]),i=t.__weh||(t.__weh=(...r)=>{if(n.isUnmounted)return;Ze();const c=en(n),a=Ee(t,n,e,r);return c(),et(),a});return o?s.unshift(i):s.push(i),i}else if(process.env.NODE_ENV!=="production"){const s=ot(To[e].replace(/ hook$/,""));N(`${s} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`)}}const Me=e=>(t,n=Q)=>(!Rn||e==="sp")&&Mn(e,(...o)=>t(...o),n),xl=Me("bm"),Fo=Me("m"),Dl=Me("bu"),Vl=Me("u"),Cl=Me("bum"),Oi=Me("um"),Sl=Me("sp"),Tl=Me("rtg"),Pl=Me("rtc");function Il(e,t=Q){Mn("ec",e,t)}function $l(e,t,n,o){let s;const i=n&&n[o];if(V(e)||q(e)){s=new Array(e.length);for(let r=0,c=e.length;r<c;r++)s[r]=t(e[r],r,void 0,i&&i[r])}else if(typeof e=="number"){process.env.NODE_ENV!=="production"&&!Number.isInteger(e)&&N(`The v-for range expect an integer value but got ${e}.`),s=new Array(e);for(let r=0;r<e;r++)s[r]=t(r+1,r,void 0,i&&i[r])}else if(k(e))if(e[Symbol.iterator])s=Array.from(e,(r,c)=>t(r,c,void 0,i&&i[c]));else{const r=Object.keys(e);s=new Array(r.length);for(let c=0,a=r.length;c<a;c++){const f=r[c];s[c]=t(e[f],f,c,i&&i[c])}}else s=[];return n&&(n[o]=s),s}const lo=e=>e?ji(e)?Fn(e)||e.proxy:lo(e.parent):null,dt=G(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>process.env.NODE_ENV!=="production"?bt(e.props):e.props,$attrs:e=>process.env.NODE_ENV!=="production"?bt(e.attrs):e.attrs,$slots:e=>process.env.NODE_ENV!=="production"?bt(e.slots):e.slots,$refs:e=>process.env.NODE_ENV!=="production"?bt(e.refs):e.refs,$parent:e=>lo(e.parent),$root:e=>lo(e.root),$emit:e=>e.emit,$options:e=>Lo(e),$forceUpdate:e=>e.f||(e.f=()=>{e.effect.dirty=!0,Pn(e.update)}),$nextTick:e=>e.n||(e.n=ci.bind(e.proxy)),$watch:e=>yl.bind(e)}),jo=e=>e==="_"||e==="$",Jn=(e,t)=>e!==U&&!e.__isScriptSetup&&A(e,t),wi={get({_:e},t){const{ctx:n,setupState:o,data:s,props:i,accessCache:r,type:c,appContext:a}=e;if(process.env.NODE_ENV!=="production"&&t==="__isVue")return!0;let f;if(t[0]!=="$"){const x=r[t];if(x!==void 0)switch(x){case 1:return o[t];case 2:return s[t];case 4:return n[t];case 3:return i[t]}else{if(Jn(o,t))return r[t]=1,o[t];if(s!==U&&A(s,t))return r[t]=2,s[t];if((f=e.propsOptions[0])&&A(f,t))return r[t]=3,i[t];if(n!==U&&A(n,t))return r[t]=4,n[t];co&&(r[t]=0)}}const h=dt[t];let d,E;if(h)return t==="$attrs"?(ee(e,"get",t),process.env.NODE_ENV!=="production"&&yn()):process.env.NODE_ENV!=="production"&&t==="$slots"&&ee(e,"get",t),h(e);if((d=c.__cssModules)&&(d=d[t]))return d;if(n!==U&&A(n,t))return r[t]=4,n[t];if(E=a.config.globalProperties,A(E,t))return E[t];process.env.NODE_ENV!=="production"&&oe&&(!q(t)||t.indexOf("__v")!==0)&&(s!==U&&jo(t[0])&&A(s,t)?N(`Property ${JSON.stringify(t)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`):e===oe&&N(`Property ${JSON.stringify(t)} was accessed during render but is not defined on instance.`))},set({_:e},t,n){const{data:o,setupState:s,ctx:i}=e;return Jn(s,t)?(s[t]=n,!0):process.env.NODE_ENV!=="production"&&s.__isScriptSetup&&A(s,t)?(N(`Cannot mutate <script setup> binding "${t}" from Options API.`),!1):o!==U&&A(o,t)?(o[t]=n,!0):A(e.props,t)?(process.env.NODE_ENV!=="production"&&N(`Attempting to mutate prop "${t}". Props are readonly.`),!1):t[0]==="$"&&t.slice(1)in e?(process.env.NODE_ENV!=="production"&&N(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`),!1):(process.env.NODE_ENV!=="production"&&t in e.appContext.config.globalProperties?Object.defineProperty(i,t,{enumerable:!0,configurable:!0,value:n}):i[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:s,propsOptions:i}},r){let c;return!!n[r]||e!==U&&A(e,r)||Jn(t,r)||(c=i[0])&&A(c,r)||A(o,r)||A(dt,r)||A(s.config.globalProperties,r)},defineProperty(e,t,n){return n.get!=null?e._.accessCache[t]=0:A(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};process.env.NODE_ENV!=="production"&&(wi.ownKeys=e=>(N("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."),Reflect.ownKeys(e)));function Ml(e){const t={};return Object.defineProperty(t,"_",{configurable:!0,enumerable:!1,get:()=>e}),Object.keys(dt).forEach(n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>dt[n](e),set:Y})}),t}function Al(e){const{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach(o=>{Object.defineProperty(t,o,{enumerable:!0,configurable:!0,get:()=>e.props[o],set:Y})})}function Rl(e){const{ctx:t,setupState:n}=e;Object.keys(I(n)).forEach(o=>{if(!n.__isScriptSetup){if(jo(o[0])){N(`setup() return property ${JSON.stringify(o)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);return}Object.defineProperty(t,o,{enumerable:!0,configurable:!0,get:()=>n[o],set:Y})}})}function ls(e){return V(e)?e.reduce((t,n)=>(t[n]=null,t),{}):e}function Fl(){const e=Object.create(null);return(t,n)=>{e[n]?N(`${t} property "${n}" is already defined in ${e[n]}.`):e[n]=t}}let co=!0;function jl(e){const t=Lo(e),n=e.proxy,o=e.ctx;co=!1,t.beforeCreate&&cs(t.beforeCreate,e,"bc");const{data:s,computed:i,methods:r,watch:c,provide:a,inject:f,created:h,beforeMount:d,mounted:E,beforeUpdate:x,updated:M,activated:R,deactivated:Z,beforeDestroy:z,beforeUnmount:ae,destroyed:K,unmounted:W,render:J,renderTracked:de,renderTriggered:$,errorCaptured:se,serverPrefetch:ie,expose:De,inheritAttrs:Ae,components:pe,directives:tn,filters:Bo}=t,Re=process.env.NODE_ENV!=="production"?Fl():null;if(process.env.NODE_ENV!=="production"){const[L]=e.propsOptions;if(L)for(const j in L)Re("Props",j)}if(f&&Ll(f,o,Re),r)for(const L in r){const j=r[L];T(j)?(process.env.NODE_ENV!=="production"?Object.defineProperty(o,L,{value:j.bind(n),configurable:!0,enumerable:!0,writable:!0}):o[L]=j.bind(n),process.env.NODE_ENV!=="production"&&Re("Methods",L)):process.env.NODE_ENV!=="production"&&N(`Method "${L}" has type "${typeof j}" in the component definition. Did you reference the function correctly?`)}if(s){process.env.NODE_ENV!=="production"&&!T(s)&&N("The data option must be a function. Plain object usage is no longer supported.");const L=s.call(n,n);if(process.env.NODE_ENV!=="production"&&vo(L)&&N("data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>."),!k(L))process.env.NODE_ENV!=="production"&&N("data() should return an object.");else if(e.data=Co(L),process.env.NODE_ENV!=="production")for(const j in L)Re("Data",j),jo(j[0])||Object.defineProperty(o,j,{configurable:!0,enumerable:!0,get:()=>L[j],set:Y})}if(co=!0,i)for(const L in i){const j=i[L],ye=T(j)?j.bind(n,n):T(j.get)?j.get.bind(n,n):Y;process.env.NODE_ENV!=="production"&&ye===Y&&N(`Computed property "${L}" has no getter.`);const Ln=!T(j)&&T(j.set)?j.set.bind(n):process.env.NODE_ENV!=="production"?()=>{N(`Write operation failed: computed property "${L}" is readonly.`)}:Y,Ct=Dc({get:ye,set:Ln});Object.defineProperty(o,L,{enumerable:!0,configurable:!0,get:()=>Ct.value,set:gt=>Ct.value=gt}),process.env.NODE_ENV!=="production"&&Re("Computed",L)}if(c)for(const L in c)xi(c[L],o,n,L);if(a){const L=T(a)?a.call(n):a;Reflect.ownKeys(L).forEach(j=>{Wl(j,L[j])})}h&&cs(h,e,"c");function ce(L,j){V(j)?j.forEach(ye=>L(ye.bind(n))):j&&L(j.bind(n))}if(ce(xl,d),ce(Fo,E),ce(Dl,x),ce(Vl,M),ce(Nl,R),ce(Ol,Z),ce(Il,se),ce(Pl,de),ce(Tl,$),ce(Cl,ae),ce(Oi,W),ce(Sl,ie),V(De))if(De.length){const L=e.exposed||(e.exposed={});De.forEach(j=>{Object.defineProperty(L,j,{get:()=>n[j],set:ye=>n[j]=ye})})}else e.exposed||(e.exposed={});J&&e.render===Y&&(e.render=J),Ae!=null&&(e.inheritAttrs=Ae),pe&&(e.components=pe),tn&&(e.directives=tn)}function Ll(e,t,n=Y){V(e)&&(e=uo(e));for(const o in e){const s=e[o];let i;k(s)?"default"in s?i=hn(s.from||o,s.default,!0):i=hn(s.from||o):i=hn(s),te(i)?Object.defineProperty(t,o,{enumerable:!0,configurable:!0,get:()=>i.value,set:r=>i.value=r}):t[o]=i,process.env.NODE_ENV!=="production"&&n("Inject",o)}}function cs(e,t,n){Ee(V(e)?e.map(o=>o.bind(t.proxy)):e.bind(t.proxy),t,n)}function xi(e,t,n,o){const s=o.includes(".")?Ei(n,o):()=>n[o];if(q(e)){const i=t[e];T(i)?qn(s,i):process.env.NODE_ENV!=="production"&&N(`Invalid watch handler specified by key "${e}"`,i)}else if(T(e))qn(s,e.bind(n));else if(k(e))if(V(e))e.forEach(i=>xi(i,t,n,o));else{const i=T(e.handler)?e.handler.bind(n):t[e.handler];T(i)?qn(s,i,e):process.env.NODE_ENV!=="production"&&N(`Invalid watch handler specified by key "${e.handler}"`,i)}else process.env.NODE_ENV!=="production"&&N(`Invalid watch option: "${o}"`,e)}function Lo(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:s,optionsCache:i,config:{optionMergeStrategies:r}}=e.appContext,c=i.get(t);let a;return c?a=c:!s.length&&!n&&!o?a=t:(a={},s.length&&s.forEach(f=>Nn(a,f,r,!0)),Nn(a,t,r)),k(t)&&i.set(t,a),a}function Nn(e,t,n,o=!1){const{mixins:s,extends:i}=t;i&&Nn(e,i,n,!0),s&&s.forEach(r=>Nn(e,r,n,!0));for(const r in t)if(o&&r==="expose")process.env.NODE_ENV!=="production"&&N('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');else{const c=kl[r]||n&&n[r];e[r]=c?c(e[r],t[r]):t[r]}return e}const kl={data:us,props:as,emits:as,methods:Mt,computed:Mt,beforeCreate:le,created:le,beforeMount:le,mounted:le,beforeUpdate:le,updated:le,beforeDestroy:le,beforeUnmount:le,destroyed:le,unmounted:le,activated:le,deactivated:le,errorCaptured:le,serverPrefetch:le,components:Mt,directives:Mt,watch:Ul,provide:us,inject:Hl};function us(e,t){return t?e?function(){return G(T(e)?e.call(this,this):e,T(t)?t.call(this,this):t)}:t:e}function Hl(e,t){return Mt(uo(e),uo(t))}function uo(e){if(V(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function le(e,t){return e?[...new Set([].concat(e,t))]:t}function Mt(e,t){return e?G(Object.create(null),e,t):t}function as(e,t){return e?V(e)&&V(t)?[...new Set([...e,...t])]:G(Object.create(null),ls(e),ls(t??{})):t}function Ul(e,t){if(!e)return t;if(!t)return e;const n=G(Object.create(null),e);for(const o in t)n[o]=le(e[o],t[o]);return n}function Di(){return{app:null,config:{isNativeTag:qi,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Bl=0;function Kl(e,t){return function(o,s=null){T(o)||(o=G({},o)),s!=null&&!k(s)&&(process.env.NODE_ENV!=="production"&&N("root props passed to app.mount() must be an object."),s=null);const i=Di(),r=new WeakSet;let c=!1;const a=i.app={_uid:Bl++,_component:o,_props:s,_container:null,_context:i,_instance:null,version:bs,get config(){return i.config},set config(f){process.env.NODE_ENV!=="production"&&N("app.config cannot be replaced. Modify individual options instead.")},use(f,...h){return r.has(f)?process.env.NODE_ENV!=="production"&&N("Plugin has already been applied to target app."):f&&T(f.install)?(r.add(f),f.install(a,...h)):T(f)?(r.add(f),f(a,...h)):process.env.NODE_ENV!=="production"&&N('A plugin must either be a function or an object with an "install" function.'),a},mixin(f){return i.mixins.includes(f)?process.env.NODE_ENV!=="production"&&N("Mixin has already been applied to target app"+(f.name?`: ${f.name}`:"")):i.mixins.push(f),a},component(f,h){return process.env.NODE_ENV!=="production"&&go(f,i.config),h?(process.env.NODE_ENV!=="production"&&i.components[f]&&N(`Component "${f}" has already been registered in target app.`),i.components[f]=h,a):i.components[f]},directive(f,h){return process.env.NODE_ENV!=="production"&&bi(f),h?(process.env.NODE_ENV!=="production"&&i.directives[f]&&N(`Directive "${f}" has already been registered in target app.`),i.directives[f]=h,a):i.directives[f]},mount(f,h,d){if(c)process.env.NODE_ENV!=="production"&&N("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`");else{process.env.NODE_ENV!=="production"&&f.__vue_app__&&N("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");const E=We(o,s);return E.appContext=i,d===!0?d="svg":d===!1&&(d=void 0),process.env.NODE_ENV!=="production"&&(i.reload=()=>{e(Qe(E),f,d)}),h&&t?t(E,f):e(E,f,d),c=!0,a._container=f,f.__vue_app__=a,process.env.NODE_ENV!=="production"&&(a._instance=E.component,el(a,bs)),Fn(E.component)||E.component.proxy}},unmount(){c?(e(null,a._container),process.env.NODE_ENV!=="production"&&(a._instance=null,tl(a)),delete a._container.__vue_app__):process.env.NODE_ENV!=="production"&&N("Cannot unmount an app that is not mounted.")},provide(f,h){return process.env.NODE_ENV!=="production"&&f in i.provides&&N(`App already provides property with key "${String(f)}". It will be overwritten with the new value.`),i.provides[f]=h,a},runWithContext(f){const h=Lt;Lt=a;try{return f()}finally{Lt=h}}};return a}}let Lt=null;function Wl(e,t){if(!Q)process.env.NODE_ENV!=="production"&&N("provide() can only be used inside setup().");else{let n=Q.provides;const o=Q.parent&&Q.parent.provides;o===n&&(n=Q.provides=Object.create(o)),n[e]=t}}function hn(e,t,n=!1){const o=Q||oe;if(o||Lt){const s=o?o.parent==null?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides:Lt._context.provides;if(s&&e in s)return s[e];if(arguments.length>1)return n&&T(t)?t.call(o&&o.proxy):t;process.env.NODE_ENV!=="production"&&N(`injection "${String(e)}" not found.`)}else process.env.NODE_ENV!=="production"&&N("inject() can only be used inside setup() or functional components.")}function Gl(e,t,n,o=!1){const s={},i={};En(i,An,1),e.propsDefaults=Object.create(null),Vi(e,t,s,i);for(const r in e.propsOptions[0])r in s||(s[r]=void 0);process.env.NODE_ENV!=="production"&&Si(t||{},s,e),n?e.props=o?s:Mr(s):e.type.props?e.props=s:e.props=i,e.attrs=i}function ql(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}function Jl(e,t,n,o){const{props:s,attrs:i,vnode:{patchFlag:r}}=e,c=I(s),[a]=e.propsOptions;let f=!1;if(!(process.env.NODE_ENV!=="production"&&ql(e))&&(o||r>0)&&!(r&16)){if(r&8){const h=e.vnode.dynamicProps;for(let d=0;d<h.length;d++){let E=h[d];if(In(e.emitsOptions,E))continue;const x=t[E];if(a)if(A(i,E))x!==i[E]&&(i[E]=x,f=!0);else{const M=wt(E);s[M]=ao(a,c,M,x,e,!1)}else x!==i[E]&&(i[E]=x,f=!0)}}}else{Vi(e,t,s,i)&&(f=!0);let h;for(const d in c)(!t||!A(t,d)&&((h=Je(d))===d||!A(t,h)))&&(a?n&&(n[d]!==void 0||n[h]!==void 0)&&(s[d]=ao(a,c,d,void 0,e,!0)):delete s[d]);if(i!==c)for(const d in i)(!t||!A(t,d))&&(delete i[d],f=!0)}f&&xe(e,"set","$attrs"),process.env.NODE_ENV!=="production"&&Si(t||{},s,e)}function Vi(e,t,n,o){const[s,i]=e.propsOptions;let r=!1,c;if(t)for(let a in t){if(Ft(a))continue;const f=t[a];let h;s&&A(s,h=wt(a))?!i||!i.includes(h)?n[h]=f:(c||(c={}))[h]=f:In(e.emitsOptions,a)||(!(a in o)||f!==o[a])&&(o[a]=f,r=!0)}if(i){const a=I(n),f=c||U;for(let h=0;h<i.length;h++){const d=i[h];n[d]=ao(s,a,d,f[d],e,!A(f,d))}}return r}function ao(e,t,n,o,s,i){const r=e[n];if(r!=null){const c=A(r,"default");if(c&&o===void 0){const a=r.default;if(r.type!==Function&&!r.skipFactory&&T(a)){const{propsDefaults:f}=s;if(n in f)o=f[n];else{const h=en(s);o=f[n]=a.call(null,t),h()}}else o=a}r[0]&&(i&&!c?o=!1:r[1]&&(o===""||o===Je(n))&&(o=!0))}return o}function Ci(e,t,n=!1){const o=t.propsCache,s=o.get(e);if(s)return s;const i=e.props,r={},c=[];let a=!1;if(!T(e)){const h=d=>{a=!0;const[E,x]=Ci(d,t,!0);G(r,E),x&&c.push(...x)};!n&&t.mixins.length&&t.mixins.forEach(h),e.extends&&h(e.extends),e.mixins&&e.mixins.forEach(h)}if(!i&&!a)return k(e)&&o.set(e,Nt),Nt;if(V(i))for(let h=0;h<i.length;h++){process.env.NODE_ENV!=="production"&&!q(i[h])&&N("props must be strings when using array syntax.",i[h]);const d=wt(i[h]);fs(d)&&(r[d]=U)}else if(i){process.env.NODE_ENV!=="production"&&!k(i)&&N("invalid props options",i);for(const h in i){const d=wt(h);if(fs(d)){const E=i[h],x=r[d]=V(E)||T(E)?{type:E}:G({},E);if(x){const M=ps(Boolean,x.type),R=ps(String,x.type);x[0]=M>-1,x[1]=R<0||M<R,(M>-1||A(x,"default"))&&c.push(d)}}}}const f=[r,c];return k(e)&&o.set(e,f),f}function fs(e){return e[0]!=="$"&&!Ft(e)?!0:(process.env.NODE_ENV!=="production"&&N(`Invalid prop name: "${e}" is a reserved property.`),!1)}function fo(e){return e===null?"null":typeof e=="function"?e.name||"":typeof e=="object"&&e.constructor&&e.constructor.name||""}function ds(e,t){return fo(e)===fo(t)}function ps(e,t){return V(t)?t.findIndex(n=>ds(n,e)):T(t)&&ds(t,e)?0:-1}function Si(e,t,n){const o=I(t),s=n.propsOptions[0];for(const i in s){let r=s[i];r!=null&&Yl(i,o[i],r,process.env.NODE_ENV!=="production"?bt(o):o,!A(e,i)&&!A(e,Je(i)))}}function Yl(e,t,n,o,s){const{type:i,required:r,validator:c,skipCheck:a}=n;if(r&&s){N('Missing required prop: "'+e+'"');return}if(!(t==null&&!r)){if(i!=null&&i!==!0&&!a){let f=!1;const h=V(i)?i:[i],d=[];for(let E=0;E<h.length&&!f;E++){const{valid:x,expectedType:M}=Xl(t,h[E]);d.push(M||""),f=x}if(!f){N(Ql(e,t,d));return}}c&&!c(t,o)&&N('Invalid prop: custom validator check failed for prop "'+e+'".')}}const zl=$e("String,Number,Boolean,Function,Symbol,BigInt");function Xl(e,t){let n;const o=fo(t);if(zl(o)){const s=typeof e;n=s===o.toLowerCase(),!n&&s==="object"&&(n=e instanceof t)}else o==="Object"?n=k(e):o==="Array"?n=V(e):o==="null"?n=e===null:n=e instanceof t;return{valid:n,expectedType:o}}function Ql(e,t,n){if(n.length===0)return`Prop type [] for prop "${e}" won't match anything. Did you mean to use type Array instead?`;let o=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(Vn).join(" | ")}`;const s=n[0],i=Eo(t),r=hs(t,s),c=hs(t,i);return n.length===1&&gs(s)&&!Zl(s,i)&&(o+=` with value ${r}`),o+=`, got ${i} `,gs(i)&&(o+=`with value ${c}.`),o}function hs(e,t){return t==="String"?`"${e}"`:t==="Number"?`${Number(e)}`:`${e}`}function gs(e){return["string","number","boolean"].some(n=>e.toLowerCase()===n)}function Zl(...e){return e.some(t=>t.toLowerCase()==="boolean")}const Ti=e=>e[0]==="_"||e==="$stable",ko=e=>V(e)?e.map(me):[me(e)],ec=(e,t,n)=>{if(t._n)return t;const o=fl((...s)=>(process.env.NODE_ENV!=="production"&&Q&&(!n||n.root===Q.root)&&N(`Slot "${e}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`),ko(t(...s))),n);return o._c=!1,o},Pi=(e,t,n)=>{const o=e._ctx;for(const s in e){if(Ti(s))continue;const i=e[s];if(T(i))t[s]=ec(s,i,o);else if(i!=null){process.env.NODE_ENV!=="production"&&N(`Non-function value encountered for slot "${s}". Prefer function slots for better performance.`);const r=ko(i);t[s]=()=>r}}},Ii=(e,t)=>{process.env.NODE_ENV!=="production"&&!Ro(e.vnode)&&N("Non-function value encountered for default slot. Prefer function slots for better performance.");const n=ko(t);e.slots.default=()=>n},tc=(e,t)=>{if(e.vnode.shapeFlag&32){const n=t._;n?(e.slots=I(t),En(t,"_",n)):Pi(t,e.slots={})}else e.slots={},t&&Ii(e,t);En(e.slots,An,1)},nc=(e,t,n)=>{const{vnode:o,slots:s}=e;let i=!0,r=U;if(o.shapeFlag&32){const c=t._;c?process.env.NODE_ENV!=="production"&&ft?(G(s,t),xe(e,"set","$slots")):n&&c===1?i=!1:(G(s,t),!n&&c===1&&delete s._):(i=!t.$stable,Pi(t,s)),r=t}else t&&(Ii(e,t),r={default:1});if(i)for(const c in s)!Ti(c)&&r[c]==null&&delete s[c]};function po(e,t,n,o,s=!1){if(V(e)){e.forEach((E,x)=>po(E,t&&(V(t)?t[x]:t),n,o,s));return}if(pn(o)&&!s)return;const i=o.shapeFlag&4?Fn(o.component)||o.component.proxy:o.el,r=s?null:i,{i:c,r:a}=e;if(process.env.NODE_ENV!=="production"&&!c){N("Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.");return}const f=t&&t.r,h=c.refs===U?c.refs={}:c.refs,d=c.setupState;if(f!=null&&f!==a&&(q(f)?(h[f]=null,A(d,f)&&(d[f]=null)):te(f)&&(f.value=null)),T(a))Pe(a,c,12,[r,h]);else{const E=q(a),x=te(a);if(E||x){const M=()=>{if(e.f){const R=E?A(d,a)?d[a]:h[a]:a.value;s?V(R)&&_o(R,i):V(R)?R.includes(i)||R.push(i):E?(h[a]=[i],A(d,a)&&(d[a]=h[a])):(a.value=[i],e.k&&(h[e.k]=a.value))}else E?(h[a]=r,A(d,a)&&(d[a]=r)):x?(a.value=r,e.k&&(h[e.k]=r)):process.env.NODE_ENV!=="production"&&N("Invalid template ref type:",a,`(${typeof a})`)};r?(M.id=-1,ue(M,n)):M()}else process.env.NODE_ENV!=="production"&&N("Invalid template ref type:",a,`(${typeof a})`)}}let Pt,Ue;function Ce(e,t){e.appContext.config.performance&&On()&&Ue.mark(`vue-${t}-${e.uid}`),process.env.NODE_ENV!=="production"&&il(e,t,On()?Ue.now():Date.now())}function Se(e,t){if(e.appContext.config.performance&&On()){const n=`vue-${t}-${e.uid}`,o=n+":end";Ue.mark(o),Ue.measure(`<${jn(e,e.type)}> ${t}`,n,o),Ue.clearMarks(n),Ue.clearMarks(o)}process.env.NODE_ENV!=="production"&&rl(e,t,On()?Ue.now():Date.now())}function On(){return Pt!==void 0||(typeof window<"u"&&window.performance?(Pt=!0,Ue=window.performance):Pt=!1),Pt}function oc(){const e=[];if(process.env.NODE_ENV!=="production"&&e.length){const t=e.length>1;console.warn(`Feature flag${t?"s":""} ${e.join(", ")} ${t?"are":"is"} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`)}}const ue=vl;function sc(e){return ic(e)}function ic(e,t){oc();const n=yo();n.__VUE__=!0,process.env.NODE_ENV!=="production"&&$o(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:o,remove:s,patchProp:i,createElement:r,createText:c,createComment:a,setText:f,setElementText:h,parentNode:d,nextSibling:E,setScopeId:x=Y,insertStaticContent:M}=e,R=(l,u,p,g=null,m=null,b=null,O=void 0,v=null,y=process.env.NODE_ENV!=="production"&&ft?!1:!!u.dynamicChildren)=>{if(l===u)return;l&&!It(l,u)&&(g=nn(l),Fe(l,m,b,!0),l=null),u.patchFlag===-2&&(y=!1,u.dynamicChildren=null);const{type:_,ref:w,shapeFlag:C}=u;switch(_){case Zt:Z(l,u,p,g);break;case be:z(l,u,p,g);break;case kt:l==null?ae(u,p,g,O):process.env.NODE_ENV!=="production"&&K(l,u,p,O);break;case fe:tn(l,u,p,g,m,b,O,v,y);break;default:C&1?de(l,u,p,g,m,b,O,v,y):C&6?Bo(l,u,p,g,m,b,O,v,y):C&64||C&128?_.process(l,u,p,g,m,b,O,v,y,mt):process.env.NODE_ENV!=="production"&&N("Invalid VNode type:",_,`(${typeof _})`)}w!=null&&m&&po(w,l&&l.ref,b,u||l,!u)},Z=(l,u,p,g)=>{if(l==null)o(u.el=c(u.children),p,g);else{const m=u.el=l.el;u.children!==l.children&&f(m,u.children)}},z=(l,u,p,g)=>{l==null?o(u.el=a(u.children||""),p,g):u.el=l.el},ae=(l,u,p,g)=>{[l.el,l.anchor]=M(l.children,u,p,g,l.el,l.anchor)},K=(l,u,p,g)=>{if(u.children!==l.children){const m=E(l.anchor);J(l),[u.el,u.anchor]=M(u.children,p,m,g)}else u.el=l.el,u.anchor=l.anchor},W=({el:l,anchor:u},p,g)=>{let m;for(;l&&l!==u;)m=E(l),o(l,p,g),l=m;o(u,p,g)},J=({el:l,anchor:u})=>{let p;for(;l&&l!==u;)p=E(l),s(l),l=p;s(u)},de=(l,u,p,g,m,b,O,v,y)=>{u.type==="svg"?O="svg":u.type==="math"&&(O="mathml"),l==null?$(u,p,g,m,b,O,v,y):De(l,u,m,b,O,v,y)},$=(l,u,p,g,m,b,O,v)=>{let y,_;const{props:w,shapeFlag:C,transition:D,dirs:P}=l;if(y=l.el=r(l.type,b,w&&w.is,w),C&8?h(y,l.children):C&16&&ie(l.children,y,null,g,m,Yn(l,b),O,v),P&&tt(l,null,g,"created"),se(y,l,l.scopeId,O,g),w){for(const H in w)H!=="value"&&!Ft(H)&&i(y,H,null,w[H],b,l.children,g,m,Ve);"value"in w&&i(y,"value",null,w.value,b),(_=w.onVnodeBeforeMount)&&Oe(_,g,l)}process.env.NODE_ENV!=="production"&&(Object.defineProperty(y,"__vnode",{value:l,enumerable:!1}),Object.defineProperty(y,"__vueParentComponent",{value:g,enumerable:!1})),P&&tt(l,null,g,"beforeMount");const F=rc(m,D);F&&D.beforeEnter(y),o(y,u,p),((_=w&&w.onVnodeMounted)||F||P)&&ue(()=>{_&&Oe(_,g,l),F&&D.enter(y),P&&tt(l,null,g,"mounted")},m)},se=(l,u,p,g,m)=>{if(p&&x(l,p),g)for(let b=0;b<g.length;b++)x(l,g[b]);if(m){let b=m.subTree;if(process.env.NODE_ENV!=="production"&&b.patchFlag>0&&b.patchFlag&2048&&(b=Ao(b.children)||b),u===b){const O=m.vnode;se(l,O,O.scopeId,O.slotScopeIds,m.parent)}}},ie=(l,u,p,g,m,b,O,v,y=0)=>{for(let _=y;_<l.length;_++){const w=l[_]=v?ke(l[_]):me(l[_]);R(null,w,u,p,g,m,b,O,v)}},De=(l,u,p,g,m,b,O)=>{const v=u.el=l.el;let{patchFlag:y,dynamicChildren:_,dirs:w}=u;y|=l.patchFlag&16;const C=l.props||U,D=u.props||U;let P;if(p&&nt(p,!1),(P=D.onVnodeBeforeUpdate)&&Oe(P,p,u,l),w&&tt(u,l,p,"beforeUpdate"),p&&nt(p,!0),process.env.NODE_ENV!=="production"&&ft&&(y=0,O=!1,_=null),_?(Ae(l.dynamicChildren,_,v,p,g,Yn(u,m),b),process.env.NODE_ENV!=="production"&&gn(l,u)):O||ye(l,u,v,null,p,g,Yn(u,m),b,!1),y>0){if(y&16)pe(v,u,C,D,p,g,m);else if(y&2&&C.class!==D.class&&i(v,"class",null,D.class,m),y&4&&i(v,"style",C.style,D.style,m),y&8){const F=u.dynamicProps;for(let H=0;H<F.length;H++){const B=F[H],X=C[B],he=D[B];(he!==X||B==="value")&&i(v,B,X,he,m,l.children,p,g,Ve)}}y&1&&l.children!==u.children&&h(v,u.children)}else!O&&_==null&&pe(v,u,C,D,p,g,m);((P=D.onVnodeUpdated)||w)&&ue(()=>{P&&Oe(P,p,u,l),w&&tt(u,l,p,"updated")},g)},Ae=(l,u,p,g,m,b,O)=>{for(let v=0;v<u.length;v++){const y=l[v],_=u[v],w=y.el&&(y.type===fe||!It(y,_)||y.shapeFlag&70)?d(y.el):p;R(y,_,w,null,g,m,b,O,!0)}},pe=(l,u,p,g,m,b,O)=>{if(p!==g){if(p!==U)for(const v in p)!Ft(v)&&!(v in g)&&i(l,v,p[v],null,O,u.children,m,b,Ve);for(const v in g){if(Ft(v))continue;const y=g[v],_=p[v];y!==_&&v!=="value"&&i(l,v,_,y,O,u.children,m,b,Ve)}"value"in g&&i(l,"value",p.value,g.value,O)}},tn=(l,u,p,g,m,b,O,v,y)=>{const _=u.el=l?l.el:c(""),w=u.anchor=l?l.anchor:c("");let{patchFlag:C,dynamicChildren:D,slotScopeIds:P}=u;process.env.NODE_ENV!=="production"&&(ft||C&2048)&&(C=0,y=!1,D=null),P&&(v=v?v.concat(P):P),l==null?(o(_,p,g),o(w,p,g),ie(u.children||[],p,w,m,b,O,v,y)):C>0&&C&64&&D&&l.dynamicChildren?(Ae(l.dynamicChildren,D,p,m,b,O,v),process.env.NODE_ENV!=="production"?gn(l,u):(u.key!=null||m&&u===m.subTree)&&gn(l,u,!0)):ye(l,u,p,w,m,b,O,v,y)},Bo=(l,u,p,g,m,b,O,v,y)=>{u.slotScopeIds=v,l==null?u.shapeFlag&512?m.ctx.activate(u,p,g,O,y):Re(u,p,g,m,b,O,y):ce(l,u,y)},Re=(l,u,p,g,m,b,O)=>{const v=l.component=mc(l,g,m);if(process.env.NODE_ENV!=="production"&&v.type.__hmrId&&zr(v),process.env.NODE_ENV!=="production"&&(fn(l),Ce(v,"mount")),Ro(l)&&(v.ctx.renderer=mt),process.env.NODE_ENV!=="production"&&Ce(v,"init"),Ec(v),process.env.NODE_ENV!=="production"&&Se(v,"init"),v.asyncDep){if(m&&m.registerDep(v,L),!l.el){const y=v.subTree=We(be);z(null,y,u,p)}}else L(v,l,u,p,m,b,O);process.env.NODE_ENV!=="production"&&(dn(),Se(v,"mount"))},ce=(l,u,p)=>{const g=u.component=l.component;if(hl(l,u,p))if(g.asyncDep&&!g.asyncResolved){process.env.NODE_ENV!=="production"&&fn(u),j(g,u,p),process.env.NODE_ENV!=="production"&&dn();return}else g.next=u,Jr(g.update),g.effect.dirty=!0,g.update();else u.el=l.el,g.vnode=u},L=(l,u,p,g,m,b,O)=>{const v=()=>{if(l.isMounted){let{next:w,bu:C,u:D,parent:P,vnode:F}=l;{const _t=$i(l);if(_t){w&&(w.el=F.el,j(l,w,O)),_t.asyncDep.then(()=>{l.isUnmounted||v()});return}}let H=w,B;process.env.NODE_ENV!=="production"&&fn(w||l.vnode),nt(l,!1),w?(w.el=F.el,j(l,w,O)):w=F,C&&vt(C),(B=w.props&&w.props.onVnodeBeforeUpdate)&&Oe(B,P,w,F),nt(l,!0),process.env.NODE_ENV!=="production"&&Ce(l,"render");const X=Gn(l);process.env.NODE_ENV!=="production"&&Se(l,"render");const he=l.subTree;l.subTree=X,process.env.NODE_ENV!=="production"&&Ce(l,"patch"),R(he,X,d(he.el),nn(he),l,m,b),process.env.NODE_ENV!=="production"&&Se(l,"patch"),w.el=X.el,H===null&&gl(l,X.el),D&&ue(D,m),(B=w.props&&w.props.onVnodeUpdated)&&ue(()=>Oe(B,P,w,F),m),process.env.NODE_ENV!=="production"&&hi(l),process.env.NODE_ENV!=="production"&&dn()}else{let w;const{el:C,props:D}=u,{bm:P,m:F,parent:H}=l,B=pn(u);if(nt(l,!1),P&&vt(P),!B&&(w=D&&D.onVnodeBeforeMount)&&Oe(w,H,u),nt(l,!0),C&&Bn){const X=()=>{process.env.NODE_ENV!=="production"&&Ce(l,"render"),l.subTree=Gn(l),process.env.NODE_ENV!=="production"&&Se(l,"render"),process.env.NODE_ENV!=="production"&&Ce(l,"hydrate"),Bn(C,l.subTree,l,m,null),process.env.NODE_ENV!=="production"&&Se(l,"hydrate")};B?u.type.__asyncLoader().then(()=>!l.isUnmounted&&X()):X()}else{process.env.NODE_ENV!=="production"&&Ce(l,"render");const X=l.subTree=Gn(l);process.env.NODE_ENV!=="production"&&Se(l,"render"),process.env.NODE_ENV!=="production"&&Ce(l,"patch"),R(null,X,p,g,l,m,b),process.env.NODE_ENV!=="production"&&Se(l,"patch"),u.el=X.el}if(F&&ue(F,m),!B&&(w=D&&D.onVnodeMounted)){const X=u;ue(()=>Oe(w,H,X),m)}(u.shapeFlag&256||H&&pn(H.vnode)&&H.vnode.shapeFlag&256)&&l.a&&ue(l.a,m),l.isMounted=!0,process.env.NODE_ENV!=="production"&&nl(l),u=p=g=null}},y=l.effect=new wo(v,Y,()=>Pn(_),l.scope),_=l.update=()=>{y.dirty&&y.run()};_.id=l.uid,nt(l,!0),process.env.NODE_ENV!=="production"&&(y.onTrack=l.rtc?w=>vt(l.rtc,w):void 0,y.onTrigger=l.rtg?w=>vt(l.rtg,w):void 0,_.ownerInstance=l),_()},j=(l,u,p)=>{u.component=l;const g=l.vnode.props;l.vnode=u,l.next=null,Jl(l,u.props,g,p),nc(l,u.children,p),Ze(),os(l),et()},ye=(l,u,p,g,m,b,O,v,y=!1)=>{const _=l&&l.children,w=l?l.shapeFlag:0,C=u.children,{patchFlag:D,shapeFlag:P}=u;if(D>0){if(D&128){Ct(_,C,p,g,m,b,O,v,y);return}else if(D&256){Ln(_,C,p,g,m,b,O,v,y);return}}P&8?(w&16&&Ve(_,m,b),C!==_&&h(p,C)):w&16?P&16?Ct(_,C,p,g,m,b,O,v,y):Ve(_,m,b,!0):(w&8&&h(p,""),P&16&&ie(C,p,g,m,b,O,v,y))},Ln=(l,u,p,g,m,b,O,v,y)=>{l=l||Nt,u=u||Nt;const _=l.length,w=u.length,C=Math.min(_,w);let D;for(D=0;D<C;D++){const P=u[D]=y?ke(u[D]):me(u[D]);R(l[D],P,p,null,m,b,O,v,y)}_>w?Ve(l,m,b,!0,!1,C):ie(u,p,g,m,b,O,v,y,C)},Ct=(l,u,p,g,m,b,O,v,y)=>{let _=0;const w=u.length;let C=l.length-1,D=w-1;for(;_<=C&&_<=D;){const P=l[_],F=u[_]=y?ke(u[_]):me(u[_]);if(It(P,F))R(P,F,p,null,m,b,O,v,y);else break;_++}for(;_<=C&&_<=D;){const P=l[C],F=u[D]=y?ke(u[D]):me(u[D]);if(It(P,F))R(P,F,p,null,m,b,O,v,y);else break;C--,D--}if(_>C){if(_<=D){const P=D+1,F=P<w?u[P].el:g;for(;_<=D;)R(null,u[_]=y?ke(u[_]):me(u[_]),p,F,m,b,O,v,y),_++}}else if(_>D)for(;_<=C;)Fe(l[_],m,b,!0),_++;else{const P=_,F=_,H=new Map;for(_=F;_<=D;_++){const re=u[_]=y?ke(u[_]):me(u[_]);re.key!=null&&(process.env.NODE_ENV!=="production"&&H.has(re.key)&&N("Duplicate keys found during update:",JSON.stringify(re.key),"Make sure keys are unique."),H.set(re.key,_))}let B,X=0;const he=D-F+1;let _t=!1,Wo=0;const St=new Array(he);for(_=0;_<he;_++)St[_]=0;for(_=P;_<=C;_++){const re=l[_];if(X>=he){Fe(re,m,b,!0);continue}let Ne;if(re.key!=null)Ne=H.get(re.key);else for(B=F;B<=D;B++)if(St[B-F]===0&&It(re,u[B])){Ne=B;break}Ne===void 0?Fe(re,m,b,!0):(St[Ne-F]=_+1,Ne>=Wo?Wo=Ne:_t=!0,R(re,u[Ne],p,null,m,b,O,v,y),X++)}const Go=_t?lc(St):Nt;for(B=Go.length-1,_=he-1;_>=0;_--){const re=F+_,Ne=u[re],qo=re+1<w?u[re+1].el:g;St[_]===0?R(null,Ne,p,qo,m,b,O,v,y):_t&&(B<0||_!==Go[B]?gt(Ne,p,qo,2):B--)}}},gt=(l,u,p,g,m=null)=>{const{el:b,type:O,transition:v,children:y,shapeFlag:_}=l;if(_&6){gt(l.component.subTree,u,p,g);return}if(_&128){l.suspense.move(u,p,g);return}if(_&64){O.move(l,u,p,mt);return}if(O===fe){o(b,u,p);for(let C=0;C<y.length;C++)gt(y[C],u,p,g);o(l.anchor,u,p);return}if(O===kt){W(l,u,p);return}if(g!==2&&_&1&&v)if(g===0)v.beforeEnter(b),o(b,u,p),ue(()=>v.enter(b),m);else{const{leave:C,delayLeave:D,afterLeave:P}=v,F=()=>o(b,u,p),H=()=>{C(b,()=>{F(),P&&P()})};D?D(b,F,H):H()}else o(b,u,p)},Fe=(l,u,p,g=!1,m=!1)=>{const{type:b,props:O,ref:v,children:y,dynamicChildren:_,shapeFlag:w,patchFlag:C,dirs:D}=l;if(v!=null&&po(v,null,p,l,!0),w&256){u.ctx.deactivate(l);return}const P=w&1&&D,F=!pn(l);let H;if(F&&(H=O&&O.onVnodeBeforeUnmount)&&Oe(H,u,l),w&6)Gi(l.component,p,g);else{if(w&128){l.suspense.unmount(p,g);return}P&&tt(l,null,u,"beforeUnmount"),w&64?l.type.remove(l,u,p,m,mt,g):_&&(b!==fe||C>0&&C&64)?Ve(_,u,p,!1,!0):(b===fe&&C&384||!m&&w&16)&&Ve(y,u,p),g&&kn(l)}(F&&(H=O&&O.onVnodeUnmounted)||P)&&ue(()=>{H&&Oe(H,u,l),P&&tt(l,null,u,"unmounted")},p)},kn=l=>{const{type:u,el:p,anchor:g,transition:m}=l;if(u===fe){process.env.NODE_ENV!=="production"&&l.patchFlag>0&&l.patchFlag&2048&&m&&!m.persisted?l.children.forEach(O=>{O.type===be?s(O.el):kn(O)}):Wi(p,g);return}if(u===kt){J(l);return}const b=()=>{s(p),m&&!m.persisted&&m.afterLeave&&m.afterLeave()};if(l.shapeFlag&1&&m&&!m.persisted){const{leave:O,delayLeave:v}=m,y=()=>O(p,b);v?v(l.el,b,y):y()}else b()},Wi=(l,u)=>{let p;for(;l!==u;)p=E(l),s(l),l=p;s(u)},Gi=(l,u,p)=>{process.env.NODE_ENV!=="production"&&l.type.__hmrId&&Xr(l);const{bum:g,scope:m,update:b,subTree:O,um:v}=l;g&&vt(g),m.stop(),b&&(b.active=!1,Fe(O,l,u,p)),v&&ue(v,u),ue(()=>{l.isUnmounted=!0},u),u&&u.pendingBranch&&!u.isUnmounted&&l.asyncDep&&!l.asyncResolved&&l.suspenseId===u.pendingId&&(u.deps--,u.deps===0&&u.resolve()),process.env.NODE_ENV!=="production"&&sl(l)},Ve=(l,u,p,g=!1,m=!1,b=0)=>{for(let O=b;O<l.length;O++)Fe(l[O],u,p,g,m)},nn=l=>l.shapeFlag&6?nn(l.component.subTree):l.shapeFlag&128?l.suspense.next():E(l.anchor||l.el);let Hn=!1;const Ko=(l,u,p)=>{l==null?u._vnode&&Fe(u._vnode,null,null,!0):R(u._vnode||null,l,u,null,null,null,p),Hn||(Hn=!0,os(),fi(),Hn=!1),u._vnode=l},mt={p:R,um:Fe,m:gt,r:kn,mt:Re,mc:ie,pc:ye,pbc:Ae,n:nn,o:e};let Un,Bn;return t&&([Un,Bn]=t(mt)),{render:Ko,hydrate:Un,createApp:Kl(Ko,Un)}}function Yn({type:e,props:t},n){return n==="svg"&&e==="foreignObject"||n==="mathml"&&e==="annotation-xml"&&t&&t.encoding&&t.encoding.includes("html")?void 0:n}function nt({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function rc(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function gn(e,t,n=!1){const o=e.children,s=t.children;if(V(o)&&V(s))for(let i=0;i<o.length;i++){const r=o[i];let c=s[i];c.shapeFlag&1&&!c.dynamicChildren&&((c.patchFlag<=0||c.patchFlag===32)&&(c=s[i]=ke(s[i]),c.el=r.el),n||gn(r,c)),c.type===Zt&&(c.el=r.el),process.env.NODE_ENV!=="production"&&c.type===be&&!c.el&&(c.el=r.el)}}function lc(e){const t=e.slice(),n=[0];let o,s,i,r,c;const a=e.length;for(o=0;o<a;o++){const f=e[o];if(f!==0){if(s=n[n.length-1],e[s]<f){t[o]=s,n.push(o);continue}for(i=0,r=n.length-1;i<r;)c=i+r>>1,e[n[c]]<f?i=c+1:r=c;f<e[n[i]]&&(i>0&&(t[o]=n[i-1]),n[i]=o)}}for(i=n.length,r=n[i-1];i-- >0;)n[i]=r,r=t[r];return n}function $i(e){const t=e.subTree.component;if(t)return t.asyncDep&&!t.asyncResolved?t:$i(t)}const cc=e=>e.__isTeleport,fe=Symbol.for("v-fgt"),Zt=Symbol.for("v-txt"),be=Symbol.for("v-cmt"),kt=Symbol.for("v-stc"),Ht=[];let ve=null;function At(e=!1){Ht.push(ve=e?null:[])}function uc(){Ht.pop(),ve=Ht[Ht.length-1]||null}let Gt=1;function ms(e){Gt+=e}function ac(e){return e.dynamicChildren=Gt>0?ve||Nt:null,uc(),Gt>0&&ve&&ve.push(e),e}function Rt(e,t,n,o,s,i){return ac(S(e,t,n,o,s,i,!0))}function Ho(e){return e?e.__v_isVNode===!0:!1}function It(e,t){return process.env.NODE_ENV!=="production"&&t.shapeFlag&6&&Et.has(t.type)?(e.shapeFlag&=-257,t.shapeFlag&=-513,!1):e.type===t.type&&e.key===t.key}const fc=(...e)=>Ai(...e),An="__vInternal",Mi=({key:e})=>e??null,mn=({ref:e,ref_key:t,ref_for:n})=>(typeof e=="number"&&(e=""+e),e!=null?q(e)||te(e)||T(e)?{i:oe,r:e,k:t,f:!!n}:e:null);function S(e,t=null,n=null,o=0,s=null,i=e===fe?0:1,r=!1,c=!1){const a={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Mi(t),ref:t&&mn(t),scopeId:$n,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:i,patchFlag:o,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:oe};return c?(Uo(a,n),i&128&&e.normalize(a)):n&&(a.shapeFlag|=q(n)?8:16),process.env.NODE_ENV!=="production"&&a.key!==a.key&&N("VNode created with invalid key (NaN). VNode type:",a.type),Gt>0&&!r&&ve&&(a.patchFlag>0||i&6)&&a.patchFlag!==32&&ve.push(a),a}const We=process.env.NODE_ENV!=="production"?fc:Ai;function Ai(e,t=null,n=null,o=0,s=null,i=!1){if((!e||e===ml)&&(process.env.NODE_ENV!=="production"&&!e&&N(`Invalid vnode type when creating vnode: ${e}.`),e=be),Ho(e)){const c=Qe(e,t,!0);return n&&Uo(c,n),Gt>0&&!i&&ve&&(c.shapeFlag&6?ve[ve.indexOf(e)]=c:ve.push(c)),c.patchFlag|=-2,c}if(Hi(e)&&(e=e.__vccOpts),t){t=dc(t);let{class:c,style:a}=t;c&&!q(c)&&(t.class=xt(c)),k(a)&&(no(a)&&!V(a)&&(a=G({},a)),t.style=No(a))}const r=q(e)?1:_l(e)?128:cc(e)?64:k(e)?4:T(e)?2:0;return process.env.NODE_ENV!=="production"&&r&4&&no(e)&&(e=I(e),N("Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.",`
Component that was made reactive: `,e)),S(e,t,n,o,s,r,i,!0)}function dc(e){return e?no(e)||An in e?G({},e):e:null}function Qe(e,t,n=!1){const{props:o,ref:s,patchFlag:i,children:r}=e,c=t?pc(o||{},t):o;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:c,key:c&&Mi(c),ref:t&&t.ref?n&&s?V(s)?s.concat(mn(t)):[s,mn(t)]:mn(t):s,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:process.env.NODE_ENV!=="production"&&i===-1&&V(r)?r.map(Ri):r,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==fe?i===-1?16:i|16:i,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Qe(e.ssContent),ssFallback:e.ssFallback&&Qe(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function Ri(e){const t=Qe(e);return V(e.children)&&(t.children=e.children.map(Ri)),t}function wn(e=" ",t=0){return We(Zt,null,e,t)}function Fi(e,t){const n=We(kt,null,e);return n.staticCount=t,n}function me(e){return e==null||typeof e=="boolean"?We(be):V(e)?We(fe,null,e.slice()):typeof e=="object"?ke(e):We(Zt,null,String(e))}function ke(e){return e.el===null&&e.patchFlag!==-1||e.memo?e:Qe(e)}function Uo(e,t){let n=0;const{shapeFlag:o}=e;if(t==null)t=null;else if(V(t))n=16;else if(typeof t=="object")if(o&65){const s=t.default;s&&(s._c&&(s._d=!1),Uo(e,s()),s._c&&(s._d=!0));return}else{n=32;const s=t._;!s&&!(An in t)?t._ctx=oe:s===3&&oe&&(oe.slots._===1?t._=1:(t._=2,e.patchFlag|=1024))}else T(t)?(t={default:t,_ctx:oe},n=32):(t=String(t),o&64?(n=16,t=[wn(t)]):n=8);e.children=t,e.shapeFlag|=n}function pc(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const s in o)if(s==="class")t.class!==o.class&&(t.class=xt([t.class,o.class]));else if(s==="style")t.style=No([t.style,o.style]);else if(Jt(s)){const i=t[s],r=o[s];r&&i!==r&&!(V(i)&&i.includes(r))&&(t[s]=i?[].concat(i,r):r)}else s!==""&&(t[s]=o[s])}return t}function Oe(e,t,n,o=null){Ee(e,t,7,[n,o])}const hc=Di();let gc=0;function mc(e,t,n){const o=e.type,s=(t?t.appContext:e.appContext)||hc,i={uid:gc++,vnode:e,type:o,parent:t,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,scope:new dr(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(s.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Ci(o,s),emitsOptions:mi(o,s),emit:null,emitted:null,propsDefaults:U,inheritAttrs:o.inheritAttrs,ctx:U,data:U,props:U,attrs:U,slots:U,refs:U,setupState:U,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return process.env.NODE_ENV!=="production"?i.ctx=Ml(i):i.ctx={_:i},i.root=t?t.root:i,i.emit=cl.bind(null,i),e.ce&&e.ce(i),i}let Q=null;const _c=()=>Q||oe;let xn,ho;{const e=yo(),t=(n,o)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(o),i=>{s.length>1?s.forEach(r=>r(i)):s[0](i)}};xn=t("__VUE_INSTANCE_SETTERS__",n=>Q=n),ho=t("__VUE_SSR_SETTERS__",n=>Rn=n)}const en=e=>{const t=Q;return xn(e),e.scope.on(),()=>{e.scope.off(),xn(t)}},_s=()=>{Q&&Q.scope.off(),xn(null)},vc=$e("slot,component");function go(e,{isNativeTag:t}){(vc(e)||t(e))&&N("Do not use built-in or reserved HTML elements as component id: "+e)}function ji(e){return e.vnode.shapeFlag&4}let Rn=!1;function Ec(e,t=!1){t&&ho(t);const{props:n,children:o}=e.vnode,s=ji(e);Gl(e,n,s,t),tc(e,o);const i=s?bc(e,t):void 0;return t&&ho(!1),i}function bc(e,t){var n;const o=e.type;if(process.env.NODE_ENV!=="production"){if(o.name&&go(o.name,e.appContext.config),o.components){const i=Object.keys(o.components);for(let r=0;r<i.length;r++)go(i[r],e.appContext.config)}if(o.directives){const i=Object.keys(o.directives);for(let r=0;r<i.length;r++)bi(i[r])}o.compilerOptions&&yc()&&N('"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.')}e.accessCache=Object.create(null),e.proxy=ni(new Proxy(e.ctx,wi)),process.env.NODE_ENV!=="production"&&Al(e);const{setup:s}=o;if(s){const i=e.setupContext=s.length>1?Oc(e):null,r=en(e);Ze();const c=Pe(s,e,0,[process.env.NODE_ENV!=="production"?bt(e.props):e.props,i]);if(et(),r(),vo(c)){if(c.then(_s,_s),t)return c.then(a=>{vs(e,a,t)}).catch(a=>{Xt(a,e,0)});if(e.asyncDep=c,process.env.NODE_ENV!=="production"&&!e.suspense){const a=(n=o.name)!=null?n:"Anonymous";N(`Component <${a}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`)}}else vs(e,c,t)}else Li(e,t)}function vs(e,t,n){T(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:k(t)?(process.env.NODE_ENV!=="production"&&Ho(t)&&N("setup() should not return VNodes directly - return a render function instead."),process.env.NODE_ENV!=="production"&&(e.devtoolsRawSetupState=t),e.setupState=ii(t),process.env.NODE_ENV!=="production"&&Rl(e)):process.env.NODE_ENV!=="production"&&t!==void 0&&N(`setup() should return an object. Received: ${t===null?"null":typeof t}`),Li(e,n)}let mo;const yc=()=>!mo;function Li(e,t,n){const o=e.type;if(!e.render){if(!t&&mo&&!o.render){const s=o.template||Lo(e).template;if(s){process.env.NODE_ENV!=="production"&&Ce(e,"compile");const{isCustomElement:i,compilerOptions:r}=e.appContext.config,{delimiters:c,compilerOptions:a}=o,f=G(G({isCustomElement:i,delimiters:c},r),a);o.render=mo(s,f),process.env.NODE_ENV!=="production"&&Se(e,"compile")}}e.render=o.render||Y}{const s=en(e);Ze();try{jl(e)}finally{et(),s()}}process.env.NODE_ENV!=="production"&&!o.render&&e.render===Y&&!t&&(o.template?N('Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".'):N("Component is missing template or render function."))}function Es(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,process.env.NODE_ENV!=="production"?{get(t,n){return yn(),ee(e,"get","$attrs"),t[n]},set(){return N("setupContext.attrs is readonly."),!1},deleteProperty(){return N("setupContext.attrs is readonly."),!1}}:{get(t,n){return ee(e,"get","$attrs"),t[n]}}))}function Nc(e){return e.slotsProxy||(e.slotsProxy=new Proxy(e.slots,{get(t,n){return ee(e,"get","$slots"),t[n]}}))}function Oc(e){const t=n=>{if(process.env.NODE_ENV!=="production"&&(e.exposed&&N("expose() should be called only once per setup()."),n!=null)){let o=typeof n;o==="object"&&(V(n)?o="array":te(n)&&(o="ref")),o!=="object"&&N(`expose() should be passed a plain object, received ${o}.`)}e.exposed=n||{}};return process.env.NODE_ENV!=="production"?Object.freeze({get attrs(){return Es(e)},get slots(){return Nc(e)},get emit(){return(n,...o)=>e.emit(n,...o)},expose:t}):{get attrs(){return Es(e)},slots:e.slots,emit:e.emit,expose:t}}function Fn(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(ii(ni(e.exposed)),{get(t,n){if(n in t)return t[n];if(n in dt)return dt[n](e)},has(t,n){return n in t||n in dt}}))}const wc=/(?:^|[-_])(\w)/g,xc=e=>e.replace(wc,t=>t.toUpperCase()).replace(/[-_]/g,"");function ki(e,t=!0){return T(e)?e.displayName||e.name:e.name||t&&e.__name}function jn(e,t,n=!1){let o=ki(t);if(!o&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(o=s[1])}if(!o&&e&&e.parent){const s=i=>{for(const r in i)if(i[r]===t)return r};o=s(e.components||e.parent.type.components)||s(e.appContext.components)}return o?xc(o):n?"App":"Anonymous"}function Hi(e){return T(e)&&"__vccOpts"in e}const Dc=(e,t)=>{const n=Rr(e,t,Rn);if(process.env.NODE_ENV!=="production"){const o=_c();o&&o.appContext.config.warnRecursiveComputed&&(n._warnRecursive=!0)}return n};function Vc(){if(process.env.NODE_ENV==="production"||typeof window>"u")return;const e={style:"color:#3ba776"},t={style:"color:#1677ff"},n={style:"color:#f5222d"},o={style:"color:#eb2f96"},s={header(d){return k(d)?d.__isVue?["div",e,"VueInstance"]:te(d)?["div",{},["span",e,h(d)],"<",c(d.value),">"]:ct(d)?["div",{},["span",e,ut(d)?"ShallowReactive":"Reactive"],"<",c(d),`>${Xe(d)?" (readonly)":""}`]:Xe(d)?["div",{},["span",e,ut(d)?"ShallowReadonly":"Readonly"],"<",c(d),">"]:null:null},hasBody(d){return d&&d.__isVue},body(d){if(d&&d.__isVue)return["div",{},...i(d.$)]}};function i(d){const E=[];d.type.props&&d.props&&E.push(r("props",I(d.props))),d.setupState!==U&&E.push(r("setup",d.setupState)),d.data!==U&&E.push(r("data",I(d.data)));const x=a(d,"computed");x&&E.push(r("computed",x));const M=a(d,"inject");return M&&E.push(r("injected",M)),E.push(["div",{},["span",{style:o.style+";opacity:0.66"},"$ (internal): "],["object",{object:d}]]),E}function r(d,E){return E=G({},E),Object.keys(E).length?["div",{style:"line-height:1.25em;margin-bottom:0.6em"},["div",{style:"color:#476582"},d],["div",{style:"padding-left:1.25em"},...Object.keys(E).map(x=>["div",{},["span",o,x+": "],c(E[x],!1)])]]:["span",{}]}function c(d,E=!0){return typeof d=="number"?["span",t,d]:typeof d=="string"?["span",n,JSON.stringify(d)]:typeof d=="boolean"?["span",o,d]:k(d)?["object",{object:E?I(d):d}]:["span",n,String(d)]}function a(d,E){const x=d.type;if(T(x))return;const M={};for(const R in d.ctx)f(x,R,E)&&(M[R]=d.ctx[R]);return M}function f(d,E,x){const M=d[x];if(V(M)&&M.includes(E)||k(M)&&E in M||d.extends&&f(d.extends,E,x)||d.mixins&&d.mixins.some(R=>f(R,E,x)))return!0}function h(d){return ut(d)?"ShallowRef":d.effect?"ComputedRef":"Ref"}window.devtoolsFormatters?window.devtoolsFormatters.push(s):window.devtoolsFormatters=[s]}const bs="3.4.21",Ge=process.env.NODE_ENV!=="production"?N:Y;process.env.NODE_ENV;process.env.NODE_ENV;/**
* @vue/runtime-dom v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Cc="http://www.w3.org/2000/svg",Sc="http://www.w3.org/1998/Math/MathML",He=typeof document<"u"?document:null,ys=He&&He.createElement("template"),Tc={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const s=t==="svg"?He.createElementNS(Cc,e):t==="mathml"?He.createElementNS(Sc,e):He.createElement(e,n?{is:n}:void 0);return e==="select"&&o&&o.multiple!=null&&s.setAttribute("multiple",o.multiple),s},createText:e=>He.createTextNode(e),createComment:e=>He.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>He.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,s,i){const r=n?n.previousSibling:t.lastChild;if(s&&(s===i||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),!(s===i||!(s=s.nextSibling)););else{ys.innerHTML=o==="svg"?`<svg>${e}</svg>`:o==="mathml"?`<math>${e}</math>`:e;const c=ys.content;if(o==="svg"||o==="mathml"){const a=c.firstChild;for(;a.firstChild;)c.appendChild(a.firstChild);c.removeChild(a)}t.insertBefore(c,n)}return[r?r.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},Pc=Symbol("_vtc");function Ic(e,t,n){const o=e[Pc];o&&(t=(t?[t,...o]:[...o]).join(" ")),t==null?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}const Ns=Symbol("_vod"),$c=Symbol("_vsh");process.env.NODE_ENV;const Mc=Symbol(process.env.NODE_ENV!=="production"?"CSS_VAR_TEXT":""),Ac=/(^|;)\s*display\s*:/;function Rc(e,t,n){const o=e.style,s=q(n);let i=!1;if(n&&!s){if(t)if(q(t))for(const r of t.split(";")){const c=r.slice(0,r.indexOf(":")).trim();n[c]==null&&_n(o,c,"")}else for(const r in t)n[r]==null&&_n(o,r,"");for(const r in n)r==="display"&&(i=!0),_n(o,r,n[r])}else if(s){if(t!==n){const r=o[Mc];r&&(n+=";"+r),o.cssText=n,i=Ac.test(n)}}else t&&e.removeAttribute("style");Ns in e&&(e[Ns]=i?o.display:"",e[$c]&&(o.display="none"))}const Fc=/[^\\];\s*$/,Os=/\s*!important$/;function _n(e,t,n){if(V(n))n.forEach(o=>_n(e,t,o));else if(n==null&&(n=""),process.env.NODE_ENV!=="production"&&Fc.test(n)&&Ge(`Unexpected semicolon at the end of '${t}' style value: '${n}'`),t.startsWith("--"))e.setProperty(t,n);else{const o=jc(e,t);Os.test(n)?e.setProperty(Je(o),n.replace(Os,""),"important"):e[o]=n}}const ws=["Webkit","Moz","ms"],zn={};function jc(e,t){const n=zn[t];if(n)return n;let o=wt(t);if(o!=="filter"&&o in e)return zn[t]=o;o=Vn(o);for(let s=0;s<ws.length;s++){const i=ws[s]+o;if(i in e)return zn[t]=i}return t}const xs="http://www.w3.org/1999/xlink";function Lc(e,t,n,o,s){if(o&&t.startsWith("xlink:"))n==null?e.removeAttributeNS(xs,t.slice(6,t.length)):e.setAttributeNS(xs,t,n);else{const i=ur(t);n==null||i&&!Ls(n)?e.removeAttribute(t):e.setAttribute(t,i?"":n)}}function kc(e,t,n,o,s,i,r){if(t==="innerHTML"||t==="textContent"){o&&r(o,s,i),e[t]=n??"";return}const c=e.tagName;if(t==="value"&&c!=="PROGRESS"&&!c.includes("-")){const f=c==="OPTION"?e.getAttribute("value")||"":e.value,h=n??"";(f!==h||!("_value"in e))&&(e.value=h),n==null&&e.removeAttribute(t),e._value=n;return}let a=!1;if(n===""||n==null){const f=typeof e[t];f==="boolean"?n=Ls(n):n==null&&f==="string"?(n="",a=!0):f==="number"&&(n=0,a=!0)}try{e[t]=n}catch(f){process.env.NODE_ENV!=="production"&&!a&&Ge(`Failed setting prop "${t}" on <${c.toLowerCase()}>: value ${n} is invalid.`,f)}a&&e.removeAttribute(t)}function Be(e,t,n,o){e.addEventListener(t,n,o)}function Hc(e,t,n,o){e.removeEventListener(t,n,o)}const Ds=Symbol("_vei");function Uc(e,t,n,o,s=null){const i=e[Ds]||(e[Ds]={}),r=i[t];if(o&&r)r.value=o;else{const[c,a]=Bc(t);if(o){const f=i[t]=Gc(o,s);Be(e,c,f,a)}else r&&(Hc(e,c,r,a),i[t]=void 0)}}const Vs=/(?:Once|Passive|Capture)$/;function Bc(e){let t;if(Vs.test(e)){t={};let o;for(;o=e.match(Vs);)e=e.slice(0,e.length-o[0].length),t[o[0].toLowerCase()]=!0}return[e[2]===":"?e.slice(3):Je(e.slice(2)),t]}let Xn=0;const Kc=Promise.resolve(),Wc=()=>Xn||(Kc.then(()=>Xn=0),Xn=Date.now());function Gc(e,t){const n=o=>{if(!o._vts)o._vts=Date.now();else if(o._vts<=n.attached)return;Ee(qc(o,n.value),t,5,[o])};return n.value=e,n.attached=Wc(),n}function qc(e,t){if(V(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map(o=>s=>!s._stopped&&o&&o(s))}else return t}const Cs=e=>e.charCodeAt(0)===111&&e.charCodeAt(1)===110&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123,Jc=(e,t,n,o,s,i,r,c,a)=>{const f=s==="svg";t==="class"?Ic(e,o,f):t==="style"?Rc(e,n,o):Jt(t)?vn(t)||Uc(e,t,n,o,r):(t[0]==="."?(t=t.slice(1),!0):t[0]==="^"?(t=t.slice(1),!1):Yc(e,t,o,f))?kc(e,t,o,i,r,c,a):(t==="true-value"?e._trueValue=o:t==="false-value"&&(e._falseValue=o),Lc(e,t,o,f))};function Yc(e,t,n,o){if(o)return!!(t==="innerHTML"||t==="textContent"||t in e&&Cs(t)&&T(n));if(t==="spellcheck"||t==="draggable"||t==="translate"||t==="form"||t==="list"&&e.tagName==="INPUT"||t==="type"&&e.tagName==="TEXTAREA")return!1;if(t==="width"||t==="height"){const s=e.tagName;if(s==="IMG"||s==="VIDEO"||s==="CANVAS"||s==="SOURCE")return!1}return Cs(t)&&q(n)?!1:t in e}const Dt=e=>{const t=e.props["onUpdate:modelValue"]||!1;return V(t)?n=>vt(t,n):t};function zc(e){e.target.composing=!0}function Ss(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const Ie=Symbol("_assign"),Ts={created(e,{modifiers:{lazy:t,trim:n,number:o}},s){e[Ie]=Dt(s);const i=o||s.props&&s.props.type==="number";Be(e,t?"change":"input",r=>{if(r.target.composing)return;let c=e.value;n&&(c=c.trim()),i&&(c=Ut(c)),e[Ie](c)}),n&&Be(e,"change",()=>{e.value=e.value.trim()}),t||(Be(e,"compositionstart",zc),Be(e,"compositionend",Ss),Be(e,"change",Ss))},mounted(e,{value:t}){e.value=t??""},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:o,number:s}},i){if(e[Ie]=Dt(i),e.composing)return;const r=s||e.type==="number"?Ut(e.value):e.value,c=t??"";r!==c&&(document.activeElement===e&&e.type!=="range"&&(n||o&&e.value.trim()===c)||(e.value=c))}},Ps={deep:!0,created(e,t,n){e[Ie]=Dt(n),Be(e,"change",()=>{const o=e._modelValue,s=qt(e),i=e.checked,r=e[Ie];if(V(o)){const c=Oo(o,s),a=c!==-1;if(i&&!a)r(o.concat(s));else if(!i&&a){const f=[...o];f.splice(c,1),r(f)}}else if(Vt(o)){const c=new Set(o);i?c.add(s):c.delete(s),r(c)}else r(Ui(e,i))})},mounted:Is,beforeUpdate(e,t,n){e[Ie]=Dt(n),Is(e,t,n)}};function Is(e,{value:t,oldValue:n},o){e._modelValue=t,V(t)?e.checked=Oo(t,o.props.value)>-1:Vt(t)?e.checked=t.has(o.props.value):t!==n&&(e.checked=zt(t,Ui(e,!0)))}const Xc={deep:!0,created(e,{value:t,modifiers:{number:n}},o){const s=Vt(t);Be(e,"change",()=>{const i=Array.prototype.filter.call(e.options,r=>r.selected).map(r=>n?Ut(qt(r)):qt(r));e[Ie](e.multiple?s?new Set(i):i:i[0]),e._assigning=!0,ci(()=>{e._assigning=!1})}),e[Ie]=Dt(o)},mounted(e,{value:t,modifiers:{number:n}}){$s(e,t,n)},beforeUpdate(e,t,n){e[Ie]=Dt(n)},updated(e,{value:t,modifiers:{number:n}}){e._assigning||$s(e,t,n)}};function $s(e,t,n){const o=e.multiple,s=V(t);if(o&&!s&&!Vt(t)){process.env.NODE_ENV!=="production"&&Ge(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`);return}for(let i=0,r=e.options.length;i<r;i++){const c=e.options[i],a=qt(c);if(o)if(s){const f=typeof a;f==="string"||f==="number"?c.selected=t.includes(n?Ut(a):a):c.selected=Oo(t,a)>-1}else c.selected=t.has(a);else if(zt(qt(c),t)){e.selectedIndex!==i&&(e.selectedIndex=i);return}}!o&&e.selectedIndex!==-1&&(e.selectedIndex=-1)}function qt(e){return"_value"in e?e._value:e.value}function Ui(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const Qc=G({patchProp:Jc},Tc);let Ms;function Zc(){return Ms||(Ms=sc(Qc))}const Bi=(...e)=>{const t=Zc().createApp(...e);process.env.NODE_ENV!=="production"&&(tu(t),nu(t));const{mount:n}=t;return t.mount=o=>{const s=ou(o);if(!s)return;const i=t._component;!T(i)&&!i.render&&!i.template&&(i.template=s.innerHTML),s.innerHTML="";const r=n(s,!1,eu(s));return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),r},t};function eu(e){if(e instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&e instanceof MathMLElement)return"mathml"}function tu(e){Object.defineProperty(e.config,"isNativeTag",{value:t=>ir(t)||rr(t)||lr(t),writable:!1})}function nu(e){{const t=e.config.isCustomElement;Object.defineProperty(e.config,"isCustomElement",{get(){return t},set(){Ge("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});const n=e.config.compilerOptions,o='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc';Object.defineProperty(e.config,"compilerOptions",{get(){return Ge(o),n},set(){Ge(o)}})}}function ou(e){if(q(e)){const t=document.querySelector(e);return process.env.NODE_ENV!=="production"&&!t&&Ge(`Failed to mount app: mount target selector "${e}" returned null.`),t}return process.env.NODE_ENV!=="production"&&window.ShadowRoot&&e instanceof window.ShadowRoot&&e.mode==="closed"&&Ge('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}/**
* vue v3.4.21
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function su(){Vc()}process.env.NODE_ENV!=="production"&&su();const ht=e=>(ul("data-v-9cfbb51f"),e=e(),al(),e),iu=ht(()=>S("h2",null,"基础 Basic",-1)),ru={class:"setting-item mod-toggle"},lu=ht(()=>S("div",{class:"setting-item-info"},[S("div",{class:"setting-item-name"},"启用 Enable"),S("div",{class:"setting-item-description"},[wn(" 若关闭插件不生效"),S("br"),wn(" Turn off will disable ")])],-1)),cu={class:"setting-item-control"},uu=ht(()=>S("h2",null,"xLog",-1)),au={class:"setting-item"},fu=ht(()=>S("div",{class:"setting-item-info"},[S("div",{class:"setting-item-name"},"XLOG SIWE Token"),S("div",{class:"setting-item-description"},[wn(" 如不清楚 Token 请访问 "),S("a",{tabindex:"1",href:"https://blog.ijust.cc/play-xlog-02"},"获取帮助 Get Help")])],-1)),du={class:"setting-item-control"},pu=ht(()=>S("button",{class:"mod-cta",tabindex:"3"},"连接测试",-1)),hu={class:"setting-item"},gu=ht(()=>S("div",{class:"setting-item-info"},[S("div",{class:"setting-item-name"},"Charactor ID")],-1)),mu={class:"setting-item-control"},_u=["value","label"],vu={class:"setting-item mod-toggle"},Eu=ht(()=>S("div",{class:"setting-item-info"},[S("div",{class:"setting-item-name"},"上传是否修改图片为 IPFS"),S("div",{class:"setting-item-description"}," 在 XLOG 上是否使用 IPFS 协议展示图片等资源，上传时可单独设置 ")],-1)),bu={class:"setting-item-control"},yu={class:"setting-item-control",style:{"margin-top":"18px"}},Nu=yi({__name:"settings",props:{plugin:{}},setup(e){const t=e,n=()=>({name:"",enable:!0}),o=oo(n()),s=async()=>{const i={...o.value};await t.plugin.saveData(i),new yt.Notice("保存成功")};return Fo(async()=>{if(t.plugin){const i=await t.plugin.loadData()??n();o.value=i}}),(i,r)=>(At(),Rt(fe,null,[iu,S("div",ru,[lu,S("div",cu,[S("div",{class:xt(["checkbox-container",o.value.enable?"is-enabled":""])},[Tt(S("input",{type:"checkbox","onUpdate:modelValue":r[0]||(r[0]=c=>o.value.enable=c),tabindex:"0"},null,512),[[Ps,o.value.enable]])],2)])]),uu,S("div",au,[fu,S("div",du,[Tt(S("input",{"onUpdate:modelValue":r[1]||(r[1]=c=>o.value.name=c),type:"password",placeholder:"请输入 token",spellcheck:"false",tabindex:"2"},null,512),[[Ts,o.value.name]]),pu])]),S("div",hu,[gu,S("div",mu,[o.value.name?Tt((At(),Rt("select",{key:0,class:"dropdown","onUpdate:modelValue":r[2]||(r[2]=c=>o.value.name=c)},[(At(),Rt(fe,null,$l([],c=>S("option",{value:c.value,key:c.value,label:c.name},null,8,_u)),64))],512)),[[Xc,o.value.name]]):Tt((At(),Rt("input",{key:1,"onUpdate:modelValue":r[3]||(r[3]=c=>o.value.name=c),type:"text",placeholder:"建议通过连接测试自动填写",spellcheck:"false",tabindex:"4"},null,512)),[[Ts,o.value.name]])])]),S("div",vu,[Eu,S("div",bu,[S("div",{class:xt(["checkbox-container",o.value.name?"is-enabled":""])},[Tt(S("input",{type:"checkbox","onUpdate:modelValue":r[4]||(r[4]=c=>o.value.name=c),tabindex:"5"},null,512),[[Ps,o.value.name]])],2)])]),S("div",yu,[S("button",{onClick:r[5]||(r[5]=c=>o.value=n())},"重置配置"),S("button",{class:"mod-cta",onClick:s},"保存配置")])],64))}}),Ou=(e,t)=>{const n=e.__vccOpts||e;for(const[o,s]of t)n[o]=s;return n},wu=Ou(Nu,[["__scopeId","data-v-9cfbb51f"]]),xu=S("div",{class:"modal-bg",style:{opacity:"0.85"}},null,-1),Du={class:"modal"},Vu=S("div",{class:"modal-title"},"文章上传设置",-1),Cu={class:"modal-content"},Su=Fi('<div class="setting-item"><div class="setting-item-info"><div class="setting-item-name">标题 Title</div><div class="setting-item-description">默认读取当前标题</div></div><div class="setting-item-control"><input type="text" placeholder="留空表示默认标题" spellcheck="false" tabindex="2"></div></div><div class="setting-item"><div class="setting-item-info"><div class="setting-item-name">路径 Slug</div><div class="setting-item-description">留空默认分配</div></div><div class="setting-item-control"><input type="text" placeholder="留空表示默认" spellcheck="false" tabindex="2"></div></div><div class="setting-item"><div class="setting-item-info"><div class="setting-item-name">摘要 Description</div><div class="setting-item-description">留空默认分配</div></div><div class="setting-item-control"><input type="text" placeholder="留空表示默认" spellcheck="false" tabindex="2"></div></div><div class="setting-item"><div class="setting-item-info"><div class="setting-item-name">标签 Tags</div><div class="setting-item-description">使用中英文逗号分割</div></div><div class="setting-item-control"><input type="text" placeholder="留空表示默认" spellcheck="false" tabindex="2"></div></div>',4),Tu={class:"setting-item"},Pu=S("div",{class:"setting-item-info"},[S("div",{class:"setting-item-name"}," 图片是否上传到 IPFS Upload Image to IPFS "),S("div",{class:"setting-item-description"}," 将图片上传至 IPFS，不影响本地笔记，也会稍微增加上传的耗时。 ")],-1),Iu={class:"setting-item-control"},$u=S("input",{type:"checkbox",style:{width:"100%",height:"100%"},tabindex:"2"},null,-1),Mu=[$u],Au=Fi('<div class="setting-item"><div class="setting-item-info"><div class="setting-item-name">发布日期 Publish Time</div><div class="setting-item-description"> 默认读取 publish_time，留空表示当前日期。 <br> 支持格式 <b class="u-pop">YYYY/MM/DD HH:mm:ss</b></div></div><div class="setting-item-control"><select class="dropdown"><option value="current">使用当前时间</option><option value="create_time">使用 create_time</option><option value="custom">自定义</option></select><input type="text" placeholder="留空表示当前时间" spellcheck="false" tabindex="3"></div></div><div class="setting-item"><div class="setting-item-info"><div class="setting-item-name">关联 NoteID</div><div class="setting-item-description"> 若填写视为更新文章，留空视为创建文章 </div></div><div class="setting-item-control"><input type="text" placeholder="留空表示创建" spellcheck="false" tabindex="2"></div></div>',2),Ru={class:"modal-button-container"},Fu={class:"mod-cta"},ju=yi({__name:"modal",props:{plugin:{},modal:{},file:{}},setup(e){const t=e,n=()=>({}),o=oo(n()),s=oo(!1),i=()=>{o.value=n(),t.modal.close()};return Fo(async()=>{await t.plugin.loadData()}),(r,c)=>(At(),Rt(fe,null,[xu,S("div",Du,[S("div",{class:"modal-close-button",onClick:i}),Vu,S("div",Cu,[Su,S("div",Tu,[Pu,S("div",Iu,[S("div",{class:xt(["checkbox-container","is-enabled"])},Mu)])]),Au]),S("div",Ru,[S("button",Fu,fr(s.value?"正在上传":"开始上传"),1),S("button",{onClick:i},"取消")])])],64))}});class Ki{dataFile="";statisticsFolder=""}class As{dayCounts={};todayWordCount={}}class Lu{filePath="";file;today;currentWordCount;app;data;plugin;constructor(t,n,o){this.filePath=t,this.app=n,this.plugin=o}async loadStatisticsData(){console.info("loadStatisticsData, dataFile is "+this.filePath),this.filePath==null||this.filePath==""?(this.data=Object.assign(new As,await this.plugin.loadData()),this.removeProperties(this.data,new Ki)):(this.file=this.app.vault.getFileByPath(this.filePath),this.file==null&&(console.info("create dataFile "+this.filePath),this.file=await this.app.vault.create(this.filePath,JSON.stringify(new As))),this.data=JSON.parse(await this.app.vault.read(this.file))),this.updateDate(),Object.prototype.hasOwnProperty.call(this.data.dayCounts,this.today)?this.updateCounts():this.currentWordCount=0}removeProperties(t,n){Object.keys(n).forEach(s=>{Object.prototype.hasOwnProperty.call(t,s)&&delete t[s]})}async saveStatisticsData(){try{if(this.updateDate(),this.filePath!=null&&this.filePath!="")this.file==null&&(this.file=await this.app.vault.create(this.filePath,JSON.stringify(this.data))),await this.app.vault.modify(this.file,JSON.stringify(this.data));else{const t=await this.plugin.loadData();Object.assign(t,this.data),await this.plugin.saveData(t)}}catch(t){console.error("保存统计数据出错：",t)}}getWordCount(t){return t.length}updateWordCount(t,n){const o=this.getWordCount(t);Object.prototype.hasOwnProperty.call(this.data.dayCounts,this.today)?Object.prototype.hasOwnProperty.call(this.data.todayWordCount,n)?this.data.todayWordCount[n].current=o:this.data.todayWordCount[n]={initial:o,current:o}:(this.data.todayWordCount={},this.data.todayWordCount[n]={initial:o,current:o}),this.updateCounts()}updateDate(){const t=new Date;this.today=t.getFullYear()+"-"+(t.getMonth()+1)+"-"+t.getDate()}updateCounts(){this.currentWordCount=Object.values(this.data.todayWordCount).map(t=>Math.max(0,t.current-t.initial)).reduce((t,n)=>t+n,0),this.data.dayCounts[this.today]=this.currentWordCount}}class ku extends yt.Plugin{settings;statisticsDataManager;debouncedUpdate;statusBarItemEl;async onload(){await this.loadSettings(),await new Promise(t=>setTimeout(t,6*1e3)),await new Promise(t=>setTimeout(t,6*1e3)),this.statisticsDataManager=new Lu(this.settings.dataFile,this.app,this),await this.statisticsDataManager.loadStatisticsData(),this.debouncedUpdate=yt.debounce((t,n)=>{if(console.info("debounce updateWordCount"+n),this.settings.statisticsFolder!=null&&this.settings.statisticsFolder!=""&&this.settings.statisticsFolder!="/"&&!n.match(this.settings.statisticsFolder)){console.log("文件路径不匹配，不统计"+n);return}this.statisticsDataManager.updateWordCount(t,n)},400,!1),this.statusBarItemEl=this.addStatusBarItem(),this.registerInterval(window.setInterval(()=>{this.statusBarItemEl.setText(this.statisticsDataManager.currentWordCount+" words today ")},1e3)),this.registerEvent(this.app.workspace.on("quick-preview",this.onQuickPreview.bind(this))),this.registerInterval(window.setInterval(()=>{this.statisticsDataManager.saveStatisticsData()},1e3)),this.addSettingTab(new Rs(this.app,this)),this.addSettingTab(new Rs(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},new Ki,await this.loadData())}async saveSettings(){const t=await this.loadData();Object.assign(t,this.settings),await this.saveData(t)}onQuickPreview(t,n){this.app.workspace.getActiveViewOfType(yt.MarkdownView)&&this.debouncedUpdate(n,t.path)}}class Rs extends yt.PluginSettingTab{plugin;_vueApp;constructor(t,n){super(t,n),this.plugin=n}display(){const t=Bi(wu,{plugin:this.plugin});this._vueApp=t,t.mount(this.containerEl)}hide(){this._vueApp&&this._vueApp.unmount(),this.containerEl.empty()}}class Hu extends yt.Modal{_vueApp;plugin;file;constructor(t,n,o){super(t),this.plugin=n,this.file=o}onOpen(){const t=Bi(ju,{plugin:this.plugin,modal:this,file:this.file});this._vueApp=t,t.mount(this.containerEl)}onClose(){this._vueApp&&this._vueApp.unmount(),this.containerEl.empty()}}exports.MyPublishModal=Hu;exports.default=ku;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
