"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});const te=require("obsidian");class Ke{language="zh-cn";dataFile="";statisticsFolder="";dailyTargetWordCount=1e3}//! moment.js
//! version : 2.30.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var Ct;function l(){return Ct.apply(null,arguments)}function Ts(e){Ct=e}function F(e){return e instanceof Array||Object.prototype.toString.call(e)==="[object Array]"}function ae(e){return e!=null&&Object.prototype.toString.call(e)==="[object Object]"}function g(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function ot(e){if(Object.getOwnPropertyNames)return Object.getOwnPropertyNames(e).length===0;var t;for(t in e)if(g(e,t))return!1;return!0}function T(e){return e===void 0}function $(e){return typeof e=="number"||Object.prototype.toString.call(e)==="[object Number]"}function ke(e){return e instanceof Date||Object.prototype.toString.call(e)==="[object Date]"}function Lt(e,t){var s=[],a,r=e.length;for(a=0;a<r;++a)s.push(t(e[a],a));return s}function Q(e,t){for(var s in t)g(t,s)&&(e[s]=t[s]);return g(t,"toString")&&(e.toString=t.toString),g(t,"valueOf")&&(e.valueOf=t.valueOf),e}function U(e,t,s,a){return is(e,t,s,a,!0).utc()}function bs(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}}function c(e){return e._pf==null&&(e._pf=bs()),e._pf}var et;Array.prototype.some?et=Array.prototype.some:et=function(e){var t=Object(this),s=t.length>>>0,a;for(a=0;a<s;a++)if(a in t&&e.call(this,t[a],a,t))return!0;return!1};function lt(e){var t=null,s=!1,a=e._d&&!isNaN(e._d.getTime());if(a&&(t=c(e),s=et.call(t.parsedDateParts,function(r){return r!=null}),a=t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&s),e._strict&&(a=a&&t.charsLeftOver===0&&t.unusedTokens.length===0&&t.bigHour===void 0)),Object.isFrozen==null||!Object.isFrozen(e))e._isValid=a;else return a;return e._isValid}function Le(e){var t=U(NaN);return e!=null?Q(c(t),e):c(t).userInvalidated=!0,t}var xt=l.momentProperties=[],$e=!1;function ut(e,t){var s,a,r,i=xt.length;if(T(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),T(t._i)||(e._i=t._i),T(t._f)||(e._f=t._f),T(t._l)||(e._l=t._l),T(t._strict)||(e._strict=t._strict),T(t._tzm)||(e._tzm=t._tzm),T(t._isUTC)||(e._isUTC=t._isUTC),T(t._offset)||(e._offset=t._offset),T(t._pf)||(e._pf=c(t)),T(t._locale)||(e._locale=t._locale),i>0)for(s=0;s<i;s++)a=xt[s],r=t[a],T(r)||(e[a]=r);return e}function De(e){ut(this,e),this._d=new Date(e._d!=null?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),$e===!1&&($e=!0,l.updateOffset(this),$e=!1)}function R(e){return e instanceof De||e!=null&&e._isAMomentObject!=null}function It(e){l.suppressDeprecationWarnings===!1&&typeof console<"u"&&console.warn&&console.warn("Deprecation warning: "+e)}function P(e,t){var s=!0;return Q(function(){if(l.deprecationHandler!=null&&l.deprecationHandler(null,e),s){var a=[],r,i,n,u=arguments.length;for(i=0;i<u;i++){if(r="",typeof arguments[i]=="object"){r+=`
[`+i+"] ";for(n in arguments[0])g(arguments[0],n)&&(r+=n+": "+arguments[0][n]+", ");r=r.slice(0,-2)}else r=arguments[i];a.push(r)}It(e+`
Arguments: `+Array.prototype.slice.call(a).join("")+`
`+new Error().stack),s=!1}return t.apply(this,arguments)},t)}var Pt={};function Ut(e,t){l.deprecationHandler!=null&&l.deprecationHandler(e,t),Pt[e]||(It(t),Pt[e]=!0)}l.suppressDeprecationWarnings=!1;l.deprecationHandler=null;function E(e){return typeof Function<"u"&&e instanceof Function||Object.prototype.toString.call(e)==="[object Function]"}function xs(e){var t,s;for(s in e)g(e,s)&&(t=e[s],E(t)?this[s]=t:this["_"+s]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)}function tt(e,t){var s=Q({},e),a;for(a in t)g(t,a)&&(ae(e[a])&&ae(t[a])?(s[a]={},Q(s[a],e[a]),Q(s[a],t[a])):t[a]!=null?s[a]=t[a]:delete s[a]);for(a in e)g(e,a)&&!g(t,a)&&ae(e[a])&&(s[a]=Q({},s[a]));return s}function dt(e){e!=null&&this.set(e)}var st;Object.keys?st=Object.keys:st=function(e){var t,s=[];for(t in e)g(e,t)&&s.push(t);return s};var Ps={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"};function Ws(e,t,s){var a=this._calendar[e]||this._calendar.sameElse;return E(a)?a.call(t,s):a}function I(e,t,s){var a=""+Math.abs(e),r=t-a.length,i=e>=0;return(i?s?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+a}var ht=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Ye=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,qe={},le={};function h(e,t,s,a){var r=a;typeof a=="string"&&(r=function(){return this[a]()}),e&&(le[e]=r),t&&(le[t[0]]=function(){return I(r.apply(this,arguments),t[1],t[2])}),s&&(le[s]=function(){return this.localeData().ordinal(r.apply(this,arguments),e)})}function Ns(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function Fs(e){var t=e.match(ht),s,a;for(s=0,a=t.length;s<a;s++)le[t[s]]?t[s]=le[t[s]]:t[s]=Ns(t[s]);return function(r){var i="",n;for(n=0;n<a;n++)i+=E(t[n])?t[n].call(r,e):t[n];return i}}function Te(e,t){return e.isValid()?(t=Et(t,e.localeData()),qe[t]=qe[t]||Fs(t),qe[t](e)):e.localeData().invalidDate()}function Et(e,t){var s=5;function a(r){return t.longDateFormat(r)||r}for(Ye.lastIndex=0;s>=0&&Ye.test(e);)e=e.replace(Ye,a),Ye.lastIndex=0,s-=1;return e}var Rs={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"};function Cs(e){var t=this._longDateFormat[e],s=this._longDateFormat[e.toUpperCase()];return t||!s?t:(this._longDateFormat[e]=s.match(ht).map(function(a){return a==="MMMM"||a==="MM"||a==="DD"||a==="dddd"?a.slice(1):a}).join(""),this._longDateFormat[e])}var Ls="Invalid date";function Is(){return this._invalidDate}var Us="%d",Es=/\d{1,2}/;function Hs(e){return this._ordinal.replace("%d",e)}var As={future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"};function Vs(e,t,s,a){var r=this._relativeTime[s];return E(r)?r(e,t,s,a):r.replace(/%d/i,e)}function Gs(e,t){var s=this._relativeTime[e>0?"future":"past"];return E(s)?s(t):s.replace(/%s/i,t)}var Wt={D:"date",dates:"date",date:"date",d:"day",days:"day",day:"day",e:"weekday",weekdays:"weekday",weekday:"weekday",E:"isoWeekday",isoweekdays:"isoWeekday",isoweekday:"isoWeekday",DDD:"dayOfYear",dayofyears:"dayOfYear",dayofyear:"dayOfYear",h:"hour",hours:"hour",hour:"hour",ms:"millisecond",milliseconds:"millisecond",millisecond:"millisecond",m:"minute",minutes:"minute",minute:"minute",M:"month",months:"month",month:"month",Q:"quarter",quarters:"quarter",quarter:"quarter",s:"second",seconds:"second",second:"second",gg:"weekYear",weekyears:"weekYear",weekyear:"weekYear",GG:"isoWeekYear",isoweekyears:"isoWeekYear",isoweekyear:"isoWeekYear",w:"week",weeks:"week",week:"week",W:"isoWeek",isoweeks:"isoWeek",isoweek:"isoWeek",y:"year",years:"year",year:"year"};function W(e){return typeof e=="string"?Wt[e]||Wt[e.toLowerCase()]:void 0}function ft(e){var t={},s,a;for(a in e)g(e,a)&&(s=W(a),s&&(t[s]=e[a]));return t}var js={date:9,day:11,weekday:11,isoWeekday:11,dayOfYear:4,hour:13,millisecond:16,minute:14,month:8,quarter:7,second:15,weekYear:1,isoWeekYear:1,week:5,isoWeek:5,year:1};function zs(e){var t=[],s;for(s in e)g(e,s)&&t.push({unit:s,priority:js[s]});return t.sort(function(a,r){return a.priority-r.priority}),t}var Ht=/\d/,b=/\d\d/,At=/\d{3}/,ct=/\d{4}/,Ie=/[+-]?\d{6}/,k=/\d\d?/,Vt=/\d\d\d\d?/,Gt=/\d\d\d\d\d\d?/,Ue=/\d{1,3}/,mt=/\d{1,4}/,Ee=/[+-]?\d{1,6}/,he=/\d+/,He=/[+-]?\d+/,Zs=/Z|[+-]\d\d:?\d\d/gi,Ae=/Z|[+-]\d\d(?::?\d\d)?/gi,$s=/[+-]?\d+(\.\d{1,3})?/,ve=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,fe=/^[1-9]\d?/,yt=/^([1-9]\d|\d)/,Pe;Pe={};function d(e,t,s){Pe[e]=E(t)?t:function(a,r){return a&&s?s:t}}function qs(e,t){return g(Pe,e)?Pe[e](t._strict,t._locale):new RegExp(Bs(e))}function Bs(e){return z(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,s,a,r,i){return s||a||r||i}))}function z(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function x(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function m(e){var t=+e,s=0;return t!==0&&isFinite(t)&&(s=x(t)),s}var at={};function p(e,t){var s,a=t,r;for(typeof e=="string"&&(e=[e]),$(t)&&(a=function(i,n){n[t]=m(i)}),r=e.length,s=0;s<r;s++)at[e[s]]=a}function Me(e,t){p(e,function(s,a,r,i){r._w=r._w||{},t(s,r._w,r,i)})}function Js(e,t,s){t!=null&&g(at,e)&&at[e](t,s._a,s,e)}function Ve(e){return e%4===0&&e%100!==0||e%400===0}var Y=0,G=1,L=2,M=3,N=4,j=5,se=6,Qs=7,Xs=8;h("Y",0,0,function(){var e=this.year();return e<=9999?I(e,4):"+"+e});h(0,["YY",2],0,function(){return this.year()%100});h(0,["YYYY",4],0,"year");h(0,["YYYYY",5],0,"year");h(0,["YYYYYY",6,!0],0,"year");d("Y",He);d("YY",k,b);d("YYYY",mt,ct);d("YYYYY",Ee,Ie);d("YYYYYY",Ee,Ie);p(["YYYYY","YYYYYY"],Y);p("YYYY",function(e,t){t[Y]=e.length===2?l.parseTwoDigitYear(e):m(e)});p("YY",function(e,t){t[Y]=l.parseTwoDigitYear(e)});p("Y",function(e,t){t[Y]=parseInt(e,10)});function _e(e){return Ve(e)?366:365}l.parseTwoDigitYear=function(e){return m(e)+(m(e)>68?1900:2e3)};var jt=ce("FullYear",!0);function Ks(){return Ve(this.year())}function ce(e,t){return function(s){return s!=null?(zt(this,e,s),l.updateOffset(this,t),this):ge(this,e)}}function ge(e,t){if(!e.isValid())return NaN;var s=e._d,a=e._isUTC;switch(t){case"Milliseconds":return a?s.getUTCMilliseconds():s.getMilliseconds();case"Seconds":return a?s.getUTCSeconds():s.getSeconds();case"Minutes":return a?s.getUTCMinutes():s.getMinutes();case"Hours":return a?s.getUTCHours():s.getHours();case"Date":return a?s.getUTCDate():s.getDate();case"Day":return a?s.getUTCDay():s.getDay();case"Month":return a?s.getUTCMonth():s.getMonth();case"FullYear":return a?s.getUTCFullYear():s.getFullYear();default:return NaN}}function zt(e,t,s){var a,r,i,n,u;if(!(!e.isValid()||isNaN(s))){switch(a=e._d,r=e._isUTC,t){case"Milliseconds":return void(r?a.setUTCMilliseconds(s):a.setMilliseconds(s));case"Seconds":return void(r?a.setUTCSeconds(s):a.setSeconds(s));case"Minutes":return void(r?a.setUTCMinutes(s):a.setMinutes(s));case"Hours":return void(r?a.setUTCHours(s):a.setHours(s));case"Date":return void(r?a.setUTCDate(s):a.setDate(s));case"FullYear":break;default:return}i=s,n=e.month(),u=e.date(),u=u===29&&n===1&&!Ve(i)?28:u,r?a.setUTCFullYear(i,n,u):a.setFullYear(i,n,u)}}function ea(e){return e=W(e),E(this[e])?this[e]():this}function ta(e,t){if(typeof e=="object"){e=ft(e);var s=zs(e),a,r=s.length;for(a=0;a<r;a++)this[s[a].unit](e[s[a].unit])}else if(e=W(e),E(this[e]))return this[e](t);return this}function sa(e,t){return(e%t+t)%t}var v;Array.prototype.indexOf?v=Array.prototype.indexOf:v=function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};function _t(e,t){if(isNaN(e)||isNaN(t))return NaN;var s=sa(t,12);return e+=(t-s)/12,s===1?Ve(e)?29:28:31-s%7%2}h("M",["MM",2],"Mo",function(){return this.month()+1});h("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)});h("MMMM",0,0,function(e){return this.localeData().months(this,e)});d("M",k,fe);d("MM",k,b);d("MMM",function(e,t){return t.monthsShortRegex(e)});d("MMMM",function(e,t){return t.monthsRegex(e)});p(["M","MM"],function(e,t){t[G]=m(e)-1});p(["MMM","MMMM"],function(e,t,s,a){var r=s._locale.monthsParse(e,a,s._strict);r!=null?t[G]=r:c(s).invalidMonth=e});var aa="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Zt="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),$t=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,ra=ve,ia=ve;function na(e,t){return e?F(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||$t).test(t)?"format":"standalone"][e.month()]:F(this._months)?this._months:this._months.standalone}function oa(e,t){return e?F(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[$t.test(t)?"format":"standalone"][e.month()]:F(this._monthsShort)?this._monthsShort:this._monthsShort.standalone}function la(e,t,s){var a,r,i,n=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)i=U([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(i,"").toLocaleLowerCase();return s?t==="MMM"?(r=v.call(this._shortMonthsParse,n),r!==-1?r:null):(r=v.call(this._longMonthsParse,n),r!==-1?r:null):t==="MMM"?(r=v.call(this._shortMonthsParse,n),r!==-1?r:(r=v.call(this._longMonthsParse,n),r!==-1?r:null)):(r=v.call(this._longMonthsParse,n),r!==-1?r:(r=v.call(this._shortMonthsParse,n),r!==-1?r:null))}function ua(e,t,s){var a,r,i;if(this._monthsParseExact)return la.call(this,e,t,s);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(r=U([2e3,a]),s&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),!s&&!this._monthsParse[a]&&(i="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[a]=new RegExp(i.replace(".",""),"i")),s&&t==="MMMM"&&this._longMonthsParse[a].test(e))return a;if(s&&t==="MMM"&&this._shortMonthsParse[a].test(e))return a;if(!s&&this._monthsParse[a].test(e))return a}}function qt(e,t){if(!e.isValid())return e;if(typeof t=="string"){if(/^\d+$/.test(t))t=m(t);else if(t=e.localeData().monthsParse(t),!$(t))return e}var s=t,a=e.date();return a=a<29?a:Math.min(a,_t(e.year(),s)),e._isUTC?e._d.setUTCMonth(s,a):e._d.setMonth(s,a),e}function Bt(e){return e!=null?(qt(this,e),l.updateOffset(this,!0),this):ge(this,"Month")}function da(){return _t(this.year(),this.month())}function ha(e){return this._monthsParseExact?(g(this,"_monthsRegex")||Jt.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(g(this,"_monthsShortRegex")||(this._monthsShortRegex=ra),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function fa(e){return this._monthsParseExact?(g(this,"_monthsRegex")||Jt.call(this),e?this._monthsStrictRegex:this._monthsRegex):(g(this,"_monthsRegex")||(this._monthsRegex=ia),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function Jt(){function e(f,y){return y.length-f.length}var t=[],s=[],a=[],r,i,n,u;for(r=0;r<12;r++)i=U([2e3,r]),n=z(this.monthsShort(i,"")),u=z(this.months(i,"")),t.push(n),s.push(u),a.push(u),a.push(n);t.sort(e),s.sort(e),a.sort(e),this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+t.join("|")+")","i")}function ca(e,t,s,a,r,i,n){var u;return e<100&&e>=0?(u=new Date(e+400,t,s,a,r,i,n),isFinite(u.getFullYear())&&u.setFullYear(e)):u=new Date(e,t,s,a,r,i,n),u}function we(e){var t,s;return e<100&&e>=0?(s=Array.prototype.slice.call(arguments),s[0]=e+400,t=new Date(Date.UTC.apply(null,s)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function We(e,t,s){var a=7+t-s,r=(7+we(e,0,a).getUTCDay()-t)%7;return-r+a-1}function Qt(e,t,s,a,r){var i=(7+s-a)%7,n=We(e,a,r),u=1+7*(t-1)+i+n,f,y;return u<=0?(f=e-1,y=_e(f)+u):u>_e(e)?(f=e+1,y=u-_e(e)):(f=e,y=u),{year:f,dayOfYear:y}}function pe(e,t,s){var a=We(e.year(),t,s),r=Math.floor((e.dayOfYear()-a-1)/7)+1,i,n;return r<1?(n=e.year()-1,i=r+Z(n,t,s)):r>Z(e.year(),t,s)?(i=r-Z(e.year(),t,s),n=e.year()+1):(n=e.year(),i=r),{week:i,year:n}}function Z(e,t,s){var a=We(e,t,s),r=We(e+1,t,s);return(_e(e)-a+r)/7}h("w",["ww",2],"wo","week");h("W",["WW",2],"Wo","isoWeek");d("w",k,fe);d("ww",k,b);d("W",k,fe);d("WW",k,b);Me(["w","ww","W","WW"],function(e,t,s,a){t[a.substr(0,1)]=m(e)});function ma(e){return pe(e,this._week.dow,this._week.doy).week}var ya={dow:0,doy:6};function _a(){return this._week.dow}function ga(){return this._week.doy}function wa(e){var t=this.localeData().week(this);return e==null?t:this.add((e-t)*7,"d")}function pa(e){var t=pe(this,1,4).week;return e==null?t:this.add((e-t)*7,"d")}h("d",0,"do","day");h("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)});h("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)});h("dddd",0,0,function(e){return this.localeData().weekdays(this,e)});h("e",0,0,"weekday");h("E",0,0,"isoWeekday");d("d",k);d("e",k);d("E",k);d("dd",function(e,t){return t.weekdaysMinRegex(e)});d("ddd",function(e,t){return t.weekdaysShortRegex(e)});d("dddd",function(e,t){return t.weekdaysRegex(e)});Me(["dd","ddd","dddd"],function(e,t,s,a){var r=s._locale.weekdaysParse(e,a,s._strict);r!=null?t.d=r:c(s).invalidWeekday=e});Me(["d","e","E"],function(e,t,s,a){t[a]=m(e)});function Sa(e,t){return typeof e!="string"?e:isNaN(e)?(e=t.weekdaysParse(e),typeof e=="number"?e:null):parseInt(e,10)}function ka(e,t){return typeof e=="string"?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function gt(e,t){return e.slice(t,7).concat(e.slice(0,t))}var Da="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Xt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),va="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ma=ve,Ya=ve,Oa=ve;function Ta(e,t){var s=F(this._weekdays)?this._weekdays:this._weekdays[e&&e!==!0&&this._weekdays.isFormat.test(t)?"format":"standalone"];return e===!0?gt(s,this._week.dow):e?s[e.day()]:s}function ba(e){return e===!0?gt(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort}function xa(e){return e===!0?gt(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Pa(e,t,s){var a,r,i,n=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)i=U([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(i,"").toLocaleLowerCase();return s?t==="dddd"?(r=v.call(this._weekdaysParse,n),r!==-1?r:null):t==="ddd"?(r=v.call(this._shortWeekdaysParse,n),r!==-1?r:null):(r=v.call(this._minWeekdaysParse,n),r!==-1?r:null):t==="dddd"?(r=v.call(this._weekdaysParse,n),r!==-1||(r=v.call(this._shortWeekdaysParse,n),r!==-1)?r:(r=v.call(this._minWeekdaysParse,n),r!==-1?r:null)):t==="ddd"?(r=v.call(this._shortWeekdaysParse,n),r!==-1||(r=v.call(this._weekdaysParse,n),r!==-1)?r:(r=v.call(this._minWeekdaysParse,n),r!==-1?r:null)):(r=v.call(this._minWeekdaysParse,n),r!==-1||(r=v.call(this._weekdaysParse,n),r!==-1)?r:(r=v.call(this._shortWeekdaysParse,n),r!==-1?r:null))}function Wa(e,t,s){var a,r,i;if(this._weekdaysParseExact)return Pa.call(this,e,t,s);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(r=U([2e3,1]).day(a),s&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(r,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(r,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(r,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[a]||(i="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[a]=new RegExp(i.replace(".",""),"i")),s&&t==="dddd"&&this._fullWeekdaysParse[a].test(e))return a;if(s&&t==="ddd"&&this._shortWeekdaysParse[a].test(e))return a;if(s&&t==="dd"&&this._minWeekdaysParse[a].test(e))return a;if(!s&&this._weekdaysParse[a].test(e))return a}}function Na(e){if(!this.isValid())return e!=null?this:NaN;var t=ge(this,"Day");return e!=null?(e=Sa(e,this.localeData()),this.add(e-t,"d")):t}function Fa(e){if(!this.isValid())return e!=null?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return e==null?t:this.add(e-t,"d")}function Ra(e){if(!this.isValid())return e!=null?this:NaN;if(e!=null){var t=ka(e,this.localeData());return this.day(this.day()%7?t:t-7)}else return this.day()||7}function Ca(e){return this._weekdaysParseExact?(g(this,"_weekdaysRegex")||wt.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(g(this,"_weekdaysRegex")||(this._weekdaysRegex=Ma),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function La(e){return this._weekdaysParseExact?(g(this,"_weekdaysRegex")||wt.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(g(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ya),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function Ia(e){return this._weekdaysParseExact?(g(this,"_weekdaysRegex")||wt.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(g(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Oa),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function wt(){function e(O,H){return H.length-O.length}var t=[],s=[],a=[],r=[],i,n,u,f,y;for(i=0;i<7;i++)n=U([2e3,1]).day(i),u=z(this.weekdaysMin(n,"")),f=z(this.weekdaysShort(n,"")),y=z(this.weekdays(n,"")),t.push(u),s.push(f),a.push(y),r.push(u),r.push(f),r.push(y);t.sort(e),s.sort(e),a.sort(e),r.sort(e),this._weekdaysRegex=new RegExp("^("+r.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+t.join("|")+")","i")}function pt(){return this.hours()%12||12}function Ua(){return this.hours()||24}h("H",["HH",2],0,"hour");h("h",["hh",2],0,pt);h("k",["kk",2],0,Ua);h("hmm",0,0,function(){return""+pt.apply(this)+I(this.minutes(),2)});h("hmmss",0,0,function(){return""+pt.apply(this)+I(this.minutes(),2)+I(this.seconds(),2)});h("Hmm",0,0,function(){return""+this.hours()+I(this.minutes(),2)});h("Hmmss",0,0,function(){return""+this.hours()+I(this.minutes(),2)+I(this.seconds(),2)});function Kt(e,t){h(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}Kt("a",!0);Kt("A",!1);function es(e,t){return t._meridiemParse}d("a",es);d("A",es);d("H",k,yt);d("h",k,fe);d("k",k,fe);d("HH",k,b);d("hh",k,b);d("kk",k,b);d("hmm",Vt);d("hmmss",Gt);d("Hmm",Vt);d("Hmmss",Gt);p(["H","HH"],M);p(["k","kk"],function(e,t,s){var a=m(e);t[M]=a===24?0:a});p(["a","A"],function(e,t,s){s._isPm=s._locale.isPM(e),s._meridiem=e});p(["h","hh"],function(e,t,s){t[M]=m(e),c(s).bigHour=!0});p("hmm",function(e,t,s){var a=e.length-2;t[M]=m(e.substr(0,a)),t[N]=m(e.substr(a)),c(s).bigHour=!0});p("hmmss",function(e,t,s){var a=e.length-4,r=e.length-2;t[M]=m(e.substr(0,a)),t[N]=m(e.substr(a,2)),t[j]=m(e.substr(r)),c(s).bigHour=!0});p("Hmm",function(e,t,s){var a=e.length-2;t[M]=m(e.substr(0,a)),t[N]=m(e.substr(a))});p("Hmmss",function(e,t,s){var a=e.length-4,r=e.length-2;t[M]=m(e.substr(0,a)),t[N]=m(e.substr(a,2)),t[j]=m(e.substr(r))});function Ea(e){return(e+"").toLowerCase().charAt(0)==="p"}var Ha=/[ap]\.?m?\.?/i,Aa=ce("Hours",!0);function Va(e,t,s){return e>11?s?"pm":"PM":s?"am":"AM"}var ts={calendar:Ps,longDateFormat:Rs,invalidDate:Ls,ordinal:Us,dayOfMonthOrdinalParse:Es,relativeTime:As,months:aa,monthsShort:Zt,week:ya,weekdays:Da,weekdaysMin:va,weekdaysShort:Xt,meridiemParse:Ha},D={},me={},Se;function Ga(e,t){var s,a=Math.min(e.length,t.length);for(s=0;s<a;s+=1)if(e[s]!==t[s])return s;return a}function Nt(e){return e&&e.toLowerCase().replace("_","-")}function ja(e){for(var t=0,s,a,r,i;t<e.length;){for(i=Nt(e[t]).split("-"),s=i.length,a=Nt(e[t+1]),a=a?a.split("-"):null;s>0;){if(r=Ge(i.slice(0,s).join("-")),r)return r;if(a&&a.length>=s&&Ga(i,a)>=s-1)break;s--}t++}return Se}function za(e){return!!(e&&e.match("^[^/\\\\]*$"))}function Ge(e){var t=null,s;if(D[e]===void 0&&typeof module<"u"&&module&&module.exports&&za(e))try{t=Se._abbr,s=require,s("./locale/"+e),K(t)}catch{D[e]=null}return D[e]}function K(e,t){var s;return e&&(T(t)?s=q(e):s=St(e,t),s?Se=s:typeof console<"u"&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Se._abbr}function St(e,t){if(t!==null){var s,a=ts;if(t.abbr=e,D[e]!=null)Ut("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),a=D[e]._config;else if(t.parentLocale!=null)if(D[t.parentLocale]!=null)a=D[t.parentLocale]._config;else if(s=Ge(t.parentLocale),s!=null)a=s._config;else return me[t.parentLocale]||(me[t.parentLocale]=[]),me[t.parentLocale].push({name:e,config:t}),null;return D[e]=new dt(tt(a,t)),me[e]&&me[e].forEach(function(r){St(r.name,r.config)}),K(e),D[e]}else return delete D[e],null}function Za(e,t){if(t!=null){var s,a,r=ts;D[e]!=null&&D[e].parentLocale!=null?D[e].set(tt(D[e]._config,t)):(a=Ge(e),a!=null&&(r=a._config),t=tt(r,t),a==null&&(t.abbr=e),s=new dt(t),s.parentLocale=D[e],D[e]=s),K(e)}else D[e]!=null&&(D[e].parentLocale!=null?(D[e]=D[e].parentLocale,e===K()&&K(e)):D[e]!=null&&delete D[e]);return D[e]}function q(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Se;if(!F(e)){if(t=Ge(e),t)return t;e=[e]}return ja(e)}function $a(){return st(D)}function kt(e){var t,s=e._a;return s&&c(e).overflow===-2&&(t=s[G]<0||s[G]>11?G:s[L]<1||s[L]>_t(s[Y],s[G])?L:s[M]<0||s[M]>24||s[M]===24&&(s[N]!==0||s[j]!==0||s[se]!==0)?M:s[N]<0||s[N]>59?N:s[j]<0||s[j]>59?j:s[se]<0||s[se]>999?se:-1,c(e)._overflowDayOfYear&&(t<Y||t>L)&&(t=L),c(e)._overflowWeeks&&t===-1&&(t=Qs),c(e)._overflowWeekday&&t===-1&&(t=Xs),c(e).overflow=t),e}var qa=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ba=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ja=/Z|[+-]\d\d(?::?\d\d)?/,Oe=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],Be=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Qa=/^\/?Date\((-?\d+)/i,Xa=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,Ka={UT:0,GMT:0,EDT:-4*60,EST:-5*60,CDT:-5*60,CST:-6*60,MDT:-6*60,MST:-7*60,PDT:-7*60,PST:-8*60};function ss(e){var t,s,a=e._i,r=qa.exec(a)||Ba.exec(a),i,n,u,f,y=Oe.length,O=Be.length;if(r){for(c(e).iso=!0,t=0,s=y;t<s;t++)if(Oe[t][1].exec(r[1])){n=Oe[t][0],i=Oe[t][2]!==!1;break}if(n==null){e._isValid=!1;return}if(r[3]){for(t=0,s=O;t<s;t++)if(Be[t][1].exec(r[3])){u=(r[2]||" ")+Be[t][0];break}if(u==null){e._isValid=!1;return}}if(!i&&u!=null){e._isValid=!1;return}if(r[4])if(Ja.exec(r[4]))f="Z";else{e._isValid=!1;return}e._f=n+(u||"")+(f||""),vt(e)}else e._isValid=!1}function er(e,t,s,a,r,i){var n=[tr(e),Zt.indexOf(t),parseInt(s,10),parseInt(a,10),parseInt(r,10)];return i&&n.push(parseInt(i,10)),n}function tr(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function sr(e){return e.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,"")}function ar(e,t,s){if(e){var a=Xt.indexOf(e),r=new Date(t[0],t[1],t[2]).getDay();if(a!==r)return c(s).weekdayMismatch=!0,s._isValid=!1,!1}return!0}function rr(e,t,s){if(e)return Ka[e];if(t)return 0;var a=parseInt(s,10),r=a%100,i=(a-r)/100;return i*60+r}function as(e){var t=Xa.exec(sr(e._i)),s;if(t){if(s=er(t[4],t[3],t[2],t[5],t[6],t[7]),!ar(t[1],s,e))return;e._a=s,e._tzm=rr(t[8],t[9],t[10]),e._d=we.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),c(e).rfc2822=!0}else e._isValid=!1}function ir(e){var t=Qa.exec(e._i);if(t!==null){e._d=new Date(+t[1]);return}if(ss(e),e._isValid===!1)delete e._isValid;else return;if(as(e),e._isValid===!1)delete e._isValid;else return;e._strict?e._isValid=!1:l.createFromInputFallback(e)}l.createFromInputFallback=P("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))});function ne(e,t,s){return e??t??s}function nr(e){var t=new Date(l.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}function Dt(e){var t,s,a=[],r,i,n;if(!e._d){for(r=nr(e),e._w&&e._a[L]==null&&e._a[G]==null&&or(e),e._dayOfYear!=null&&(n=ne(e._a[Y],r[Y]),(e._dayOfYear>_e(n)||e._dayOfYear===0)&&(c(e)._overflowDayOfYear=!0),s=we(n,0,e._dayOfYear),e._a[G]=s.getUTCMonth(),e._a[L]=s.getUTCDate()),t=0;t<3&&e._a[t]==null;++t)e._a[t]=a[t]=r[t];for(;t<7;t++)e._a[t]=a[t]=e._a[t]==null?t===2?1:0:e._a[t];e._a[M]===24&&e._a[N]===0&&e._a[j]===0&&e._a[se]===0&&(e._nextDay=!0,e._a[M]=0),e._d=(e._useUTC?we:ca).apply(null,a),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),e._tzm!=null&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[M]=24),e._w&&typeof e._w.d<"u"&&e._w.d!==i&&(c(e).weekdayMismatch=!0)}}function or(e){var t,s,a,r,i,n,u,f,y;t=e._w,t.GG!=null||t.W!=null||t.E!=null?(i=1,n=4,s=ne(t.GG,e._a[Y],pe(S(),1,4).year),a=ne(t.W,1),r=ne(t.E,1),(r<1||r>7)&&(f=!0)):(i=e._locale._week.dow,n=e._locale._week.doy,y=pe(S(),i,n),s=ne(t.gg,e._a[Y],y.year),a=ne(t.w,y.week),t.d!=null?(r=t.d,(r<0||r>6)&&(f=!0)):t.e!=null?(r=t.e+i,(t.e<0||t.e>6)&&(f=!0)):r=i),a<1||a>Z(s,i,n)?c(e)._overflowWeeks=!0:f!=null?c(e)._overflowWeekday=!0:(u=Qt(s,a,r,i,n),e._a[Y]=u.year,e._dayOfYear=u.dayOfYear)}l.ISO_8601=function(){};l.RFC_2822=function(){};function vt(e){if(e._f===l.ISO_8601){ss(e);return}if(e._f===l.RFC_2822){as(e);return}e._a=[],c(e).empty=!0;var t=""+e._i,s,a,r,i,n,u=t.length,f=0,y,O;for(r=Et(e._f,e._locale).match(ht)||[],O=r.length,s=0;s<O;s++)i=r[s],a=(t.match(qs(i,e))||[])[0],a&&(n=t.substr(0,t.indexOf(a)),n.length>0&&c(e).unusedInput.push(n),t=t.slice(t.indexOf(a)+a.length),f+=a.length),le[i]?(a?c(e).empty=!1:c(e).unusedTokens.push(i),Js(i,a,e)):e._strict&&!a&&c(e).unusedTokens.push(i);c(e).charsLeftOver=u-f,t.length>0&&c(e).unusedInput.push(t),e._a[M]<=12&&c(e).bigHour===!0&&e._a[M]>0&&(c(e).bigHour=void 0),c(e).parsedDateParts=e._a.slice(0),c(e).meridiem=e._meridiem,e._a[M]=lr(e._locale,e._a[M],e._meridiem),y=c(e).era,y!==null&&(e._a[Y]=e._locale.erasConvertYear(y,e._a[Y])),Dt(e),kt(e)}function lr(e,t,s){var a;return s==null?t:e.meridiemHour!=null?e.meridiemHour(t,s):(e.isPM!=null&&(a=e.isPM(s),a&&t<12&&(t+=12),!a&&t===12&&(t=0)),t)}function ur(e){var t,s,a,r,i,n,u=!1,f=e._f.length;if(f===0){c(e).invalidFormat=!0,e._d=new Date(NaN);return}for(r=0;r<f;r++)i=0,n=!1,t=ut({},e),e._useUTC!=null&&(t._useUTC=e._useUTC),t._f=e._f[r],vt(t),lt(t)&&(n=!0),i+=c(t).charsLeftOver,i+=c(t).unusedTokens.length*10,c(t).score=i,u?i<a&&(a=i,s=t):(a==null||i<a||n)&&(a=i,s=t,n&&(u=!0));Q(e,s||t)}function dr(e){if(!e._d){var t=ft(e._i),s=t.day===void 0?t.date:t.day;e._a=Lt([t.year,t.month,s,t.hour,t.minute,t.second,t.millisecond],function(a){return a&&parseInt(a,10)}),Dt(e)}}function hr(e){var t=new De(kt(rs(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function rs(e){var t=e._i,s=e._f;return e._locale=e._locale||q(e._l),t===null||s===void 0&&t===""?Le({nullInput:!0}):(typeof t=="string"&&(e._i=t=e._locale.preparse(t)),R(t)?new De(kt(t)):(ke(t)?e._d=t:F(s)?ur(e):s?vt(e):fr(e),lt(e)||(e._d=null),e))}function fr(e){var t=e._i;T(t)?e._d=new Date(l.now()):ke(t)?e._d=new Date(t.valueOf()):typeof t=="string"?ir(e):F(t)?(e._a=Lt(t.slice(0),function(s){return parseInt(s,10)}),Dt(e)):ae(t)?dr(e):$(t)?e._d=new Date(t):l.createFromInputFallback(e)}function is(e,t,s,a,r){var i={};return(t===!0||t===!1)&&(a=t,t=void 0),(s===!0||s===!1)&&(a=s,s=void 0),(ae(e)&&ot(e)||F(e)&&e.length===0)&&(e=void 0),i._isAMomentObject=!0,i._useUTC=i._isUTC=r,i._l=s,i._i=e,i._f=t,i._strict=a,hr(i)}function S(e,t,s,a){return is(e,t,s,a,!1)}var cr=P("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=S.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:Le()}),mr=P("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=S.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:Le()});function ns(e,t){var s,a;if(t.length===1&&F(t[0])&&(t=t[0]),!t.length)return S();for(s=t[0],a=1;a<t.length;++a)(!t[a].isValid()||t[a][e](s))&&(s=t[a]);return s}function yr(){var e=[].slice.call(arguments,0);return ns("isBefore",e)}function _r(){var e=[].slice.call(arguments,0);return ns("isAfter",e)}var gr=function(){return Date.now?Date.now():+new Date},ye=["year","quarter","month","week","day","hour","minute","second","millisecond"];function wr(e){var t,s=!1,a,r=ye.length;for(t in e)if(g(e,t)&&!(v.call(ye,t)!==-1&&(e[t]==null||!isNaN(e[t]))))return!1;for(a=0;a<r;++a)if(e[ye[a]]){if(s)return!1;parseFloat(e[ye[a]])!==m(e[ye[a]])&&(s=!0)}return!0}function pr(){return this._isValid}function Sr(){return C(NaN)}function je(e){var t=ft(e),s=t.year||0,a=t.quarter||0,r=t.month||0,i=t.week||t.isoWeek||0,n=t.day||0,u=t.hour||0,f=t.minute||0,y=t.second||0,O=t.millisecond||0;this._isValid=wr(t),this._milliseconds=+O+y*1e3+f*6e4+u*1e3*60*60,this._days=+n+i*7,this._months=+r+a*3+s*12,this._data={},this._locale=q(),this._bubble()}function be(e){return e instanceof je}function rt(e){return e<0?Math.round(-1*e)*-1:Math.round(e)}function kr(e,t,s){var a=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),i=0,n;for(n=0;n<a;n++)(s&&e[n]!==t[n]||!s&&m(e[n])!==m(t[n]))&&i++;return i+r}function os(e,t){h(e,0,0,function(){var s=this.utcOffset(),a="+";return s<0&&(s=-s,a="-"),a+I(~~(s/60),2)+t+I(~~s%60,2)})}os("Z",":");os("ZZ","");d("Z",Ae);d("ZZ",Ae);p(["Z","ZZ"],function(e,t,s){s._useUTC=!0,s._tzm=Mt(Ae,e)});var Dr=/([\+\-]|\d\d)/gi;function Mt(e,t){var s=(t||"").match(e),a,r,i;return s===null?null:(a=s[s.length-1]||[],r=(a+"").match(Dr)||["-",0,0],i=+(r[1]*60)+m(r[2]),i===0?0:r[0]==="+"?i:-i)}function Yt(e,t){var s,a;return t._isUTC?(s=t.clone(),a=(R(e)||ke(e)?e.valueOf():S(e).valueOf())-s.valueOf(),s._d.setTime(s._d.valueOf()+a),l.updateOffset(s,!1),s):S(e).local()}function it(e){return-Math.round(e._d.getTimezoneOffset())}l.updateOffset=function(){};function vr(e,t,s){var a=this._offset||0,r;if(!this.isValid())return e!=null?this:NaN;if(e!=null){if(typeof e=="string"){if(e=Mt(Ae,e),e===null)return this}else Math.abs(e)<16&&!s&&(e=e*60);return!this._isUTC&&t&&(r=it(this)),this._offset=e,this._isUTC=!0,r!=null&&this.add(r,"m"),a!==e&&(!t||this._changeInProgress?ds(this,C(e-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,l.updateOffset(this,!0),this._changeInProgress=null)),this}else return this._isUTC?a:it(this)}function Mr(e,t){return e!=null?(typeof e!="string"&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Yr(e){return this.utcOffset(0,e)}function Or(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(it(this),"m")),this}function Tr(){if(this._tzm!=null)this.utcOffset(this._tzm,!1,!0);else if(typeof this._i=="string"){var e=Mt(Zs,this._i);e!=null?this.utcOffset(e):this.utcOffset(0,!0)}return this}function br(e){return this.isValid()?(e=e?S(e).utcOffset():0,(this.utcOffset()-e)%60===0):!1}function xr(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function Pr(){if(!T(this._isDSTShifted))return this._isDSTShifted;var e={},t;return ut(e,this),e=rs(e),e._a?(t=e._isUTC?U(e._a):S(e._a),this._isDSTShifted=this.isValid()&&kr(e._a,t.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}function Wr(){return this.isValid()?!this._isUTC:!1}function Nr(){return this.isValid()?this._isUTC:!1}function ls(){return this.isValid()?this._isUTC&&this._offset===0:!1}var Fr=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Rr=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function C(e,t){var s=e,a=null,r,i,n;return be(e)?s={ms:e._milliseconds,d:e._days,M:e._months}:$(e)||!isNaN(+e)?(s={},t?s[t]=+e:s.milliseconds=+e):(a=Fr.exec(e))?(r=a[1]==="-"?-1:1,s={y:0,d:m(a[L])*r,h:m(a[M])*r,m:m(a[N])*r,s:m(a[j])*r,ms:m(rt(a[se]*1e3))*r}):(a=Rr.exec(e))?(r=a[1]==="-"?-1:1,s={y:ee(a[2],r),M:ee(a[3],r),w:ee(a[4],r),d:ee(a[5],r),h:ee(a[6],r),m:ee(a[7],r),s:ee(a[8],r)}):s==null?s={}:typeof s=="object"&&("from"in s||"to"in s)&&(n=Cr(S(s.from),S(s.to)),s={},s.ms=n.milliseconds,s.M=n.months),i=new je(s),be(e)&&g(e,"_locale")&&(i._locale=e._locale),be(e)&&g(e,"_isValid")&&(i._isValid=e._isValid),i}C.fn=je.prototype;C.invalid=Sr;function ee(e,t){var s=e&&parseFloat(e.replace(",","."));return(isNaN(s)?0:s)*t}function Ft(e,t){var s={};return s.months=t.month()-e.month()+(t.year()-e.year())*12,e.clone().add(s.months,"M").isAfter(t)&&--s.months,s.milliseconds=+t-+e.clone().add(s.months,"M"),s}function Cr(e,t){var s;return e.isValid()&&t.isValid()?(t=Yt(t,e),e.isBefore(t)?s=Ft(e,t):(s=Ft(t,e),s.milliseconds=-s.milliseconds,s.months=-s.months),s):{milliseconds:0,months:0}}function us(e,t){return function(s,a){var r,i;return a!==null&&!isNaN(+a)&&(Ut(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=s,s=a,a=i),r=C(s,a),ds(this,r,e),this}}function ds(e,t,s,a){var r=t._milliseconds,i=rt(t._days),n=rt(t._months);e.isValid()&&(a=a??!0,n&&qt(e,ge(e,"Month")+n*s),i&&zt(e,"Date",ge(e,"Date")+i*s),r&&e._d.setTime(e._d.valueOf()+r*s),a&&l.updateOffset(e,i||n))}var Lr=us(1,"add"),Ir=us(-1,"subtract");function hs(e){return typeof e=="string"||e instanceof String}function Ur(e){return R(e)||ke(e)||hs(e)||$(e)||Hr(e)||Er(e)||e===null||e===void 0}function Er(e){var t=ae(e)&&!ot(e),s=!1,a=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],r,i,n=a.length;for(r=0;r<n;r+=1)i=a[r],s=s||g(e,i);return t&&s}function Hr(e){var t=F(e),s=!1;return t&&(s=e.filter(function(a){return!$(a)&&hs(e)}).length===0),t&&s}function Ar(e){var t=ae(e)&&!ot(e),s=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"],r,i;for(r=0;r<a.length;r+=1)i=a[r],s=s||g(e,i);return t&&s}function Vr(e,t){var s=e.diff(t,"days",!0);return s<-6?"sameElse":s<-1?"lastWeek":s<0?"lastDay":s<1?"sameDay":s<2?"nextDay":s<7?"nextWeek":"sameElse"}function Gr(e,t){arguments.length===1&&(arguments[0]?Ur(arguments[0])?(e=arguments[0],t=void 0):Ar(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var s=e||S(),a=Yt(s,this).startOf("day"),r=l.calendarFormat(this,a)||"sameElse",i=t&&(E(t[r])?t[r].call(this,s):t[r]);return this.format(i||this.localeData().calendar(r,this,S(s)))}function jr(){return new De(this)}function zr(e,t){var s=R(e)?e:S(e);return this.isValid()&&s.isValid()?(t=W(t)||"millisecond",t==="millisecond"?this.valueOf()>s.valueOf():s.valueOf()<this.clone().startOf(t).valueOf()):!1}function Zr(e,t){var s=R(e)?e:S(e);return this.isValid()&&s.isValid()?(t=W(t)||"millisecond",t==="millisecond"?this.valueOf()<s.valueOf():this.clone().endOf(t).valueOf()<s.valueOf()):!1}function $r(e,t,s,a){var r=R(e)?e:S(e),i=R(t)?t:S(t);return this.isValid()&&r.isValid()&&i.isValid()?(a=a||"()",(a[0]==="("?this.isAfter(r,s):!this.isBefore(r,s))&&(a[1]===")"?this.isBefore(i,s):!this.isAfter(i,s))):!1}function qr(e,t){var s=R(e)?e:S(e),a;return this.isValid()&&s.isValid()?(t=W(t)||"millisecond",t==="millisecond"?this.valueOf()===s.valueOf():(a=s.valueOf(),this.clone().startOf(t).valueOf()<=a&&a<=this.clone().endOf(t).valueOf())):!1}function Br(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function Jr(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function Qr(e,t,s){var a,r,i;if(!this.isValid())return NaN;if(a=Yt(e,this),!a.isValid())return NaN;switch(r=(a.utcOffset()-this.utcOffset())*6e4,t=W(t),t){case"year":i=xe(this,a)/12;break;case"month":i=xe(this,a);break;case"quarter":i=xe(this,a)/3;break;case"second":i=(this-a)/1e3;break;case"minute":i=(this-a)/6e4;break;case"hour":i=(this-a)/36e5;break;case"day":i=(this-a-r)/864e5;break;case"week":i=(this-a-r)/6048e5;break;default:i=this-a}return s?i:x(i)}function xe(e,t){if(e.date()<t.date())return-xe(t,e);var s=(t.year()-e.year())*12+(t.month()-e.month()),a=e.clone().add(s,"months"),r,i;return t-a<0?(r=e.clone().add(s-1,"months"),i=(t-a)/(a-r)):(r=e.clone().add(s+1,"months"),i=(t-a)/(r-a)),-(s+i)||0}l.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";l.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";function Xr(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function Kr(e){if(!this.isValid())return null;var t=e!==!0,s=t?this.clone().utc():this;return s.year()<0||s.year()>9999?Te(s,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):E(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+this.utcOffset()*60*1e3).toISOString().replace("Z",Te(s,"Z")):Te(s,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")}function ei(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="",s,a,r,i;return this.isLocal()||(e=this.utcOffset()===0?"moment.utc":"moment.parseZone",t="Z"),s="["+e+'("]',a=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",r="-MM-DD[T]HH:mm:ss.SSS",i=t+'[")]',this.format(s+a+r+i)}function ti(e){e||(e=this.isUtc()?l.defaultFormatUtc:l.defaultFormat);var t=Te(this,e);return this.localeData().postformat(t)}function si(e,t){return this.isValid()&&(R(e)&&e.isValid()||S(e).isValid())?C({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function ai(e){return this.from(S(),e)}function ri(e,t){return this.isValid()&&(R(e)&&e.isValid()||S(e).isValid())?C({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function ii(e){return this.to(S(),e)}function fs(e){var t;return e===void 0?this._locale._abbr:(t=q(e),t!=null&&(this._locale=t),this)}var cs=P("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return e===void 0?this.localeData():this.locale(e)});function ms(){return this._locale}var Ne=1e3,ue=60*Ne,Fe=60*ue,ys=(365*400+97)*24*Fe;function de(e,t){return(e%t+t)%t}function _s(e,t,s){return e<100&&e>=0?new Date(e+400,t,s)-ys:new Date(e,t,s).valueOf()}function gs(e,t,s){return e<100&&e>=0?Date.UTC(e+400,t,s)-ys:Date.UTC(e,t,s)}function ni(e){var t,s;if(e=W(e),e===void 0||e==="millisecond"||!this.isValid())return this;switch(s=this._isUTC?gs:_s,e){case"year":t=s(this.year(),0,1);break;case"quarter":t=s(this.year(),this.month()-this.month()%3,1);break;case"month":t=s(this.year(),this.month(),1);break;case"week":t=s(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=s(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=s(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=de(t+(this._isUTC?0:this.utcOffset()*ue),Fe);break;case"minute":t=this._d.valueOf(),t-=de(t,ue);break;case"second":t=this._d.valueOf(),t-=de(t,Ne);break}return this._d.setTime(t),l.updateOffset(this,!0),this}function oi(e){var t,s;if(e=W(e),e===void 0||e==="millisecond"||!this.isValid())return this;switch(s=this._isUTC?gs:_s,e){case"year":t=s(this.year()+1,0,1)-1;break;case"quarter":t=s(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=s(this.year(),this.month()+1,1)-1;break;case"week":t=s(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=s(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=s(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=Fe-de(t+(this._isUTC?0:this.utcOffset()*ue),Fe)-1;break;case"minute":t=this._d.valueOf(),t+=ue-de(t,ue)-1;break;case"second":t=this._d.valueOf(),t+=Ne-de(t,Ne)-1;break}return this._d.setTime(t),l.updateOffset(this,!0),this}function li(){return this._d.valueOf()-(this._offset||0)*6e4}function ui(){return Math.floor(this.valueOf()/1e3)}function di(){return new Date(this.valueOf())}function hi(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function fi(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function ci(){return this.isValid()?this.toISOString():null}function mi(){return lt(this)}function yi(){return Q({},c(this))}function _i(){return c(this).overflow}function gi(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}h("N",0,0,"eraAbbr");h("NN",0,0,"eraAbbr");h("NNN",0,0,"eraAbbr");h("NNNN",0,0,"eraName");h("NNNNN",0,0,"eraNarrow");h("y",["y",1],"yo","eraYear");h("y",["yy",2],0,"eraYear");h("y",["yyy",3],0,"eraYear");h("y",["yyyy",4],0,"eraYear");d("N",Ot);d("NN",Ot);d("NNN",Ot);d("NNNN",bi);d("NNNNN",xi);p(["N","NN","NNN","NNNN","NNNNN"],function(e,t,s,a){var r=s._locale.erasParse(e,a,s._strict);r?c(s).era=r:c(s).invalidEra=e});d("y",he);d("yy",he);d("yyy",he);d("yyyy",he);d("yo",Pi);p(["y","yy","yyy","yyyy"],Y);p(["yo"],function(e,t,s,a){var r;s._locale._eraYearOrdinalRegex&&(r=e.match(s._locale._eraYearOrdinalRegex)),s._locale.eraYearOrdinalParse?t[Y]=s._locale.eraYearOrdinalParse(e,r):t[Y]=parseInt(e,10)});function wi(e,t){var s,a,r,i=this._eras||q("en")._eras;for(s=0,a=i.length;s<a;++s){switch(typeof i[s].since){case"string":r=l(i[s].since).startOf("day"),i[s].since=r.valueOf();break}switch(typeof i[s].until){case"undefined":i[s].until=1/0;break;case"string":r=l(i[s].until).startOf("day").valueOf(),i[s].until=r.valueOf();break}}return i}function pi(e,t,s){var a,r,i=this.eras(),n,u,f;for(e=e.toUpperCase(),a=0,r=i.length;a<r;++a)if(n=i[a].name.toUpperCase(),u=i[a].abbr.toUpperCase(),f=i[a].narrow.toUpperCase(),s)switch(t){case"N":case"NN":case"NNN":if(u===e)return i[a];break;case"NNNN":if(n===e)return i[a];break;case"NNNNN":if(f===e)return i[a];break}else if([n,u,f].indexOf(e)>=0)return i[a]}function Si(e,t){var s=e.since<=e.until?1:-1;return t===void 0?l(e.since).year():l(e.since).year()+(t-e.offset)*s}function ki(){var e,t,s,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),a[e].since<=s&&s<=a[e].until||a[e].until<=s&&s<=a[e].since)return a[e].name;return""}function Di(){var e,t,s,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),a[e].since<=s&&s<=a[e].until||a[e].until<=s&&s<=a[e].since)return a[e].narrow;return""}function vi(){var e,t,s,a=this.localeData().eras();for(e=0,t=a.length;e<t;++e)if(s=this.clone().startOf("day").valueOf(),a[e].since<=s&&s<=a[e].until||a[e].until<=s&&s<=a[e].since)return a[e].abbr;return""}function Mi(){var e,t,s,a,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e)if(s=r[e].since<=r[e].until?1:-1,a=this.clone().startOf("day").valueOf(),r[e].since<=a&&a<=r[e].until||r[e].until<=a&&a<=r[e].since)return(this.year()-l(r[e].since).year())*s+r[e].offset;return this.year()}function Yi(e){return g(this,"_erasNameRegex")||Tt.call(this),e?this._erasNameRegex:this._erasRegex}function Oi(e){return g(this,"_erasAbbrRegex")||Tt.call(this),e?this._erasAbbrRegex:this._erasRegex}function Ti(e){return g(this,"_erasNarrowRegex")||Tt.call(this),e?this._erasNarrowRegex:this._erasRegex}function Ot(e,t){return t.erasAbbrRegex(e)}function bi(e,t){return t.erasNameRegex(e)}function xi(e,t){return t.erasNarrowRegex(e)}function Pi(e,t){return t._eraYearOrdinalRegex||he}function Tt(){var e=[],t=[],s=[],a=[],r,i,n,u,f,y=this.eras();for(r=0,i=y.length;r<i;++r)n=z(y[r].name),u=z(y[r].abbr),f=z(y[r].narrow),t.push(n),e.push(u),s.push(f),a.push(n),a.push(u),a.push(f);this._erasRegex=new RegExp("^("+a.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+t.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+e.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+s.join("|")+")","i")}h(0,["gg",2],0,function(){return this.weekYear()%100});h(0,["GG",2],0,function(){return this.isoWeekYear()%100});function ze(e,t){h(0,[e,e.length],0,t)}ze("gggg","weekYear");ze("ggggg","weekYear");ze("GGGG","isoWeekYear");ze("GGGGG","isoWeekYear");d("G",He);d("g",He);d("GG",k,b);d("gg",k,b);d("GGGG",mt,ct);d("gggg",mt,ct);d("GGGGG",Ee,Ie);d("ggggg",Ee,Ie);Me(["gggg","ggggg","GGGG","GGGGG"],function(e,t,s,a){t[a.substr(0,2)]=m(e)});Me(["gg","GG"],function(e,t,s,a){t[a]=l.parseTwoDigitYear(e)});function Wi(e){return ws.call(this,e,this.week(),this.weekday()+this.localeData()._week.dow,this.localeData()._week.dow,this.localeData()._week.doy)}function Ni(e){return ws.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function Fi(){return Z(this.year(),1,4)}function Ri(){return Z(this.isoWeekYear(),1,4)}function Ci(){var e=this.localeData()._week;return Z(this.year(),e.dow,e.doy)}function Li(){var e=this.localeData()._week;return Z(this.weekYear(),e.dow,e.doy)}function ws(e,t,s,a,r){var i;return e==null?pe(this,a,r).year:(i=Z(e,a,r),t>i&&(t=i),Ii.call(this,e,t,s,a,r))}function Ii(e,t,s,a,r){var i=Qt(e,t,s,a,r),n=we(i.year,0,i.dayOfYear);return this.year(n.getUTCFullYear()),this.month(n.getUTCMonth()),this.date(n.getUTCDate()),this}h("Q",0,"Qo","quarter");d("Q",Ht);p("Q",function(e,t){t[G]=(m(e)-1)*3});function Ui(e){return e==null?Math.ceil((this.month()+1)/3):this.month((e-1)*3+this.month()%3)}h("D",["DD",2],"Do","date");d("D",k,fe);d("DD",k,b);d("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient});p(["D","DD"],L);p("Do",function(e,t){t[L]=m(e.match(k)[0])});var ps=ce("Date",!0);h("DDD",["DDDD",3],"DDDo","dayOfYear");d("DDD",Ue);d("DDDD",At);p(["DDD","DDDD"],function(e,t,s){s._dayOfYear=m(e)});function Ei(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return e==null?t:this.add(e-t,"d")}h("m",["mm",2],0,"minute");d("m",k,yt);d("mm",k,b);p(["m","mm"],N);var Hi=ce("Minutes",!1);h("s",["ss",2],0,"second");d("s",k,yt);d("ss",k,b);p(["s","ss"],j);var Ai=ce("Seconds",!1);h("S",0,0,function(){return~~(this.millisecond()/100)});h(0,["SS",2],0,function(){return~~(this.millisecond()/10)});h(0,["SSS",3],0,"millisecond");h(0,["SSSS",4],0,function(){return this.millisecond()*10});h(0,["SSSSS",5],0,function(){return this.millisecond()*100});h(0,["SSSSSS",6],0,function(){return this.millisecond()*1e3});h(0,["SSSSSSS",7],0,function(){return this.millisecond()*1e4});h(0,["SSSSSSSS",8],0,function(){return this.millisecond()*1e5});h(0,["SSSSSSSSS",9],0,function(){return this.millisecond()*1e6});d("S",Ue,Ht);d("SS",Ue,b);d("SSS",Ue,At);var X,Ss;for(X="SSSS";X.length<=9;X+="S")d(X,he);function Vi(e,t){t[se]=m(("0."+e)*1e3)}for(X="S";X.length<=9;X+="S")p(X,Vi);Ss=ce("Milliseconds",!1);h("z",0,0,"zoneAbbr");h("zz",0,0,"zoneName");function Gi(){return this._isUTC?"UTC":""}function ji(){return this._isUTC?"Coordinated Universal Time":""}var o=De.prototype;o.add=Lr;o.calendar=Gr;o.clone=jr;o.diff=Qr;o.endOf=oi;o.format=ti;o.from=si;o.fromNow=ai;o.to=ri;o.toNow=ii;o.get=ea;o.invalidAt=_i;o.isAfter=zr;o.isBefore=Zr;o.isBetween=$r;o.isSame=qr;o.isSameOrAfter=Br;o.isSameOrBefore=Jr;o.isValid=mi;o.lang=cs;o.locale=fs;o.localeData=ms;o.max=mr;o.min=cr;o.parsingFlags=yi;o.set=ta;o.startOf=ni;o.subtract=Ir;o.toArray=hi;o.toObject=fi;o.toDate=di;o.toISOString=Kr;o.inspect=ei;typeof Symbol<"u"&&Symbol.for!=null&&(o[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"});o.toJSON=ci;o.toString=Xr;o.unix=ui;o.valueOf=li;o.creationData=gi;o.eraName=ki;o.eraNarrow=Di;o.eraAbbr=vi;o.eraYear=Mi;o.year=jt;o.isLeapYear=Ks;o.weekYear=Wi;o.isoWeekYear=Ni;o.quarter=o.quarters=Ui;o.month=Bt;o.daysInMonth=da;o.week=o.weeks=wa;o.isoWeek=o.isoWeeks=pa;o.weeksInYear=Ci;o.weeksInWeekYear=Li;o.isoWeeksInYear=Fi;o.isoWeeksInISOWeekYear=Ri;o.date=ps;o.day=o.days=Na;o.weekday=Fa;o.isoWeekday=Ra;o.dayOfYear=Ei;o.hour=o.hours=Aa;o.minute=o.minutes=Hi;o.second=o.seconds=Ai;o.millisecond=o.milliseconds=Ss;o.utcOffset=vr;o.utc=Yr;o.local=Or;o.parseZone=Tr;o.hasAlignedHourOffset=br;o.isDST=xr;o.isLocal=Wr;o.isUtcOffset=Nr;o.isUtc=ls;o.isUTC=ls;o.zoneAbbr=Gi;o.zoneName=ji;o.dates=P("dates accessor is deprecated. Use date instead.",ps);o.months=P("months accessor is deprecated. Use month instead",Bt);o.years=P("years accessor is deprecated. Use year instead",jt);o.zone=P("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Mr);o.isDSTShifted=P("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",Pr);function zi(e){return S(e*1e3)}function Zi(){return S.apply(null,arguments).parseZone()}function ks(e){return e}var w=dt.prototype;w.calendar=Ws;w.longDateFormat=Cs;w.invalidDate=Is;w.ordinal=Hs;w.preparse=ks;w.postformat=ks;w.relativeTime=Vs;w.pastFuture=Gs;w.set=xs;w.eras=wi;w.erasParse=pi;w.erasConvertYear=Si;w.erasAbbrRegex=Oi;w.erasNameRegex=Yi;w.erasNarrowRegex=Ti;w.months=na;w.monthsShort=oa;w.monthsParse=ua;w.monthsRegex=fa;w.monthsShortRegex=ha;w.week=ma;w.firstDayOfYear=ga;w.firstDayOfWeek=_a;w.weekdays=Ta;w.weekdaysMin=xa;w.weekdaysShort=ba;w.weekdaysParse=Wa;w.weekdaysRegex=Ca;w.weekdaysShortRegex=La;w.weekdaysMinRegex=Ia;w.isPM=Ea;w.meridiem=Va;function Re(e,t,s,a){var r=q(),i=U().set(a,t);return r[s](i,e)}function Ds(e,t,s){if($(e)&&(t=e,e=void 0),e=e||"",t!=null)return Re(e,t,s,"month");var a,r=[];for(a=0;a<12;a++)r[a]=Re(e,a,s,"month");return r}function bt(e,t,s,a){typeof e=="boolean"?($(t)&&(s=t,t=void 0),t=t||""):(t=e,s=t,e=!1,$(t)&&(s=t,t=void 0),t=t||"");var r=q(),i=e?r._week.dow:0,n,u=[];if(s!=null)return Re(t,(s+i)%7,a,"day");for(n=0;n<7;n++)u[n]=Re(t,(n+i)%7,a,"day");return u}function $i(e,t){return Ds(e,t,"months")}function qi(e,t){return Ds(e,t,"monthsShort")}function Bi(e,t,s){return bt(e,t,s,"weekdays")}function Ji(e,t,s){return bt(e,t,s,"weekdaysShort")}function Qi(e,t,s){return bt(e,t,s,"weekdaysMin")}K("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,s=m(e%100/10)===1?"th":t===1?"st":t===2?"nd":t===3?"rd":"th";return e+s}});l.lang=P("moment.lang is deprecated. Use moment.locale instead.",K);l.langData=P("moment.langData is deprecated. Use moment.localeData instead.",q);var A=Math.abs;function Xi(){var e=this._data;return this._milliseconds=A(this._milliseconds),this._days=A(this._days),this._months=A(this._months),e.milliseconds=A(e.milliseconds),e.seconds=A(e.seconds),e.minutes=A(e.minutes),e.hours=A(e.hours),e.months=A(e.months),e.years=A(e.years),this}function vs(e,t,s,a){var r=C(t,s);return e._milliseconds+=a*r._milliseconds,e._days+=a*r._days,e._months+=a*r._months,e._bubble()}function Ki(e,t){return vs(this,e,t,1)}function en(e,t){return vs(this,e,t,-1)}function Rt(e){return e<0?Math.floor(e):Math.ceil(e)}function tn(){var e=this._milliseconds,t=this._days,s=this._months,a=this._data,r,i,n,u,f;return e>=0&&t>=0&&s>=0||e<=0&&t<=0&&s<=0||(e+=Rt(nt(s)+t)*864e5,t=0,s=0),a.milliseconds=e%1e3,r=x(e/1e3),a.seconds=r%60,i=x(r/60),a.minutes=i%60,n=x(i/60),a.hours=n%24,t+=x(n/24),f=x(Ms(t)),s+=f,t-=Rt(nt(f)),u=x(s/12),s%=12,a.days=t,a.months=s,a.years=u,this}function Ms(e){return e*4800/146097}function nt(e){return e*146097/4800}function sn(e){if(!this.isValid())return NaN;var t,s,a=this._milliseconds;if(e=W(e),e==="month"||e==="quarter"||e==="year")switch(t=this._days+a/864e5,s=this._months+Ms(t),e){case"month":return s;case"quarter":return s/3;case"year":return s/12}else switch(t=this._days+Math.round(nt(this._months)),e){case"week":return t/7+a/6048e5;case"day":return t+a/864e5;case"hour":return t*24+a/36e5;case"minute":return t*1440+a/6e4;case"second":return t*86400+a/1e3;case"millisecond":return Math.floor(t*864e5)+a;default:throw new Error("Unknown unit "+e)}}function B(e){return function(){return this.as(e)}}var Ys=B("ms"),an=B("s"),rn=B("m"),nn=B("h"),on=B("d"),ln=B("w"),un=B("M"),dn=B("Q"),hn=B("y"),fn=Ys;function cn(){return C(this)}function mn(e){return e=W(e),this.isValid()?this[e+"s"]():NaN}function re(e){return function(){return this.isValid()?this._data[e]:NaN}}var yn=re("milliseconds"),_n=re("seconds"),gn=re("minutes"),wn=re("hours"),pn=re("days"),Sn=re("months"),kn=re("years");function Dn(){return x(this.days()/7)}var V=Math.round,oe={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function vn(e,t,s,a,r){return r.relativeTime(t||1,!!s,e,a)}function Mn(e,t,s,a){var r=C(e).abs(),i=V(r.as("s")),n=V(r.as("m")),u=V(r.as("h")),f=V(r.as("d")),y=V(r.as("M")),O=V(r.as("w")),H=V(r.as("y")),J=i<=s.ss&&["s",i]||i<s.s&&["ss",i]||n<=1&&["m"]||n<s.m&&["mm",n]||u<=1&&["h"]||u<s.h&&["hh",u]||f<=1&&["d"]||f<s.d&&["dd",f];return s.w!=null&&(J=J||O<=1&&["w"]||O<s.w&&["ww",O]),J=J||y<=1&&["M"]||y<s.M&&["MM",y]||H<=1&&["y"]||["yy",H],J[2]=t,J[3]=+e>0,J[4]=a,vn.apply(null,J)}function Yn(e){return e===void 0?V:typeof e=="function"?(V=e,!0):!1}function On(e,t){return oe[e]===void 0?!1:t===void 0?oe[e]:(oe[e]=t,e==="s"&&(oe.ss=t-1),!0)}function Tn(e,t){if(!this.isValid())return this.localeData().invalidDate();var s=!1,a=oe,r,i;return typeof e=="object"&&(t=e,e=!1),typeof e=="boolean"&&(s=e),typeof t=="object"&&(a=Object.assign({},oe,t),t.s!=null&&t.ss==null&&(a.ss=t.s-1)),r=this.localeData(),i=Mn(this,!s,a,r),s&&(i=r.pastFuture(+this,i)),r.postformat(i)}var Je=Math.abs;function ie(e){return(e>0)-(e<0)||+e}function Ze(){if(!this.isValid())return this.localeData().invalidDate();var e=Je(this._milliseconds)/1e3,t=Je(this._days),s=Je(this._months),a,r,i,n,u=this.asSeconds(),f,y,O,H;return u?(a=x(e/60),r=x(a/60),e%=60,a%=60,i=x(s/12),s%=12,n=e?e.toFixed(3).replace(/\.?0+$/,""):"",f=u<0?"-":"",y=ie(this._months)!==ie(u)?"-":"",O=ie(this._days)!==ie(u)?"-":"",H=ie(this._milliseconds)!==ie(u)?"-":"",f+"P"+(i?y+i+"Y":"")+(s?y+s+"M":"")+(t?O+t+"D":"")+(r||a||e?"T":"")+(r?H+r+"H":"")+(a?H+a+"M":"")+(e?H+n+"S":"")):"P0D"}var _=je.prototype;_.isValid=pr;_.abs=Xi;_.add=Ki;_.subtract=en;_.as=sn;_.asMilliseconds=Ys;_.asSeconds=an;_.asMinutes=rn;_.asHours=nn;_.asDays=on;_.asWeeks=ln;_.asMonths=un;_.asQuarters=dn;_.asYears=hn;_.valueOf=fn;_._bubble=tn;_.clone=cn;_.get=mn;_.milliseconds=yn;_.seconds=_n;_.minutes=gn;_.hours=wn;_.days=pn;_.weeks=Dn;_.months=Sn;_.years=kn;_.humanize=Tn;_.toISOString=Ze;_.toString=Ze;_.toJSON=Ze;_.locale=fs;_.localeData=ms;_.toIsoString=P("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Ze);_.lang=cs;h("X",0,0,"unix");h("x",0,0,"valueOf");d("x",He);d("X",$s);p("X",function(e,t,s){s._d=new Date(parseFloat(e)*1e3)});p("x",function(e,t,s){s._d=new Date(m(e))});//! moment.js
l.version="2.30.1";Ts(S);l.fn=o;l.min=yr;l.max=_r;l.now=gr;l.utc=U;l.unix=zi;l.months=$i;l.isDate=ke;l.locale=K;l.invalid=Le;l.duration=C;l.isMoment=R;l.weekdays=Bi;l.parseZone=Zi;l.localeData=q;l.isDuration=be;l.monthsShort=qi;l.weekdaysMin=Qi;l.defineLocale=St;l.updateLocale=Za;l.locales=$a;l.weekdaysShort=Ji;l.normalizeUnits=W;l.relativeTimeRounding=Yn;l.relativeTimeThreshold=On;l.calendarFormat=Vr;l.prototype=o;l.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"};class Qe{dayCounts={};todayWordCount={};weeklyPlan={}}class bn{filePath="";file;today;currentWordCount;dataSaveListeners=[];app;data;plugin;constructor(){this.data=new Qe}init(t,s,a){this.filePath=t,this.app=s,this.plugin=a}async loadStatisticsData(){if(console.info("loadStatisticsData, dataFile is "+this.filePath),this.filePath==null||this.filePath=="")this.data=Object.assign(new Qe,await this.plugin.loadData()),this.removeProperties(this.data,new Ke);else{for(let t=0;t<5;t++){if(this.file=this.app.vault.getFileByPath(this.filePath),this.file!=null){console.info("dataFile ready");break}console.info("waiting for dataFile…… "),await new Promise(s=>setTimeout(s,3e3))}this.file=this.app.vault.getFileByPath(this.filePath),this.file==null&&(console.info("create dataFile "+this.filePath),this.file=await this.app.vault.create(this.filePath,JSON.stringify(new Qe))),this.data=JSON.parse(await this.app.vault.read(this.file))}this.updateDate(),Object.prototype.hasOwnProperty.call(this.data.dayCounts,this.today)?this.updateCounts():this.currentWordCount=0}removeProperties(t,s){Object.keys(s).forEach(r=>{Object.prototype.hasOwnProperty.call(t,r)&&delete t[r]})}addDataSaveListener(t){this.dataSaveListeners.push(t)}removeDataSaveListener(t){this.dataSaveListeners=this.dataSaveListeners.filter(s=>s.getListenerId()!==t.getListenerId())}async saveStatisticsData(){try{if(this.updateDate(),this.filePath!=null&&this.filePath!="")this.file==null&&(this.file=await this.app.vault.create(this.filePath,JSON.stringify(this.data))),await this.app.vault.modify(this.file,JSON.stringify(this.data));else{let t=await this.plugin.loadData();t==null&&(t={}),Object.assign(t,this.data),await this.plugin.saveData(t)}new Promise(()=>{for(const t of this.dataSaveListeners)try{t.onSave(this.data)}catch(s){console.error("dataSaveListeners, 执行异常, listenerId is "+t.getListenerId(),s)}})}catch(t){console.error("保存统计数据出错：",t)}}getWordCount(t){return t.length}updateWordCount(t,s){const a=this.getWordCount(t);Object.prototype.hasOwnProperty.call(this.data.dayCounts,this.today)?Object.prototype.hasOwnProperty.call(this.data.todayWordCount,s)?this.data.todayWordCount[s].current=a:this.data.todayWordCount[s]={initial:a,current:a}:(this.data.todayWordCount={},this.data.todayWordCount[s]={initial:a,current:a}),this.updateCounts()}updateDate(){this.today=l().format("YYYY-MM-DD")}updateCounts(){this.currentWordCount=Object.values(this.data.todayWordCount).map(t=>Math.max(0,t.current-t.initial)).reduce((t,s)=>t+s,0),this.data.dayCounts[this.today]=this.currentWordCount,this.saveStatisticsData().then()}}const Xe=new bn;var xn=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Pn(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Os={exports:{}};(function(e,t){(function(s,a){e.exports=a()})(xn,function(){return function(s){var a=s.locale,r=s.locales,i=r.indexOf(a);if(i===-1)throw new Error(a+" is not included in "+r);return function(){var n=[].slice.call(arguments);if(n.length!==r.length)throw new Error(n[0]+": missing translation(s) in "+r.slice(n.length));return n[i]}}})})(Os);var Wn=Os.exports;const Ce=Pn(Wn);class Nn extends te.PluginSettingTab{plugin;constructor(t,s){super(t,s),this.plugin=s}display(){const{containerEl:t}=this,s=Ce({locale:this.plugin.settings.language,locales:["zh-cn","en"]});t.empty(),new te.Setting(t).setName(s("语言","Language")).setDesc(s("设置页面语言。","Set the page language. ")).addDropdown(a=>{a.addOption("zh-cn","中文").addOption("en","English").setValue(this.plugin.settings.language).onChange(async r=>{this.plugin.settings.language=r,await this.plugin.saveSettings(),this.display(),await this.plugin.languageChange()})}),new te.Setting(t).setName(s("统计数据保存地址","Statistics data saving address")).setDesc(s("设置每日统计数据保存地址，如果为空，则保存在默认的插件目录下。建议使用 .json 的数据格式。修改该配置后，需要重新加载插件。","Set the daily statistical data saving address. If it is empty, it will be saved in the default plug-in directory. It is recommended to use the .json data format. After modifying this configuration, you need to reload the plugin.")).addText(a=>a.setValue(this.plugin.settings.dataFile).onChange(async r=>{this.plugin.settings.dataFile=r,await this.plugin.saveSettings()})),new te.Setting(t).setName(s("统计目录","Statistics catalog")).setDesc(s("设置需要统计数据的目录，如果为空，则统计全库的数据。","Set the directory to be counted. If it is empty, all data in the library will be counted.")).addText(a=>a.setPlaceholder(s("全部","All")).setValue(this.plugin.settings.statisticsFolder).onChange(async r=>{this.plugin.settings.statisticsFolder=r,await this.plugin.saveSettings()}))}}Ce({locale:"en",locales:["zh-cn","en"]});class Fn extends te.Plugin{settings;debouncedUpdate;statusBarItemEl;async onload(){await this.loadSettings(),Xe.init(this.settings.dataFile,this.app,this),Xe.loadStatisticsData().then(()=>{console.info("loadStatisticsData success. "),Ce({locale:this.settings.language,locales:["zh-cn","en"]})}),this.debouncedUpdate=te.debounce((t,s)=>{this.settings.statisticsFolder!=null&&this.settings.statisticsFolder!=""&&this.settings.statisticsFolder!="/"&&!s.match(this.settings.statisticsFolder)||Xe.updateWordCount(t,s)},400,!1),this.registerEvent(this.app.workspace.on("quick-preview",this.onQuickPreview.bind(this))),this.addSettingTab(new Nn(this.app,this))}onunload(){}async languageChange(){Ce({locale:this.settings.language,locales:["zh-cn","en"]})}async loadSettings(){this.settings=Object.assign({},new Ke,await this.loadData())}async saveSettings(){let t=await this.loadData();t==null&&(t=new Ke),Object.assign(t,this.settings),await this.saveData(t)}onQuickPreview(t,s){this.app.workspace.getActiveViewOfType(te.MarkdownView)&&this.debouncedUpdate(s,t.path)}}exports.default=Fn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
